from collections import Counter


def parse_class_file(file_path):
    # Read the file
    with open(file_path, 'r') as f:
        lines = f.readlines()

    # Extract class names (they appear after the second tab)
    class_names = []
    for line in lines:
        if "Results for report_VirusShare_" in line:
            continue  # Skip lines with "Results for"
        if line.strip():  # Ignore empty lines
            class_name = line.split()[-1]  # Get the last element which is the class name
            class_names.append(class_name)

    return class_names


def calculate_class_percentages(class_names):
    # Count occurrences of each class
    class_counts = Counter(class_names)

    # Calculate percentages
    total = sum(class_counts.values())
    class_percentages = {cls: (count / total) * 100 for cls, count in class_counts.items()}

    return class_counts, class_percentages


def display_class_statistics(class_counts, class_percentages):
    print("Class Counts:")
    for cls, count in class_counts.items():
        print(f"{cls}: {count}")

    print("\nClass Percentages:")
    for cls, percentage in class_percentages.items():
        print(f"{cls}: {percentage:.2f}%")


def generate_report(class_counts, class_percentages, report_path="report.txt"):
    with open(report_path, 'w') as f:
        # Write class counts to the report file
        f.write("Class Counts:\n")
        for cls, count in class_counts.items():
            f.write(f"{cls}: {count}\n")

        f.write("\nClass Percentages:\n")
        for cls, percentage in class_percentages.items():
            f.write(f"{cls}: {percentage:.2f}%\n")

    print(f"\nReport generated: {report_path}")


if __name__ == "__main__":
    # Replace 'classes.txt' with the path to your file
    file_path = 'src/malware_distribution/classes.txt'

    # Parse the file and get class names
    class_names = parse_class_file(file_path)

    # Calculate class counts and percentages
    class_counts, class_percentages = calculate_class_percentages(class_names)

    # Display the results
    display_class_statistics(class_counts, class_percentages)

    # Generate the report file
    generate_report(class_counts, class_percentages, report_path="src/malware_distribution/report.txt")
