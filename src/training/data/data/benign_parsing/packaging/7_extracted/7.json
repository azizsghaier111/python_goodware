{"imports": ["unittest", "Mock", "patch", "numpy", "pytorch_lightning", "torch", "nn", "DataLoader", "TensorDataset"], "function_calls": ["main", "randint", "PytorchDataset", "DataLoader", "PytorchModel", "Trainer", "fit", "__init__", "__init__", "Linear", "sigmoid", "self", "Adam", "Warehouse", "update_state", "assert_called_once_with", "assertEqual", "object", "Warehouse", "object", "tensor", "l1", "BCELoss", "parameters", "assertRaises", "update_state", "super", "super"], "strings": ["\n    This class represents a warehouse which maintains a state of certain key factors\n    ", "\n    This class represents Pytorch Dataset which contains states\n    ", "\n    This class represents a Pytorch Model which trains on dataset\n    ", "\n    Unit test for Warehouse class\n    ", "__main__", "\n        Initialize state dictionary with key factors\n        ", "\n        Update state of the warehouse based on key-value pairs\n        ", "\n        Initialize state and inherit TensorDataset\n        ", "\n        Initialize the model with a single Linear layer\n        ", "\n        Forward pass of the model\n        ", "\n        Training step of the model\n        ", "\n        Configure optimizers for the model\n        ", "\n        Unit test for update_state method of Warehouse class\n        ", "\n        Unit test for update_state method of Warehouse class with invalid key\n        ", "Recyclability", "Efficiency in Shipping & Handling", "Physical Protection", "Recyclability", "Recyclability", "update_state", "update_state", "Invalid key ", "!", "Invalid Key", "size", "batch_size", "max_epochs", "progress_bar_refresh_rate", "lr", "return_value", "dtype"]}