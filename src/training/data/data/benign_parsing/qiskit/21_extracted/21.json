{"imports": ["numpy", "qiskit", "pyplot", "QuantumCircuit", "transpile", "Aer", "IBMQ", "execute", "job_monitor", "plot_histogram", "NoiseModel", "FakeVigo", "least_busy", "Parameter", "COBYLA", "L_BFGS_B", "SPSA", "SLSQP", "VQE", "PauliOp", "PauliSumOp", "AerPauliExpectation", "ListOp", "I", "X", "Z", "QuantumInstance", "FermionicOperator", "pytorch_lightning", "ModelCheckpoint", "torch", "torch.nn.functional"], "function_calls": ["get_backend", "execute", "result", "get_counts", "load_account", "least_busy", "transpile", "run", "job_monitor", "result", "Parameter", "QuantumCircuit", "range", "print", "get_backend", "execute", "get_counts", "plot_histogram", "show", "FakeVigo", "from_backend", "print", "noisy_simulation", "plot_histogram", "show", "print", "get_counts", "plot_histogram", "show", "from_list", "print", "convert", "print", "COBYLA", "VQE", "print", "save_account", "prepare_circuits", "main_circuit_execution", "variational_quantum_eigensolver", "main", "backends", "h", "QuantumInstance", "result", "execute_on_IBMQ", "AerPauliExpectation", "StateFn", "get_backend", "compute_minimum_eigenvalue", "to_matrix", "StateFn"], "strings": ["__main__", "qasm_simulator", "\u03b8", "The ideal circuit execution:", "qasm_simulator", "Ideal Quantum Circuit Execution", "The noisy circuit simulation:", "Noisy Quantum Circuit Simulation", "Execution on IBM Q Network:", "Execution on IBM Q Network", "YOUR IBM Q TOKEN HERE", "The defined Hamiltonian is \n", ".", "Expectation Value: ", "Minimum Eigenvalue of the Hamiltonian computed with VQE method: ", "basis_gates", "noise_model", "title", "title", "title", "maxiter", "statevector_simulator", "ansatz", "optimizer", "quantum_instance", "operational", "simulator", "Z", "X", "backend", "operator"]}