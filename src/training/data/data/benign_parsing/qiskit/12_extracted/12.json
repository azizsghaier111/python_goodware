{"imports": ["numpy", "torch", "pytorch_lightning", "Aer", "transpile", "noise", "FakeAthens", "plot_histogram", "QuantumCircuit", "Aer", "execute", "QasmSimulator", "VQE", "NumPyEigensolver", "SLSQP", "WeightedPauliOperator", "QuantumCircuit", "ClassicalRegister", "QuantumRegister", "Instruction", "Parameter", "ParameterVector", "QuantumRegister", "plot_bloch_multivector", "plot_histogram", "optim"], "function_calls": ["FakeAthens", "basic_device_noise_model", "properties", "SLSQP", "ParametrizedQuantumCircuit", "QuantumCircuit", "NoisyQuantumCircuit", "execute", "QuantumExperiment", "execute", "result", "get_counts", "plot_histogram", "__init__", "ParameterVector", "h", "barrier", "rx", "__init__", "forward", "loss_func", "Adam", "get_backend", "range", "range", "parameters", "configuration", "super", "super", "conj", "circuit"], "strings": ["Class for simulating a quantum circuit with noise based on device properties", "Classical Optimizer setup", "A quantum circuit with parameterized gates", "PyTorch Lightning module for a quantum experiment", "__main__", "Execution result", "theta", "qasm_simulator", "maxiter", "basis_gates", "coupling_map", "noise_model", "shots", "title", "lr"]}