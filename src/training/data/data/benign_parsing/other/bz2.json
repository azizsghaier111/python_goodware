{"imports": ["open", "io", "os", "_compression", "BZ2Compressor", "BZ2Decompressor"], "function_calls": ["property", "replace", "BZ2File", "BZ2Compressor", "ValueError", "_check_not_closed", "fileno", "readable", "seekable", "_check_not_closed", "_check_not_closed", "_check_can_read", "peek", "_check_can_read", "read", "_check_can_read", "read1", "_check_can_read", "readinto", "_check_can_read", "readline", "_check_can_read", "readlines", "_check_can_write", "isinstance", "compress", "write", "writelines", "_check_can_seek", "seek", "_check_not_closed", "ValueError", "ValueError", "ValueError", "text_encoding", "TextIOWrapper", "compress", "flush", "ValueError", "_builtin_open", "DecompressReader", "BufferedReader", "close", "isinstance", "__index__", "isinstance", "__index__", "len", "memoryview", "tell", "ValueError", "BZ2Compressor", "hasattr", "hasattr", "TypeError", "write", "hasattr", "TypeError", "hasattr", "TypeError", "BZ2Compressor", "flush", "BZ2Compressor", "ValueError"], "strings": ["Interface to the libbzip2 compression library.\n\nThis module provides a file interface, classes for incremental\n(de)compression, and functions for one-shot (de)compression.\n", "Nadeem Vawda <nadeem.vawda@gmail.com>", "BZ2File", "BZ2Compressor", "BZ2Decompressor", "open", "compress", "decompress", "A file object providing transparent bzip2 (de)compression.\n\n    A BZ2File can act as a wrapper for an existing file object, or refer\n    directly to a named file on disk.\n\n    Note that BZ2File provides a *binary* file interface - data read is\n    returned as bytes, and data to be written should be given as bytes.\n    ", "Open a bzip2-compressed file in binary or text mode.\n\n    The filename argument can be an actual filename (a str, bytes, or\n    PathLike object), or an existing file object to read from or write\n    to.\n\n    The mode argument can be \"r\", \"rb\", \"w\", \"wb\", \"x\", \"xb\", \"a\" or\n    \"ab\" for binary mode, or \"rt\", \"wt\", \"xt\" or \"at\" for text mode.\n    The default mode is \"rb\", and the default compresslevel is 9.\n\n    For binary mode, this function is equivalent to the BZ2File\n    constructor: BZ2File(filename, mode, compresslevel). In this case,\n    the encoding, errors and newline arguments must not be provided.\n\n    For text mode, a BZ2File object is created, and wrapped in an\n    io.TextIOWrapper instance with the specified encoding, error\n    handling behavior, and line ending(s).\n\n    ", "Compress a block of data.\n\n    compresslevel, if given, must be a number between 1 and 9.\n\n    For incremental compression, use a BZ2Compressor object instead.\n    ", "Decompress a block of data.\n\n    For incremental decompression, use a BZ2Decompressor object instead.\n    ", "Open a bzip2-compressed file.\n\n        If filename is a str, bytes, or PathLike object, it gives the\n        name of the file to be opened. Otherwise, it should be a file\n        object, which will be used to read or write the compressed data.\n\n        mode can be 'r' for reading (default), 'w' for (over)writing,\n        'x' for creating exclusively, or 'a' for appending. These can\n        equivalently be given as 'rb', 'wb', 'xb', and 'ab'.\n\n        If mode is 'w', 'x' or 'a', compresslevel can be a number between 1\n        and 9 specifying the level of compression: 1 produces the least\n        compression, and 9 (default) produces the most compression.\n\n        If mode is 'r', the input file may be the concatenation of\n        multiple compressed streams.\n        ", "Flush and close the file.\n\n        May be called more than once without error. Once the file is\n        closed, any other operation on it will raise a ValueError.\n        ", "True if this file is closed.", "Return the file descriptor for the underlying file.", "Return whether the file supports seeking.", "Return whether the file was opened for reading.", "Return whether the file was opened for writing.", "Return buffered data without advancing the file position.\n\n        Always returns at least one byte of data, unless at EOF.\n        The exact number of bytes returned is unspecified.\n        ", "Read up to size uncompressed bytes from the file.\n\n        If size is negative or omitted, read until EOF is reached.\n        Returns b'' if the file is already at EOF.\n        ", "Read up to size uncompressed bytes, while trying to avoid\n        making multiple reads from the underlying stream. Reads up to a\n        buffer's worth of data if size is negative.\n\n        Returns b'' if the file is at EOF.\n        ", "Read bytes into b.\n\n        Returns the number of bytes read (0 for EOF).\n        ", "Read a line of uncompressed bytes from the file.\n\n        The terminating newline (if present) is retained. If size is\n        non-negative, no more than size bytes will be read (in which\n        case the line may be incomplete). Returns b'' if already at EOF.\n        ", "Read a list of lines of uncompressed bytes from the file.\n\n        size can be specified to control the number of lines read: no\n        further lines will be read once the total size of the lines read\n        so far equals or exceeds size.\n        ", "Write a byte string to the file.\n\n        Returns the number of uncompressed bytes written, which is\n        always the length of data in bytes. Note that due to buffering,\n        the file on disk may not reflect the data written until close()\n        is called.\n        ", "Write a sequence of byte strings to the file.\n\n        Returns the number of uncompressed bytes written.\n        seq can be any iterable yielding byte strings.\n\n        Line separators are not added between the written byte strings.\n        ", "Change the file position.\n\n        The new position is specified by offset, relative to the\n        position indicated by whence. Values for whence are:\n\n            0: start of stream (default); offset must not be negative\n            1: current stream position\n            2: end of stream; offset must not be positive\n\n        Returns the new file position.\n\n        Note that seeking is emulated, so depending on the parameters,\n        this operation may be extremely slow.\n        ", "Return the current file position.", "rb", "t", "t", "", "t", "r", "compresslevel", "compresslevel must be between 1 and 9", "rb", "b", "Argument 'encoding' not supported in binary mode", "Argument 'errors' not supported in binary mode", "Argument 'newline' not supported in binary mode", "compresslevel must be between 1 and 9", "", "r", "rb", "wb", "compresslevel", "w", "wb", "xb", "read", "write", "filename must be a str, bytes, file or PathLike object", "__index__", "Integer argument expected", "__index__", "Integer argument expected", "Invalid mode: %r", "x", "xb", "ab", "trailing_error", "a", "ab", "Invalid mode: %r"]}