{"imports": ["PretrainedConfig", "logging", "BackboneConfigMixin", "get_aligned_output_features_output_indices", "CONVNEXTV2_PRETRAINED_CONFIG_ARCHIVE_MAP"], "function_calls": ["get_logger"], "strings": [" ConvNeXTV2 model configuration", "\n    This is the configuration class to store the configuration of a [`ConvNextV2Model`]. It is used to instantiate an\n    ConvNeXTV2 model according to the specified arguments, defining the model architecture. Instantiating a\n    configuration with the defaults will yield a similar configuration to that of the ConvNeXTV2\n    [facebook/convnextv2-tiny-1k-224](https://huggingface.co/facebook/convnextv2-tiny-1k-224) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        num_channels (`int`, *optional*, defaults to 3):\n            The number of input channels.\n        patch_size (`int`, optional, defaults to 4):\n            Patch size to use in the patch embedding layer.\n        num_stages (`int`, optional, defaults to 4):\n            The number of stages in the model.\n        hidden_sizes (`List[int]`, *optional*, defaults to `[96, 192, 384, 768]`):\n            Dimensionality (hidden size) at each stage.\n        depths (`List[int]`, *optional*, defaults to `[3, 3, 9, 3]`):\n            Depth (number of blocks) for each stage.\n        hidden_act (`str` or `function`, *optional*, defaults to `\"gelu\"`):\n            The non-linear activation function (function or string) in each block. If string, `\"gelu\"`, `\"relu\"`,\n            `\"selu\"` and `\"gelu_new\"` are supported.\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps (`float`, *optional*, defaults to 1e-12):\n            The epsilon used by the layer normalization layers.\n        drop_path_rate (`float`, *optional*, defaults to 0.0):\n            The drop rate for stochastic depth.\n        out_features (`List[str]`, *optional*):\n            If used as backbone, list of features to output. Can be any of `\"stem\"`, `\"stage1\"`, `\"stage2\"`, etc.\n            (depending on how many stages the model has). If unset and `out_indices` is set, will default to the\n            corresponding stages. If unset and `out_indices` is unset, will default to the last stage. Must be in the\n            same order as defined in the `stage_names` attribute.\n        out_indices (`List[int]`, *optional*):\n            If used as backbone, list of indices of features to output. Can be any of 0, 1, 2, etc. (depending on how\n            many stages the model has). If unset and `out_features` is set, will default to the corresponding stages.\n            If unset and `out_features` is unset, will default to the last stage. Must be in the\n            same order as defined in the `stage_names` attribute.\n\n    Example:\n    ```python\n    >>> from transformers import ConvNeXTV2Config, ConvNextV2Model\n\n    >>> # Initializing a ConvNeXTV2 convnextv2-tiny-1k-224 style configuration\n    >>> configuration = ConvNeXTV2Config()\n\n    >>> # Initializing a model (with random weights) from the convnextv2-tiny-1k-224 style configuration\n    >>> model = ConvNextV2Model(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```", "convnextv2", "gelu"]}