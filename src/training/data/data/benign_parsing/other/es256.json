{"imports": ["utils", "cryptography.exceptions", "backends", "hashes", "serialization", "ec", "padding", "decode_dss_signature", "encode_dss_signature", "cryptography.x509", "_helpers", "base"], "function_calls": ["default_backend", "PKCS1v15", "classmethod", "property", "classmethod", "to_bytes", "encode_dss_signature", "to_bytes", "copy_docstring", "to_bytes", "load_pem_public_key", "cls", "to_bytes", "sign", "decode_dss_signature", "is_python_3", "copy_docstring", "to_bytes", "load_pem_private_key", "cls", "copy", "private_bytes", "load_pem_private_key", "update", "len", "is_python_3", "from_bytes", "int_from_bytes", "is_python_3", "from_bytes", "int_from_bytes", "load_pem_x509_certificate", "public_key", "cls", "copy_docstring", "ECDSA", "int_to_bytes", "int_to_bytes", "NoEncryption", "SHA256", "to_bytes", "to_bytes"], "strings": ["ECDSA (ES256) verifier and signer that use the ``cryptography`` library.\n", "Verifies ECDSA cryptographic signatures using public keys.\n\n    Args:\n        public_key (\n                cryptography.hazmat.primitives.asymmetric.ec.ECDSAPublicKey):\n            The public key used to verify signatures.\n    ", "Signs messages with an ECDSA private key.\n\n    Args:\n        private_key (\n                cryptography.hazmat.primitives.asymmetric.ec.ECDSAPrivateKey):\n            The private key to sign with.\n        key_id (str): Optional key ID used to identify this private key. This\n            can be useful to associate the private key with its associated\n            public key or certificate.\n    ", "Construct an Verifier instance from a public key or public\n        certificate string.\n\n        Args:\n            public_key (Union[str, bytes]): The public key in PEM format or the\n                x509 public key certificate.\n\n        Returns:\n            Verifier: The constructed verifier.\n\n        Raises:\n            ValueError: If the public key can't be parsed.\n        ", "Construct a RSASigner from a private key in PEM format.\n\n        Args:\n            key (Union[bytes, str]): Private key in PEM format.\n            key_id (str): An optional key id used to identify the private key.\n\n        Returns:\n            google.auth.crypt._cryptography_rsa.RSASigner: The\n            constructed signer.\n\n        Raises:\n            ValueError: If ``key`` is not ``bytes`` or ``str`` (unicode).\n            UnicodeDecodeError: If ``key`` is ``bytes`` but cannot be decoded\n                into a UTF-8 ``str``.\n            ValueError: If ``cryptography`` \"Could not deserialize key data.\"\n        ", "Pickle helper that serializes the _key attribute.", "Pickle helper that deserializes the _key attribute.", "_key", "_key", "big", "big", "big", "big", "_key", "big", "big", "password", "backend", "key_id", "encoding", "format", "encryption_algorithm", "byteorder", "byteorder", "byteorder", "byteorder", "byteorder", "byteorder"]}