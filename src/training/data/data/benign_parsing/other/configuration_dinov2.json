{"imports": ["OrderedDict", "Mapping", "version", "PretrainedConfig", "OnnxConfig", "logging", "BackboneConfigMixin", "get_aligned_output_features_output_indices", "DINOV2_PRETRAINED_CONFIG_ARCHIVE_MAP"], "function_calls": ["get_logger", "parse", "OrderedDict"], "strings": [" DINOv2 model configuration", "\n    This is the configuration class to store the configuration of a [`Dinov2Model`]. It is used to instantiate an\n    Dinov2 model according to the specified arguments, defining the model architecture. Instantiating a configuration\n    with the defaults will yield a similar configuration to that of the Dinov2\n    [google/dinov2-base-patch16-224](https://huggingface.co/google/dinov2-base-patch16-224) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        hidden_size (`int`, *optional*, defaults to 768):\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers (`int`, *optional*, defaults to 12):\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads (`int`, *optional*, defaults to 12):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        mlp_ratio (`int`, *optional*, defaults to 4):\n            Ratio of the hidden size of the MLPs relative to the `hidden_size`.\n        hidden_act (`str` or `function`, *optional*, defaults to `\"gelu\"`):\n            The non-linear activation function (function or string) in the encoder and pooler. If string, `\"gelu\"`,\n            `\"relu\"`, `\"selu\"` and `\"gelu_new\"` are supported.\n        hidden_dropout_prob (`float`, *optional*, defaults to 0.0):\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_probs_dropout_prob (`float`, *optional*, defaults to 0.0):\n            The dropout ratio for the attention probabilities.\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps (`float`, *optional*, defaults to 1e-06):\n            The epsilon used by the layer normalization layers.\n        image_size (`int`, *optional*, defaults to 224):\n            The size (resolution) of each image.\n        patch_size (`int`, *optional*, defaults to 16):\n            The size (resolution) of each patch.\n        num_channels (`int`, *optional*, defaults to 3):\n            The number of input channels.\n        qkv_bias (`bool`, *optional*, defaults to `True`):\n            Whether to add a bias to the queries, keys and values.\n        layerscale_value (`float`, *optional*, defaults to 1.0):\n           Initial value to use for layer scale.\n        drop_path_rate (`float`, *optional*, defaults to 0.0):\n            Stochastic depth rate per sample (when applied in the main path of residual layers).\n        use_swiglu_ffn (`bool`, *optional*, defaults to `False`):\n            Whether to use the SwiGLU feedforward neural network.\n        out_features (`List[str]`, *optional*):\n            If used as backbone, list of features to output. Can be any of `\"stem\"`, `\"stage1\"`, `\"stage2\"`, etc.\n            (depending on how many stages the model has). If unset and `out_indices` is set, will default to the\n            corresponding stages. If unset and `out_indices` is unset, will default to the last stage. Must be in the\n            same order as defined in the `stage_names` attribute.\n        out_indices (`List[int]`, *optional*):\n            If used as backbone, list of indices of features to output. Can be any of 0, 1, 2, etc. (depending on how\n            many stages the model has). If unset and `out_features` is set, will default to the corresponding stages.\n            If unset and `out_features` is unset, will default to the last stage. Must be in the\n            same order as defined in the `stage_names` attribute.\n        apply_layernorm (`bool`, *optional*, defaults to `True`):\n            Whether to apply layer normalization to the feature maps in case the model is used as backbone.\n        reshape_hidden_states (`bool`, *optional*, defaults to `True`):\n            Whether to reshape the feature maps to 4D tensors of shape `(batch_size, hidden_size, height, width)` in\n            case the model is used as backbone. If `False`, the feature maps will be 3D tensors of shape `(batch_size,\n            seq_len, hidden_size)`.\n\n    Example:\n\n    ```python\n    >>> from transformers import Dinov2Config, Dinov2Model\n\n    >>> # Initializing a Dinov2 dinov2-base-patch16-224 style configuration\n    >>> configuration = Dinov2Config()\n\n    >>> # Initializing a model (with random weights) from the dinov2-base-patch16-224 style configuration\n    >>> model = Dinov2Model(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```", "dinov2", "1.11", "gelu", "pixel_values", "batch", "num_channels", "height", "width"]}