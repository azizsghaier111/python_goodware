{"imports": ["attr_value_pb2", "context", "atomic_function", "concrete_function", "tracing_compilation", "transform", "function_def_to_graph", "ops", "FuncGraph", "control_flow_util", "control_flow_v2_func_graphs", "gradients_util", "keras_deps", "tf_contextlib", "tf_export"], "function_calls": ["contextmanager", "executing_eagerly", "get_default_graph", "executing_eagerly", "isinstance", "apply_func_graph_transforms", "from_func_graph", "_add_function_recursive", "replace", "GraphOrParentsInXlaContext", "_get_control_flow_context", "startswith", "get_call_context_function", "GraphOrParentsInXlaContext", "isinstance", "tf_export", "isinstance", "_set_attr", "GraphOrParentsInXlaContext", "_set_attr", "_set_attr", "get_default_graph", "_get_function", "as_default", "function_def_to_graph", "PossibleTapeGradientTypes", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "uid", "AttrValue", "AttrValue", "AttrValue", "get_default_graph", "hasattr", "KeyError", "getattr", "call_function", "isinstance", "keras_call_context_function", "context", "TracingOptions", "uid", "context", "get_default_graph", "get_default_graph"], "strings": ["Utilities for V2 control flow.", "Returns if the current graph is, or is nested in, a defun.", "Returns if the graph is a while loop FuncGraph.", "Converts func_graph to a TF_Function and adds it to the current graph.\n\n  Args:\n    func_graph: FuncGraph\n\n  Returns:\n    The name of the new TF_Function.\n  ", "Returns a unique name to use for a control flow function.\n\n  Args:\n    scope: A name scope string.\n    name: An identifier for this function (e.g. \"true\", \"body\").\n\n  Returns:\n    A string, the name to use for the function.\n  ", "Sets the flag to enable lowering on `op` if necessary.\n\n  Lowering allows cond_v2 and while_v2 to avoid some of the limitations of\n  Functions, allowing users to specify devices & colocation inside of cond_v2\n  and while_v2 input functions, and enabling non-strict evaluation & partial\n  pruning. This brings v2 control flow closer to feature parity with v1 control\n  flow.\n\n  However, we do not lower in the following cases:\n    - When the `If` or `While` ops are in the XLA context. Because it is easier\n      for XLA to apply its own optimizations when dealing with un-lowered\n      control flow operators than with low-level control flow primitives.\n    - When the eager execution context specifies the executor of functions to\n      be the single threaded executor (see context.function_executor_type()).\n      Because the single threaded executor does not support v1 control flow ops.\n    - When 'lower_using_switch_merge' is explicitly set to False.\n\n  Args:\n    op: An `If` or `While` Operation.\n    lower_using_switch_merge: Explicit value to lower or not (optional).\n  ", "Tells XLA whether to propagate compile-time consts in the loop body.\n\n  This is needed to make compile time constants available to ops, for example\n  `max_num_elements` in `EmptyTensorList`, inside the loop body. Ideally this\n  would always be turned on, but that doesn't work with legacy functionalized\n  while_loops.\n\n  Args:\n    op: A `While` Operation.\n  ", "Returns the index of the input corresponding to `tensor_name`.\n\n  This method is used to find the corresponding index of an arbitrary resource\n  tensor in a function (the function could be a loop body). We assume that\n  resource handles are never created in functions, so that every resource\n  tensor can be traced back to a function input.\n\n  The awkward signature of this method is to make it work with both FuncGraphs\n  and FunctionDefs. This is so we can recurse on function call ops without\n  building the corresponding FuncGraph (note that even if a FuncGraph for a\n  FunctionDef already exists, the input/output/node names may have been\n  changed when the FuncGraph was serialized to the FunctionDef, which makes it\n  unusable with this algorithm).\n\n  Args:\n    tensor_name: the name of the resource tensor to be resolved to an input.\n    input_names: a list of the names of all inputs to the function.\n    node_defs: a dict mapping op name -> NodeDef for every op in the function.\n    functions: a dict mapping function name -> AtomicFunction.\n\n  Returns:\n    The index into input_names corresponding to `tensor_name`.\n  ", "Clears the control inputs but preserves the ControlFlowContext.\n\n  This is needed to preserve the XLAControlFlowControl when clearing\n  control inputs for the gradient accumulators in while_v2.\n  `ops.control_dependencies` does not allow that.\n\n  Yields:\n    A context manager in which the ops created will not have any control inputs\n    by default but the control flow context is the same.\n  ", "Whether to output all intermediates of a functional control flow op.\n\n  The default behavior is to output intermediates only when building a Keras\n  Layer in graph mode and that too when certain other conditions are met:\n  1. We do not output intermediates if the functional control flow op\n     is being built inside a FuncGraph which is not a If/While graph. This\n     guards against outputting intermediates in eager mode since keras adds\n     tensors to a FuncGraph named \"keras_graph\" in that case. Also because we\n     do not output intermediates of tf.function (since this feature is only for\n     backwards compatibility) outputting intermediates of functional control\n     flow ops built inside tf.function is of no value.\n  2. We do not output intermediates when the compilation is using XLA or for a\n     TPU.\n  3. We do not output intermediates when a single threaded executor is used\n     since that does not perform inlining and pruning.\n\n  Returns:\n    A bool telling whether to output all intermediates.\n  ", "Generates and returns a FuncGraph for the given op and input_shapes.", "Check if `graph` is wrapped by `run_as_function_for_tape_gradients`.", "Fix higher-order tape gradients by wrapping `make_op` in a function.\n\n  Args:\n    make_op: A function that takes a list of inputs and returns a list of output\n      tensors. This function should set any handle data relevant to its outputs\n      before returning.\n    inputs: A list of tensors to check for tape gradients and pass to\n      `make_op`. These should include all tensors used in `make_op`.\n\n  Returns:\n    Tensors corresponding to `make_op`'s output.\n  ", "Whether to output all intermediates from functional control flow ops.\n\n  The \"default\" behavior to is to output all intermediates when using v2 control\n  flow inside Keras models in graph mode. This is needed to support taking\n  gradients of v2 control flow. In graph mode, Keras can sometimes freeze the\n  forward graph before the gradient computation which does not work for v2\n  control flow since it requires updating the forward ops to output the needed\n  intermediates. We work around this by proactively outputting the needed\n  intermediates when building the forward pass itself. Ideally any such extra\n  tensors should be pruned out at runtime. However, if for any reason this\n  doesn't work for you or if you have an inference-only model you can turn this\n  behavior off using\n  `tf.compat.v1.experimental.output_all_intermediates(False)`.\n\n  If with the default behavior you are still seeing errors of the form\n  \"Connecting to invalid output X of source node Y which has Z outputs\" try\n  setting `tf.compat.v1.experimental.output_all_intermediates(True)` and\n  please file an issue at https://github.com/tensorflow/tensorflow/issues.\n\n  Args:\n    state: True, False or None. None restores the default behavior.\n  ", "/", "_", "%s_grad_%s", "TPUStrategy", "SINGLE_THREADED_EXECUTOR", "_lower_using_switch_merge", "SINGLE_THREADED_EXECUTOR", "_lower_using_switch_merge", "_xla_propagate_compile_time_consts", "cflow_gradient_wrapper", "outer_graph", "experimental.output_all_intermediates", "%s%s_%s", "outer_graph", "name", "", "cflow_gradient_wrapper", "v1", "%s cannot be found in the graph", "input_shapes", "cflow_gradient_wrapper", "b", "b", "b", "tracing_options", "autograph"]}