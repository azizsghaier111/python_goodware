{"imports": ["os", "Union", "PretrainedConfig", "MODEL_FOR_CAUSAL_LM_MAPPING_NAMES", "logging", "CONFIG_MAPPING", "BLIP_2_PRETRAINED_CONFIG_ARCHIVE_MAP"], "function_calls": ["get_logger", "_set_token_in_kwargs", "_set_token_in_kwargs"], "strings": [" BLIP-2 model configuration", "\n    This is the configuration class to store the configuration of a [`Blip2VisionModel`]. It is used to instantiate a\n    BLIP-2 vision encoder according to the specified arguments, defining the model architecture. Instantiating a\n    configuration defaults will yield a similar configuration to that of the BLIP-2\n    [Salesforce/blip2-opt-2.7b](https://huggingface.co/Salesforce/blip2-opt-2.7b) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        hidden_size (`int`, *optional*, defaults to 1408):\n            Dimensionality of the encoder layers and the pooler layer.\n        intermediate_size (`int`, *optional*, defaults to 6144):\n            Dimensionality of the \"intermediate\" (i.e., feed-forward) layer in the Transformer encoder.\n        num_hidden_layers (`int`, *optional*, defaults to 39):\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads (`int`, *optional*, defaults to 16):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        image_size (`int`, *optional*, defaults to 224):\n            The size (resolution) of each image.\n        patch_size (`int`, *optional*, defaults to 14):\n            The size (resolution) of each patch.\n        hidden_act (`str` or `function`, *optional*, defaults to `\"gelu\"`):\n            The non-linear activation function (function or string) in the encoder and pooler. If string, `\"gelu\"`,\n            `\"relu\"`, `\"selu\"` and `\"gelu_new\"` ``\"gelu\"` are supported. layer_norm_eps (`float`, *optional*, defaults\n            to 1e-5): The epsilon used by the layer normalization layers.\n        attention_dropout (`float`, *optional*, defaults to 0.0):\n            The dropout ratio for the attention probabilities.\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        qkv_bias (`bool`, *optional*, defaults to `True`):\n            Whether to add a bias to the queries and values in the self-attention layers.\n\n    Example:\n\n    ```python\n    >>> from transformers import Blip2VisionConfig, Blip2VisionModel\n\n    >>> # Initializing a Blip2VisionConfig with Salesforce/blip2-opt-2.7b style configuration\n    >>> configuration = Blip2VisionConfig()\n\n    >>> # Initializing a Blip2VisionModel (with random weights) from the Salesforce/blip2-opt-2.7b style configuration\n    >>> model = Blip2VisionModel(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```", "blip_2_vision_model", "\n    This is the configuration class to store the configuration of a [`Blip2QFormerModel`]. It is used to instantiate a\n    BLIP-2 Querying Transformer (Q-Former) model according to the specified arguments, defining the model architecture.\n    Instantiating a configuration with the defaults will yield a similar configuration to that of the BLIP-2\n    [Salesforce/blip2-opt-2.7b](https://huggingface.co/Salesforce/blip2-opt-2.7b) architecture. Configuration objects\n    inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the documentation from\n    [`PretrainedConfig`] for more information.\n\n    Note that [`Blip2QFormerModel`] is very similar to [`BertLMHeadModel`] with interleaved cross-attention.\n\n    Args:\n        vocab_size (`int`, *optional*, defaults to 30522):\n            Vocabulary size of the Q-Former model. Defines the number of different tokens that can be represented by\n            the `inputs_ids` passed when calling the model.\n        hidden_size (`int`, *optional*, defaults to 768):\n            Dimensionality of the encoder layers and the pooler layer.\n        num_hidden_layers (`int`, *optional*, defaults to 12):\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads (`int`, *optional*, defaults to 12):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size (`int`, *optional*, defaults to 3072):\n            Dimensionality of the \"intermediate\" (often named feed-forward) layer in the Transformer encoder.\n        hidden_act (`str` or `Callable`, *optional*, defaults to `\"gelu\"`):\n            The non-linear activation function (function or string) in the encoder and pooler. If string, `\"gelu\"`,\n            `\"relu\"`, `\"silu\"` and `\"gelu_new\"` are supported.\n        hidden_dropout_prob (`float`, *optional*, defaults to 0.1):\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_probs_dropout_prob (`float`, *optional*, defaults to 0.1):\n            The dropout ratio for the attention probabilities.\n        max_position_embeddings (`int`, *optional*, defaults to 512):\n            The maximum sequence length that this model might ever be used with. Typically set this to something large\n            just in case (e.g., 512 or 1024 or 2048).\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps (`float`, *optional*, defaults to 1e-12):\n            The epsilon used by the layer normalization layers.\n        position_embedding_type (`str`, *optional*, defaults to `\"absolute\"`):\n            Type of position embedding. Choose one of `\"absolute\"`, `\"relative_key\"`, `\"relative_key_query\"`. For\n            positional embeddings use `\"absolute\"`. For more information on `\"relative_key\"`, please refer to\n            [Self-Attention with Relative Position Representations (Shaw et al.)](https://arxiv.org/abs/1803.02155).\n            For more information on `\"relative_key_query\"`, please refer to *Method 4* in [Improve Transformer Models\n            with Better Relative Position Embeddings (Huang et al.)](https://arxiv.org/abs/2009.13658).\n        cross_attention_frequency (`int`, *optional*, defaults to 2):\n            The frequency of adding cross-attention to the Transformer layers.\n        encoder_hidden_size (`int`, *optional*, defaults to 1408):\n            The hidden size of the hidden states for cross-attention.\n\n    Examples:\n\n    ```python\n    >>> from transformers import Blip2QFormerConfig, Blip2QFormerModel\n\n    >>> # Initializing a BLIP-2 Salesforce/blip2-opt-2.7b style configuration\n    >>> configuration = Blip2QFormerConfig()\n\n    >>> # Initializing a model (with random weights) from the Salesforce/blip2-opt-2.7b style configuration\n    >>> model = Blip2QFormerModel(configuration)\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```", "blip_2_qformer", "\n    [`Blip2Config`] is the configuration class to store the configuration of a [`Blip2ForConditionalGeneration`]. It is\n    used to instantiate a BLIP-2 model according to the specified arguments, defining the vision model, Q-Former model\n    and language model configs. Instantiating a configuration with the defaults will yield a similar configuration to\n    that of the BLIP-2 [Salesforce/blip2-opt-2.7b](https://huggingface.co/Salesforce/blip2-opt-2.7b) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        vision_config (`dict`, *optional*):\n            Dictionary of configuration options used to initialize [`Blip2VisionConfig`].\n        qformer_config (`dict`, *optional*):\n            Dictionary of configuration options used to initialize [`Blip2QFormerConfig`].\n        text_config (`dict`, *optional*):\n            Dictionary of configuration options used to initialize any [`PretrainedConfig`].\n        num_query_tokens (`int`, *optional*, defaults to 32):\n            The number of query tokens passed through the Transformer.\n\n        kwargs (*optional*):\n            Dictionary of keyword arguments.\n\n    Example:\n\n    ```python\n    >>> from transformers import (\n    ...     Blip2VisionConfig,\n    ...     Blip2QFormerConfig,\n    ...     OPTConfig,\n    ...     Blip2Config,\n    ...     Blip2ForConditionalGeneration,\n    ... )\n\n    >>> # Initializing a Blip2Config with Salesforce/blip2-opt-2.7b style configuration\n    >>> configuration = Blip2Config()\n\n    >>> # Initializing a Blip2ForConditionalGeneration (with random weights) from the Salesforce/blip2-opt-2.7b style configuration\n    >>> model = Blip2ForConditionalGeneration(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n\n    >>> # We can also initialize a Blip2Config from a Blip2VisionConfig, Blip2QFormerConfig and any PretrainedConfig\n\n    >>> # Initializing BLIP-2 vision, BLIP-2 Q-Former and language model configurations\n    >>> vision_config = Blip2VisionConfig()\n    >>> qformer_config = Blip2QFormerConfig()\n    >>> text_config = OPTConfig()\n\n    >>> config = Blip2Config.from_text_vision_configs(vision_config, qformer_config, text_config)\n    ```", "blip-2", "\n        Instantiate a [`Blip2Config`] (or a derived class) from a BLIP-2 vision model, Q-Former and language model\n        configurations.\n\n        Returns:\n            [`Blip2Config`]: An instance of a configuration object\n        ", "vision_config", "qformer_config", "text_config", "gelu", "gelu", "absolute"]}