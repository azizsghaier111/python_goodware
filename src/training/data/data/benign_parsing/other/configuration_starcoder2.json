{"imports": ["PretrainedConfig", "logging", "STARCODER2_PRETRAINED_CONFIG_ARCHIVE_MAP"], "function_calls": ["get_logger"], "strings": [" Starcoder2 model configuration", "\n    This is the configuration class to store the configuration of a [`Starcoder2Model`]. It is used to instantiate a\n    Starcoder2 model according to the specified arguments, defining the model architecture. Instantiating a configuration\n    with the defaults will yield a similar configuration to that of the [bigcode/starcoder2-7b_16k](https://huggingface.co/bigcode/starcoder2-7b_16k) model.\n\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n\n    Args:\n        vocab_size (`int`, *optional*, defaults to 49152):\n            Vocabulary size of the Starcoder2 model. Defines the number of different tokens that can be represented by the\n            `inputs_ids` passed when calling [`Starcoder2Model`]\n        hidden_size (`int`, *optional*, defaults to 3072):\n            Dimension of the hidden representations.\n        intermediate_size (`int`, *optional*, defaults to 12288):\n            Dimension of the MLP representations.\n        num_hidden_layers (`int`, *optional*, defaults to 30):\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads (`int`, *optional*, defaults to 24):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        num_key_value_heads (`int`, *optional*, defaults to 2):\n            This is the number of key_value heads that should be used to implement Grouped Query Attention. If\n            `num_key_value_heads=num_attention_heads`, the model will use Multi Head Attention (MHA), if\n            `num_key_value_heads=1 the model will use Multi Query Attention (MQA) otherwise GQA is used. When\n            converting a multi-head checkpoint to a GQA checkpoint, each group key and value head should be constructed\n            by meanpooling all the original heads within that group. For more details checkout [this\n            paper](https://arxiv.org/pdf/2305.13245.pdf). If it is not specified, will default to `8`.\n        hidden_act (`str` or `function`, *optional*, defaults to `\"gelu_pytorch_tanh\"`):\n            The non-linear activation function (function or string) in the decoder.\n        max_position_embeddings (`int`, *optional*, defaults to 4096):\n            The maximum sequence length that this model might ever be used with. Starcoder2's sliding window attention\n            allows sequence of up to 4096*32 tokens.\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        norm_epsilon (`float`, *optional*, defaults to 1e-05):\n            Epsilon value for the layer norm\n        use_cache (`bool`, *optional*, defaults to `True`):\n            Whether or not the model should return the last key/values attentions (not used by all models). Only\n            relevant if `config.is_decoder=True`.\n        bos_token_id (`int`, *optional*, defaults to 50256):\n            The id of the \"beginning-of-sequence\" token.\n        eos_token_id (`int`, *optional*, defaults to 50256):\n            The id of the \"end-of-sequence\" token.\n        rope_theta (`float`, *optional*, defaults to 10000.0):\n            The base period of the RoPE embeddings.\n        sliding_window (`int`, *optional*):\n            Sliding window attention window size. If not specified, will default to `None` (no sliding window).\n        attention_dropout (`float`, *optional*, defaults to 0.0):\n            The dropout ratio for the attention probabilities.\n        residual_dropout (`float`, *optional*, defaults to 0.0):\n            Residual connection dropout value.\n        embedding_dropout (`float`, *optional*, defaults to 0.0):\n            Embedding dropout.\n        use_bias (`bool`, *optional*, defaults to `True`):\n            Whether to use bias term on linear layers of the model.\n\n\n    ```python\n    >>> from transformers import Starcoder2Model, Starcoder2Config\n\n    >>> # Initializing a Starcoder2 7B style configuration\n    >>> configuration = Starcoder2Config()\n\n    >>> # Initializing a model from the Starcoder2 7B style configuration\n    >>> model = Starcoder2Model(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```", "starcoder2", "past_key_values", "gelu_pytorch_tanh"]}