{"imports": ["Any", "Optional", "Sequence", "Union", "torch", "Tensor", "tensor", "_r2_score_compute", "_r2_score_update", "Metric", "_MATPLOTLIB_AVAILABLE", "_AX_TYPE", "_PLOT_OUT_TYPE"], "function_calls": ["_r2_score_update", "_r2_score_compute", "_plot"], "strings": ["Compute r2 score also known as `R2 Score_Coefficient Determination`_.\n\n    .. math:: R^2 = 1 - \\frac{SS_{res}}{SS_{tot}}\n\n    where :math:`SS_{res}=\\sum_i (y_i - f(x_i))^2` is the sum of residual squares, and\n    :math:`SS_{tot}=\\sum_i (y_i - \\bar{y})^2` is total sum of squares. Can also calculate\n    adjusted r2 score given by\n\n    .. math:: R^2_{adj} = 1 - \\frac{(1-R^2)(n-1)}{n-k-1}\n\n    where the parameter :math:`k` (the number of independent regressors) should be provided as the `adjusted` argument.\n    The score is only proper defined when :math:`SS_{tot}\\neq 0`, which can happen for near constant targets. In this\n    case a score of 0 is returned. By definition the score is bounded between 0 and 1, where 1 corresponds to the\n    predictions exactly matching the targets.\n\n    As input to ``forward`` and ``update`` the metric accepts the following input:\n\n    - ``preds`` (:class:`~torch.Tensor`): Predictions from model in float tensor with shape ``(N,)``\n      or ``(N, M)`` (multioutput)\n    - ``target`` (:class:`~torch.Tensor`): Ground truth values in float tensor with shape ``(N,)``\n      or ``(N, M)`` (multioutput)\n\n    As output of ``forward`` and ``compute`` the metric returns the following output:\n\n    - ``r2score`` (:class:`~torch.Tensor`): A tensor with the r2 score(s)\n\n    In the case of multioutput, as default the variances will be uniformly averaged over the additional dimensions.\n    Please see argument ``multioutput`` for changing this behavior.\n\n    Args:\n        num_outputs: Number of outputs in multioutput setting\n        adjusted: number of independent regressors for calculating adjusted r2 score.\n        multioutput: Defines aggregation in the case of multiple output scores. Can be one of the following strings:\n\n            * ``'raw_values'`` returns full set of scores\n            * ``'uniform_average'`` scores are uniformly averaged\n            * ``'variance_weighted'`` scores are weighted by their individual variances\n        kwargs: Additional keyword arguments, see :ref:`Metric kwargs` for more info.\n\n    Raises:\n        ValueError:\n            If ``adjusted`` parameter is not an integer larger or equal to 0.\n        ValueError:\n            If ``multioutput`` is not one of ``\"raw_values\"``, ``\"uniform_average\"`` or ``\"variance_weighted\"``.\n\n    Example:\n        >>> from torchmetrics.regression import R2Score\n        >>> target = torch.tensor([3, -0.5, 2, 7])\n        >>> preds = torch.tensor([2.5, 0.0, 2, 8])\n        >>> r2score = R2Score()\n        >>> r2score(preds, target)\n        tensor(0.9486)\n\n        >>> target = torch.tensor([[0.5, 1], [-1, 1], [7, -6]])\n        >>> preds = torch.tensor([[0, 2], [-1, 2], [8, -5]])\n        >>> r2score = R2Score(num_outputs=2, multioutput='raw_values')\n        >>> r2score(preds, target)\n        tensor([0.9654, 0.9082])\n\n    ", "R2Score.plot", "Update state with predictions and targets.", "Compute r2 score over the metric states.", "Plot a single or multiple values from the metric.\n\n        Args:\n            val: Either a single result from calling `metric.forward` or `metric.compute` or a list of these results.\n                If no value is provided, will automatically call `metric.compute` and plot that result.\n            ax: An matplotlib axis object. If provided will add plot to that axis\n\n        Returns:\n            Figure and Axes object\n\n        Raises:\n            ModuleNotFoundError:\n                If `matplotlib` is not installed\n\n        .. plot::\n            :scale: 75\n\n            >>> from torch import randn\n            >>> # Example plotting a single value\n            >>> from torchmetrics.regression import R2Score\n            >>> metric = R2Score()\n            >>> metric.update(randn(10,), randn(10,))\n            >>> fig_, ax_ = metric.plot()\n\n        .. plot::\n            :scale: 75\n\n            >>> from torch import randn\n            >>> # Example plotting multiple values\n            >>> from torchmetrics.regression import R2Score\n            >>> metric = R2Score()\n            >>> values = []\n            >>> for _ in range(10):\n            ...     values.append(metric(randn(10,), randn(10,)))\n            >>> fig, ax = metric.plot(values)\n\n        "]}