{"imports": ["functools", "operator", "PretrainedConfig", "logging", "SPEECHT5_PRETRAINED_CONFIG_ARCHIVE_MAP"], "function_calls": ["get_logger", "list", "list", "list", "len", "reduce", "ValueError", "len", "len", "len", "len", "len", "len"], "strings": [" SpeechT5 model configuration", "microsoft/speecht5_hifigan", "https://huggingface.co/microsoft/speecht5_hifigan/resolve/main/config.json", "\n    This is the configuration class to store the configuration of a [`SpeechT5Model`]. It is used to instantiate a\n    SpeechT5 model according to the specified arguments, defining the model architecture. Instantiating a configuration\n    with the defaults will yield a similar configuration to that of the SpeechT5\n    [microsoft/speecht5_asr](https://huggingface.co/microsoft/speecht5_asr) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        vocab_size (`int`, *optional*, defaults to 81):\n            Vocabulary size of the SpeechT5 model. Defines the number of different tokens that can be represented by\n            the `inputs_ids` passed to the forward method of [`SpeechT5Model`].\n        hidden_size (`int`, *optional*, defaults to 768):\n            Dimensionality of the encoder layers and the pooler layer.\n        encoder_layers (`int`, *optional*, defaults to 12):\n            Number of hidden layers in the Transformer encoder.\n        encoder_attention_heads (`int`, *optional*, defaults to 12):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        encoder_ffn_dim (`int`, *optional*, defaults to 3072):\n            Dimensionality of the \"intermediate\" (i.e., feed-forward) layer in the Transformer encoder.\n        encoder_layerdrop (`float`, *optional*, defaults to 0.1):\n            The LayerDrop probability for the encoder. See the [LayerDrop paper](see https://arxiv.org/abs/1909.11556)\n            for more details.\n        decoder_layers (`int`, *optional*, defaults to 6):\n            Number of hidden layers in the Transformer decoder.\n        decoder_attention_heads (`int`, *optional*, defaults to 12):\n            Number of attention heads for each attention layer in the Transformer decoder.\n        decoder_ffn_dim (`int`, *optional*, defaults to 3072):\n            Dimensionality of the \"intermediate\" (often named feed-forward) layer in the Transformer decoder.\n        decoder_layerdrop (`float`, *optional*, defaults to 0.1):\n            The LayerDrop probability for the decoder. See the [LayerDrop paper](see https://arxiv.org/abs/1909.11556)\n            for more details.\n        hidden_act (`str` or `function`, *optional*, defaults to `\"gelu\"`):\n            The non-linear activation function (function or string) in the encoder and pooler. If string, `\"gelu\"`,\n            `\"relu\"`, `\"selu\"` and `\"gelu_new\"` are supported.\n        positional_dropout (`float`, *optional*, defaults to 0.1):\n            The dropout probability for the text position encoding layers.\n        hidden_dropout (`float`, *optional*, defaults to 0.1):\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_dropout (`float`, *optional*, defaults to 0.1):\n            The dropout ratio for the attention probabilities.\n        activation_dropout (`float`, *optional*, defaults to 0.1):\n            The dropout ratio for activations inside the fully connected layer.\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps (`float`, *optional*, defaults to 1e-5):\n            The epsilon used by the layer normalization layers.\n        scale_embedding (`bool`, *optional*, defaults to `False`):\n            Scale embeddings by diving by sqrt(d_model).\n        feat_extract_norm (`str`, *optional*, defaults to `\"group\"`):\n            The norm to be applied to 1D convolutional layers in the speech encoder pre-net. One of `\"group\"` for group\n            normalization of only the first 1D convolutional layer or `\"layer\"` for layer normalization of all 1D\n            convolutional layers.\n        feat_proj_dropout (`float`, *optional*, defaults to 0.0):\n            The dropout probability for output of the speech encoder pre-net.\n        feat_extract_activation (`str, `optional`, defaults to `\"gelu\"`):\n            The non-linear activation function (function or string) in the 1D convolutional layers of the feature\n            extractor. If string, `\"gelu\"`, `\"relu\"`, `\"selu\"` and `\"gelu_new\"` are supported.\n        conv_dim (`Tuple[int]` or `List[int]`, *optional*, defaults to `(512, 512, 512, 512, 512, 512, 512)`):\n            A tuple of integers defining the number of input and output channels of each 1D convolutional layer in the\n            speech encoder pre-net. The length of *conv_dim* defines the number of 1D convolutional layers.\n        conv_stride (`Tuple[int]` or `List[int]`, *optional*, defaults to `(5, 2, 2, 2, 2, 2, 2)`):\n            A tuple of integers defining the stride of each 1D convolutional layer in the speech encoder pre-net. The\n            length of *conv_stride* defines the number of convolutional layers and has to match the length of\n            *conv_dim*.\n        conv_kernel (`Tuple[int]` or `List[int]`, *optional*, defaults to `(10, 3, 3, 3, 3, 3, 3)`):\n            A tuple of integers defining the kernel size of each 1D convolutional layer in the speech encoder pre-net.\n            The length of *conv_kernel* defines the number of convolutional layers and has to match the length of\n            *conv_dim*.\n        conv_bias (`bool`, *optional*, defaults to `False`):\n            Whether the 1D convolutional layers have a bias.\n        num_conv_pos_embeddings (`int`, *optional*, defaults to 128):\n            Number of convolutional positional embeddings. Defines the kernel size of 1D convolutional positional\n            embeddings layer.\n        num_conv_pos_embedding_groups (`int`, *optional*, defaults to 16):\n            Number of groups of 1D convolutional positional embeddings layer.\n        apply_spec_augment (`bool`, *optional*, defaults to `True`):\n            Whether to apply *SpecAugment* data augmentation to the outputs of the speech encoder pre-net. For\n            reference see [SpecAugment: A Simple Data Augmentation Method for Automatic Speech\n            Recognition](https://arxiv.org/abs/1904.08779).\n        mask_time_prob (`float`, *optional*, defaults to 0.05):\n            Percentage (between 0 and 1) of all feature vectors along the time axis which will be masked. The masking\n            procecure generates ''mask_time_prob*len(time_axis)/mask_time_length'' independent masks over the axis. If\n            reasoning from the propability of each feature vector to be chosen as the start of the vector span to be\n            masked, *mask_time_prob* should be `prob_vector_start*mask_time_length`. Note that overlap may decrease the\n            actual percentage of masked vectors. This is only relevant if `apply_spec_augment is True`.\n        mask_time_length (`int`, *optional*, defaults to 10):\n            Length of vector span along the time axis.\n        mask_time_min_masks (`int`, *optional*, defaults to 2),:\n            The minimum number of masks of length `mask_feature_length` generated along the time axis, each time step,\n            irrespectively of `mask_feature_prob`. Only relevant if ''mask_time_prob*len(time_axis)/mask_time_length <\n            mask_time_min_masks''\n        mask_feature_prob (`float`, *optional*, defaults to 0.0):\n            Percentage (between 0 and 1) of all feature vectors along the feature axis which will be masked. The\n            masking procecure generates ''mask_feature_prob*len(feature_axis)/mask_time_length'' independent masks over\n            the axis. If reasoning from the propability of each feature vector to be chosen as the start of the vector\n            span to be masked, *mask_feature_prob* should be `prob_vector_start*mask_feature_length`. Note that overlap\n            may decrease the actual percentage of masked vectors. This is only relevant if `apply_spec_augment is\n            True`.\n        mask_feature_length (`int`, *optional*, defaults to 10):\n            Length of vector span along the feature axis.\n        mask_feature_min_masks (`int`, *optional*, defaults to 0),:\n            The minimum number of masks of length `mask_feature_length` generated along the feature axis, each time\n            step, irrespectively of `mask_feature_prob`. Only relevant if\n            ''mask_feature_prob*len(feature_axis)/mask_feature_length < mask_feature_min_masks''\n        num_mel_bins (`int`, *optional*, defaults to 80):\n            Number of mel features used per input features. Used by the speech decoder pre-net. Should correspond to\n            the value used in the [`SpeechT5Processor`] class.\n        speech_decoder_prenet_layers (`int`, *optional*, defaults to 2):\n            Number of layers in the speech decoder pre-net.\n        speech_decoder_prenet_units (`int`, *optional*, defaults to 256):\n            Dimensionality of the layers in the speech decoder pre-net.\n        speech_decoder_prenet_dropout (`float`, *optional*, defaults to 0.5):\n            The dropout probability for the speech decoder pre-net layers.\n        speaker_embedding_dim (`int`, *optional*, defaults to 512):\n            Dimensionality of the *XVector* embedding vectors.\n        speech_decoder_postnet_layers (`int`, *optional*, defaults to 5):\n            Number of layers in the speech decoder post-net.\n        speech_decoder_postnet_units (`int`, *optional*, defaults to 256):\n            Dimensionality of the layers in the speech decoder post-net.\n        speech_decoder_postnet_kernel (`int`, *optional*, defaults to 5):\n            Number of convolutional filter channels in the speech decoder post-net.\n        speech_decoder_postnet_dropout (`float`, *optional*, defaults to 0.5):\n            The dropout probability for the speech decoder post-net layers.\n        reduction_factor (`int`, *optional*, defaults to 2):\n            Spectrogram length reduction factor for the speech decoder inputs.\n        max_speech_positions (`int`, *optional*, defaults to 4000):\n            The maximum sequence length of speech features that this model might ever be used with.\n        max_text_positions (`int`, *optional*, defaults to 450):\n            The maximum sequence length of text features that this model might ever be used with.\n        encoder_max_relative_position (`int`, *optional*, defaults to 160):\n            Maximum distance for relative position embedding in the encoder.\n        use_guided_attention_loss (`bool`, *optional*, defaults to `True`):\n            Whether to apply guided attention loss while training the TTS model.\n        guided_attention_loss_num_heads (`int`, *optional*, defaults to 2):\n            Number of attention heads the guided attention loss will be applied to. Use -1 to apply this loss to all\n            attention heads.\n        guided_attention_loss_sigma (`float`, *optional*, defaults to 0.4):\n            Standard deviation for guided attention loss.\n        guided_attention_loss_scale (`float`, *optional*, defaults to 10.0):\n            Scaling coefficient for guided attention loss (also known as lambda).\n        use_cache (`bool`, *optional*, defaults to `True`):\n            Whether or not the model should return the last key/values attentions (not used by all models).\n\n    Example:\n\n    ```python\n    >>> from transformers import SpeechT5Model, SpeechT5Config\n\n    >>> # Initializing a \"microsoft/speecht5_asr\" style configuration\n    >>> configuration = SpeechT5Config()\n\n    >>> # Initializing a model (with random weights) from the \"microsoft/speecht5_asr\" style configuration\n    >>> model = SpeechT5Model(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```", "speecht5", "\n    This is the configuration class to store the configuration of a [`SpeechT5HifiGanModel`]. It is used to instantiate\n    a SpeechT5 HiFi-GAN vocoder model according to the specified arguments, defining the model architecture.\n    Instantiating a configuration with the defaults will yield a similar configuration to that of the SpeechT5\n    [microsoft/speecht5_hifigan](https://huggingface.co/microsoft/speecht5_hifigan) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        model_in_dim (`int`, *optional*, defaults to 80):\n            The number of frequency bins in the input log-mel spectrogram.\n        sampling_rate (`int`, *optional*, defaults to 16000):\n            The sampling rate at which the output audio will be generated, expressed in hertz (Hz).\n        upsample_initial_channel (`int`, *optional*, defaults to 512):\n            The number of input channels into the upsampling network.\n        upsample_rates (`Tuple[int]` or `List[int]`, *optional*, defaults to `[4, 4, 4, 4]`):\n            A tuple of integers defining the stride of each 1D convolutional layer in the upsampling network. The\n            length of *upsample_rates* defines the number of convolutional layers and has to match the length of\n            *upsample_kernel_sizes*.\n        upsample_kernel_sizes (`Tuple[int]` or `List[int]`, *optional*, defaults to `[8, 8, 8, 8]`):\n            A tuple of integers defining the kernel size of each 1D convolutional layer in the upsampling network. The\n            length of *upsample_kernel_sizes* defines the number of convolutional layers and has to match the length of\n            *upsample_rates*.\n        resblock_kernel_sizes (`Tuple[int]` or `List[int]`, *optional*, defaults to `[3, 7, 11]`):\n            A tuple of integers defining the kernel sizes of the 1D convolutional layers in the multi-receptive field\n            fusion (MRF) module.\n        resblock_dilation_sizes (`Tuple[Tuple[int]]` or `List[List[int]]`, *optional*, defaults to `[[1, 3, 5], [1, 3, 5], [1, 3, 5]]`):\n            A nested tuple of integers defining the dilation rates of the dilated 1D convolutional layers in the\n            multi-receptive field fusion (MRF) module.\n        initializer_range (`float`, *optional*, defaults to 0.01):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        leaky_relu_slope (`float`, *optional*, defaults to 0.1):\n            The angle of the negative slope used by the leaky ReLU activation.\n        normalize_before (`bool`, *optional*, defaults to `True`):\n            Whether or not to normalize the spectrogram before vocoding using the vocoder's learned mean and variance.\n\n    Example:\n\n    ```python\n    >>> from transformers import SpeechT5HifiGan, SpeechT5HifiGanConfig\n\n    >>> # Initializing a \"microsoft/speecht5_hifigan\" style configuration\n    >>> configuration = SpeechT5HifiGanConfig()\n\n    >>> # Initializing a model (with random weights) from the \"microsoft/speecht5_hifigan\" style configuration\n    >>> model = SpeechT5HifiGan(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```", "hifigan", "num_attention_heads", "num_hidden_layers", "encoder_attention_heads", "encoder_layers", "gelu", "group", "gelu", "Configuration for convolutional layers is incorrect. It is required that `len(config.conv_dim)` == `len(config.conv_stride)` == `len(config.conv_kernel)`, but is `len(config.conv_dim) = ", "`, `len(config.conv_stride) = ", "`, `len(config.conv_kernel) = ", "`."]}