{"imports": ["OrderedDict", "TYPE_CHECKING", "Any", "Mapping", "Optional", "version", "PretrainedConfig", "OnnxConfig", "compute_effective_axis_dimension", "logging", "LAYOUTLMV3_PRETRAINED_CONFIG_ARCHIVE_MAP", "ProcessorMixin", "TensorType"], "function_calls": ["get_logger", "parse", "setattr", "compute_effective_axis_dimension", "num_special_tokens_to_add", "compute_effective_axis_dimension", "_generate_dummy_images", "dict", "OrderedDict", "processor", "join"], "strings": [" LayoutLMv3 model configuration", "\n    This is the configuration class to store the configuration of a [`LayoutLMv3Model`]. It is used to instantiate an\n    LayoutLMv3 model according to the specified arguments, defining the model architecture. Instantiating a\n    configuration with the defaults will yield a similar configuration to that of the LayoutLMv3\n    [microsoft/layoutlmv3-base](https://huggingface.co/microsoft/layoutlmv3-base) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        vocab_size (`int`, *optional*, defaults to 50265):\n            Vocabulary size of the LayoutLMv3 model. Defines the number of different tokens that can be represented by\n            the `inputs_ids` passed when calling [`LayoutLMv3Model`].\n        hidden_size (`int`, *optional*, defaults to 768):\n            Dimension of the encoder layers and the pooler layer.\n        num_hidden_layers (`int`, *optional*, defaults to 12):\n            Number of hidden layers in the Transformer encoder.\n        num_attention_heads (`int`, *optional*, defaults to 12):\n            Number of attention heads for each attention layer in the Transformer encoder.\n        intermediate_size (`int`, *optional*, defaults to 3072):\n            Dimension of the \"intermediate\" (i.e., feed-forward) layer in the Transformer encoder.\n        hidden_act (`str` or `function`, *optional*, defaults to `\"gelu\"`):\n            The non-linear activation function (function or string) in the encoder and pooler. If string, `\"gelu\"`,\n            `\"relu\"`, `\"selu\"` and `\"gelu_new\"` are supported.\n        hidden_dropout_prob (`float`, *optional*, defaults to 0.1):\n            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.\n        attention_probs_dropout_prob (`float`, *optional*, defaults to 0.1):\n            The dropout ratio for the attention probabilities.\n        max_position_embeddings (`int`, *optional*, defaults to 512):\n            The maximum sequence length that this model might ever be used with. Typically set this to something large\n            just in case (e.g., 512 or 1024 or 2048).\n        type_vocab_size (`int`, *optional*, defaults to 2):\n            The vocabulary size of the `token_type_ids` passed when calling [`LayoutLMv3Model`].\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps (`float`, *optional*, defaults to 1e-5):\n            The epsilon used by the layer normalization layers.\n        max_2d_position_embeddings (`int`, *optional*, defaults to 1024):\n            The maximum value that the 2D position embedding might ever be used with. Typically set this to something\n            large just in case (e.g., 1024).\n        coordinate_size (`int`, *optional*, defaults to `128`):\n            Dimension of the coordinate embeddings.\n        shape_size (`int`, *optional*, defaults to `128`):\n            Dimension of the width and height embeddings.\n        has_relative_attention_bias (`bool`, *optional*, defaults to `True`):\n            Whether or not to use a relative attention bias in the self-attention mechanism.\n        rel_pos_bins (`int`, *optional*, defaults to 32):\n            The number of relative position bins to be used in the self-attention mechanism.\n        max_rel_pos (`int`, *optional*, defaults to 128):\n            The maximum number of relative positions to be used in the self-attention mechanism.\n        max_rel_2d_pos (`int`, *optional*, defaults to 256):\n            The maximum number of relative 2D positions in the self-attention mechanism.\n        rel_2d_pos_bins (`int`, *optional*, defaults to 64):\n            The number of 2D relative position bins in the self-attention mechanism.\n        has_spatial_attention_bias (`bool`, *optional*, defaults to `True`):\n            Whether or not to use a spatial attention bias in the self-attention mechanism.\n        visual_embed (`bool`, *optional*, defaults to `True`):\n            Whether or not to add patch embeddings.\n        input_size (`int`, *optional*, defaults to `224`):\n            The size (resolution) of the images.\n        num_channels (`int`, *optional*, defaults to `3`):\n            The number of channels of the images.\n        patch_size (`int`, *optional*, defaults to `16`)\n            The size (resolution) of the patches.\n        classifier_dropout (`float`, *optional*):\n            The dropout ratio for the classification head.\n\n    Example:\n\n    ```python\n    >>> from transformers import LayoutLMv3Config, LayoutLMv3Model\n\n    >>> # Initializing a LayoutLMv3 microsoft/layoutlmv3-base style configuration\n    >>> configuration = LayoutLMv3Config()\n\n    >>> # Initializing a model (with random weights) from the microsoft/layoutlmv3-base style configuration\n    >>> model = LayoutLMv3Model(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```", "layoutlmv3", "1.12", "\n        Generate inputs to provide to the ONNX exporter for the specific framework\n\n        Args:\n            processor ([`ProcessorMixin`]):\n                The processor associated with this model configuration.\n            batch_size (`int`, *optional*, defaults to -1):\n                The batch size to export the model for (-1 means dynamic axis).\n            seq_length (`int`, *optional*, defaults to -1):\n                The sequence length to export the model for (-1 means dynamic axis).\n            is_pair (`bool`, *optional*, defaults to `False`):\n                Indicate if the input is a pair (sentence 1, sentence 2).\n            framework (`TensorType`, *optional*, defaults to `None`):\n                The framework (PyTorch or TensorFlow) that the processor will generate tensors for.\n            num_channels (`int`, *optional*, defaults to 3):\n                The number of channels of the generated images.\n            image_width (`int`, *optional*, defaults to 40):\n                The width of the generated images.\n            image_height (`int`, *optional*, defaults to 40):\n                The height of the generated images.\n\n        Returns:\n            Mapping[str, Any]: holding the kwargs to provide to the model's forward function\n        ", "processor", "ProcessorMixin", "batch_size", "seq_length", "is_pair", "framework", "num_channels", "image_width", "image_height", "return", "apply_ocr", "gelu", "question-answering", "sequence-classification", "TensorType", "input_ids", "bbox", "attention_mask", "pixel_values", "fixed_dimension", "num_token_to_add", "fixed_dimension", "num_token_to_add", "input_ids", "attention_mask", "bbox", "pixel_values", "batch", "sequence", "batch", "sequence", "batch", "sequence", "batch", "num_channels", "text", "boxes", "return_tensors", "batch", "sequence", "batch", "sequence", "batch", "sequence", "batch", "num_channels", "height", "width", " "]}