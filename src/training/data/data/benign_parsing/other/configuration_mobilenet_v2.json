{"imports": ["OrderedDict", "Mapping", "version", "PretrainedConfig", "OnnxConfig", "logging", "MOBILENET_V2_PRETRAINED_CONFIG_ARCHIVE_MAP"], "function_calls": ["get_logger", "parse", "OrderedDict", "OrderedDict"], "strings": [" MobileNetV2 model configuration", "\n    This is the configuration class to store the configuration of a [`MobileNetV2Model`]. It is used to instantiate a\n    MobileNetV2 model according to the specified arguments, defining the model architecture. Instantiating a\n    configuration with the defaults will yield a similar configuration to that of the MobileNetV2\n    [google/mobilenet_v2_1.0_224](https://huggingface.co/google/mobilenet_v2_1.0_224) architecture.\n\n    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the\n    documentation from [`PretrainedConfig`] for more information.\n\n    Args:\n        num_channels (`int`, *optional*, defaults to 3):\n            The number of input channels.\n        image_size (`int`, *optional*, defaults to 224):\n            The size (resolution) of each image.\n        depth_multiplier (`float`, *optional*, defaults to 1.0):\n            Shrinks or expands the number of channels in each layer. Default is 1.0, which starts the network with 32\n            channels. This is sometimes also called \"alpha\" or \"width multiplier\".\n        depth_divisible_by (`int`, *optional*, defaults to 8):\n            The number of channels in each layer will always be a multiple of this number.\n        min_depth (`int`, *optional*, defaults to 8):\n            All layers will have at least this many channels.\n        expand_ratio (`float`, *optional*, defaults to 6.0):\n            The number of output channels of the first layer in each block is input channels times expansion ratio.\n        output_stride (`int`, *optional*, defaults to 32):\n            The ratio between the spatial resolution of the input and output feature maps. By default the model reduces\n            the input dimensions by a factor of 32. If `output_stride` is 8 or 16, the model uses dilated convolutions\n            on the depthwise layers instead of regular convolutions, so that the feature maps never become more than 8x\n            or 16x smaller than the input image.\n        first_layer_is_expansion (`bool`, *optional*, defaults to `True`):\n            True if the very first convolution layer is also the expansion layer for the first expansion block.\n        finegrained_output (`bool`, *optional*, defaults to `True`):\n            If true, the number of output channels in the final convolution layer will stay large (1280) even if\n            `depth_multiplier` is less than 1.\n        hidden_act (`str` or `function`, *optional*, defaults to `\"relu6\"`):\n            The non-linear activation function (function or string) in the Transformer encoder and convolution layers.\n        tf_padding (`bool`, *optional*, defaults to `True`):\n            Whether to use TensorFlow padding rules on the convolution layers.\n        classifier_dropout_prob (`float`, *optional*, defaults to 0.8):\n            The dropout ratio for attached classifiers.\n        initializer_range (`float`, *optional*, defaults to 0.02):\n            The standard deviation of the truncated_normal_initializer for initializing all weight matrices.\n        layer_norm_eps (`float`, *optional*, defaults to 0.001):\n            The epsilon used by the layer normalization layers.\n        semantic_loss_ignore_index (`int`, *optional*, defaults to 255):\n            The index that is ignored by the loss function of the semantic segmentation model.\n\n    Example:\n\n    ```python\n    >>> from transformers import MobileNetV2Config, MobileNetV2Model\n\n    >>> # Initializing a \"mobilenet_v2_1.0_224\" style configuration\n    >>> configuration = MobileNetV2Config()\n\n    >>> # Initializing a model from the \"mobilenet_v2_1.0_224\" style configuration\n    >>> model = MobileNetV2Model(configuration)\n\n    >>> # Accessing the model configuration\n    >>> configuration = model.config\n    ```", "mobilenet_v2", "1.11", "image-classification", "relu6", "pixel_values", "last_hidden_state", "pooler_output", "batch", "logits", "batch", "batch", "batch"]}