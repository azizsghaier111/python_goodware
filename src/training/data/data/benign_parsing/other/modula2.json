{"imports": ["re", "RegexLexer", "include", "get_bool_opt", "get_list_opt", "Text", "Comment", "Operator", "Keyword", "Name", "String", "Number", "Punctuation", "Error"], "function_calls": ["get_list_opt", "get_bool_opt", "set", "set", "set", "set", "set", "set", "set", "set", "set", "set", "len", "len", "get_tokens_unprocessed", "search", "search", "include", "include", "include", "include", "include", "include", "include", "include", "include", "include", "include", "include", "include", "set_dialect", "get_list_opt", "update", "update", "update", "update", "update", "update", "update", "update", "update", "update", "startswith", "endswith", "range", "set_dialect", "set", "set", "difference", "difference", "difference", "difference", "difference", "difference", "difference", "difference", "len", "len", "get_dialect_from_dialect_tag", "set_dialect", "set", "set", "set", "set", "set", "set", "set", "set", "lower", "lower", "lower", "lower", "startswith", "startswith", "startswith", "startswith"], "strings": ["\n    pygments.lexers.modula2\n    ~~~~~~~~~~~~~~~~~~~~~~~\n\n    Multi-Dialect Lexer for Modula-2.\n\n    :copyright: Copyright 2006-2024 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n", "Modula2Lexer", "\n    For Modula-2 source code.\n\n    The Modula-2 lexer supports several dialects.  By default, it operates in\n    fallback mode, recognising the *combined* literals, punctuation symbols\n    and operators of all supported dialects, and the *combined* reserved words\n    and builtins of PIM Modula-2, ISO Modula-2 and Modula-2 R10, while not\n    differentiating between library defined identifiers.\n\n    To select a specific dialect, a dialect option may be passed\n    or a dialect tag may be embedded into a source file.\n\n    Dialect Options:\n\n    `m2pim`\n        Select PIM Modula-2 dialect.\n    `m2iso`\n        Select ISO Modula-2 dialect.\n    `m2r10`\n        Select Modula-2 R10 dialect.\n    `objm2`\n        Select Objective Modula-2 dialect.\n\n    The PIM and ISO dialect options may be qualified with a language extension.\n\n    Language Extensions:\n\n    `+aglet`\n        Select Aglet Modula-2 extensions, available with m2iso.\n    `+gm2`\n        Select GNU Modula-2 extensions, available with m2pim.\n    `+p1`\n        Select p1 Modula-2 extensions, available with m2iso.\n    `+xds`\n        Select XDS Modula-2 extensions, available with m2iso.\n\n\n    Passing a Dialect Option via Unix Commandline Interface\n\n    Dialect options may be passed to the lexer using the `dialect` key.\n    Only one such option should be passed. If multiple dialect options are\n    passed, the first valid option is used, any subsequent options are ignored.\n\n    Examples:\n\n    `$ pygmentize -O full,dialect=m2iso -f html -o /path/to/output /path/to/input`\n        Use ISO dialect to render input to HTML output\n    `$ pygmentize -O full,dialect=m2iso+p1 -f rtf -o /path/to/output /path/to/input`\n        Use ISO dialect with p1 extensions to render input to RTF output\n\n\n    Embedding a Dialect Option within a source file\n\n    A dialect option may be embedded in a source file in form of a dialect\n    tag, a specially formatted comment that specifies a dialect option.\n\n    Dialect Tag EBNF::\n\n       dialectTag :\n           OpeningCommentDelim Prefix dialectOption ClosingCommentDelim ;\n\n       dialectOption :\n           'm2pim' | 'm2iso' | 'm2r10' | 'objm2' |\n           'm2iso+aglet' | 'm2pim+gm2' | 'm2iso+p1' | 'm2iso+xds' ;\n\n       Prefix : '!' ;\n\n       OpeningCommentDelim : '(*' ;\n\n       ClosingCommentDelim : '*)' ;\n\n    No whitespace is permitted between the tokens of a dialect tag.\n\n    In the event that a source file contains multiple dialect tags, the first\n    tag that contains a valid dialect option will be used and any subsequent\n    dialect tags will be ignored.  Ideally, a dialect tag should be placed\n    at the beginning of a source file.\n\n    An embedded dialect tag overrides a dialect option set via command line.\n\n    Examples:\n\n    ``(*!m2r10*) DEFINITION MODULE Foobar; ...``\n        Use Modula2 R10 dialect to render this source file.\n    ``(*!m2pim+gm2*) DEFINITION MODULE Bazbam; ...``\n        Use PIM dialect with GNU extensions to render this source file.\n\n\n    Algol Publication Mode:\n\n    In Algol publication mode, source text is rendered for publication of\n    algorithms in scientific papers and academic texts, following the format\n    of the Revised Algol-60 Language Report.  It is activated by passing\n    one of two corresponding styles as an option:\n\n    `algol`\n        render reserved words lowercase underline boldface\n        and builtins lowercase boldface italic\n    `algol_nu`\n        render reserved words lowercase boldface (no underlining)\n        and builtins lowercase boldface italic\n\n    The lexer automatically performs the required lowercase conversion when\n    this mode is activated.\n\n    Example:\n\n    ``$ pygmentize -O full,style=algol -f latex -o /path/to/output /path/to/input``\n        Render input file in Algol publication mode to LaTeX output.\n\n\n    Rendering Mode of First Class ADT Identifiers:\n\n    The rendering of standard library first class ADT identifiers is controlled\n    by option flag \"treat_stdlib_adts_as_builtins\".\n\n    When this option is turned on, standard library ADT identifiers are rendered\n    as builtins.  When it is turned off, they are rendered as ordinary library\n    identifiers.\n\n    `treat_stdlib_adts_as_builtins` (default: On)\n\n    The option is useful for dialects that support ADTs as first class objects\n    and provide ADTs in the standard library that would otherwise be built-in.\n\n    At present, only Modula-2 R10 supports library ADTs as first class objects\n    and therefore, no ADT identifiers are defined for any other dialects.\n\n    Example:\n\n    ``$ pygmentize -O full,dialect=m2r10,treat_stdlib_adts_as_builtins=Off ...``\n        Render standard library ADTs as ordinary library types.\n\n    .. versionchanged:: 2.1\n       Added multi-dialect support.\n    ", "Modula-2", "http://www.modula2.org/", "1.3", "modula2", "m2", "*.def", "*.mod", "text/x-modula2", "whitespace", "dialecttags", "identifiers", "prefixed_number_literals", "plain_number_literals", "suffixed_number_literals", "string_literals", "digraph_operators", "unigraph_operators", "digraph_punctuation", "unigraph_punctuation", "comments", "pragmas", "root", "AND", "ARRAY", "BEGIN", "BY", "CASE", "CONST", "DEFINITION", "DIV", "DO", "ELSE", "ELSIF", "END", "EXIT", "FOR", "FROM", "IF", "IMPLEMENTATION", "IMPORT", "IN", "LOOP", "MOD", "MODULE", "NOT", "OF", "OR", "POINTER", "PROCEDURE", "RECORD", "REPEAT", "RETURN", "SET", "THEN", "TO", "TYPE", "UNTIL", "VAR", "WHILE", "ABS", "BOOLEAN", "CARDINAL", "CHAR", "CHR", "FALSE", "INTEGER", "LONGINT", "LONGREAL", "MAX", "MIN", "NIL", "ODD", "ORD", "REAL", "TRUE", "ADDRESS", "BYTE", "WORD", "ADR", "!", "`", "@", "$", "%", "?", "\\", "==", "++", "--", "::", "*.", "+>", "->", "<<", ">>", "|#", "##", "EXPORT", "QUALIFIED", "WITH", "BITSET", "CAP", "DEC", "DISPOSE", "EXCL", "FLOAT", "HALT", "HIGH", "INC", "INCL", "NEW", "NIL", "PROC", "SIZE", "TRUNC", "VAL", "SYSTEM", "PROCESS", "TSIZE", "NEWPROCESS", "TRANSFER", "`", "$", "%", "?", "\\", "==", "++", "--", "::", "*.", "+>", "->", "<<", ">>", "|#", "##", "EXCEPT", "EXPORT", "FINALLY", "FORWARD", "PACKEDSET", "QUALIFIED", "REM", "RETRY", "WITH", "ABSTRACT", "AS", "CLASS", "GUARD", "INHERIT", "OVERRIDE", "READONLY", "REVEAL", "TRACED", "UNSAFEGUARDED", "BITSET", "CAP", "CMPLX", "COMPLEX", "DEC", "DISPOSE", "EXCL", "FLOAT", "HALT", "HIGH", "IM", "INC", "INCL", "INT", "INTERRUPTIBLE", "LENGTH", "LFLOAT", "LONGCOMPLEX", "NEW", "PROC", "PROTECTION", "RE", "SIZE", "TRUNC", "UNINTERRUBTIBLE", "VAL", "CREATE", "DESTROY", "EMPTY", "ISMEMBER", "SELF", "SYSTEM", "BITSPERLOC", "LOCSPERBYTE", "LOCSPERWORD", "LOC", "ADDADR", "SUBADR", "DIFADR", "MAKEADR", "ADR", "ROTATE", "SHIFT", "CAST", "TSIZE", "COROUTINES", "ATTACH", "COROUTINE", "CURRENT", "DETACH", "HANDLER", "INTERRUPTSOURCE", "IOTRANSFER", "IsATTACHED", "LISTEN", "NEWCOROUTINE", "PROT", "TRANSFER", "EXCEPTIONS", "AllocateSource", "CurrentNumber", "ExceptionNumber", "ExceptionSource", "GetMessage", "IsCurrentSource", "IsExceptionalExecution", "RAISE", "TERMINATION", "IsTerminating", "HasHalted", "M2EXCEPTION", "M2Exceptions", "M2Exception", "IsM2Exception", "indexException", "rangeException", "caseSelectException", "invalidLocation", "functionException", "wholeValueException", "wholeDivException", "realValueException", "realDivException", "complexValueException", "complexDivException", "protException", "sysException", "coException", "exException", "!", "`", "@", "$", "%", "&", "<>", "ALIAS", "ARGLIST", "BLUEPRINT", "COPY", "GENLIB", "INDETERMINATE", "NEW", "NONE", "OPAQUE", "REFERENTIAL", "RELEASE", "RETAIN", "ASM", "REG", "CARDINAL", "COUNT", "EMPTY", "EXISTS", "INSERT", "LENGTH", "LONGCARD", "OCTET", "PTR", "PRED", "READ", "READNEW", "REMOVE", "RETRIEVE", "SORT", "STORE", "SUBSET", "SUCC", "TLIMIT", "TMAX", "TMIN", "TRUE", "TSIZE", "UNICHAR", "WRITE", "WRITEF", "TPROPERTIES", "PROPERTY", "LITERAL", "TPROPERTY", "TLITERAL", "TBUILTIN", "TDYN", "TREFC", "TNIL", "TBASE", "TPRECISION", "TMAXEXP", "TMINEXP", "CONVERSION", "TSXFSIZE", "SXF", "VAL", "UNSAFE", "CAST", "INTRINSIC", "AVAIL", "ADD", "SUB", "ADDC", "SUBC", "FETCHADD", "FETCHSUB", "SHL", "SHR", "ASHR", "ROTL", "ROTR", "ROTLC", "ROTRC", "BWNOT", "BWAND", "BWOR", "BWXOR", "BWNAND", "BWNOR", "SETBIT", "TESTBIT", "LSBIT", "MSBIT", "CSBITS", "BAIL", "HALT", "TODO", "FFI", "ADDR", "VARGLIST", "VARGC", "ATOMIC", "INTRINSIC", "AVAIL", "SWAP", "CAS", "INC", "DEC", "BWAND", "BWNAND", "BWOR", "BWXOR", "COMPILER", "DEBUG", "MODNAME", "PROCNAME", "LINENUM", "DEFAULT", "HASH", "ASSEMBLER", "REGISTER", "SETREG", "GETREG", "CODE", "!", "$", "%", "&", "<>", "BYCOPY", "BYREF", "CLASS", "CONTINUE", "CRITICAL", "INOUT", "METHOD", "ON", "OPTIONAL", "OUT", "PRIVATE", "PROTECTED", "PROTOCOL", "PUBLIC", "SUPER", "TRY", "OBJECT", "NO", "YES", "BITSET8", "BITSET16", "BITSET32", "CARDINAL8", "CARDINAL16", "CARDINAL32", "INTEGER8", "INTEGER16", "INTEGER32", "ASM", "__ATTRIBUTE__", "__BUILTIN__", "__COLUMN__", "__DATE__", "__FILE__", "__FUNCTION__", "__LINE__", "__MODULE__", "VOLATILE", "BITSET8", "BITSET16", "BITSET32", "CARDINAL8", "CARDINAL16", "CARDINAL32", "CARDINAL64", "COMPLEX32", "COMPLEX64", "COMPLEX96", "COMPLEX128", "INTEGER8", "INTEGER16", "INTEGER32", "INTEGER64", "REAL8", "REAL16", "REAL32", "REAL96", "REAL128", "THROW", "BCD", "SEQ", "ASH", "ASSERT", "DIFFADR_TYPE", "ENTIER", "INDEX", "LEN", "LONGCARD", "SHORTCARD", "SHORTINT", "PROCESS", "NEWPROCESS", "BOOL8", "BOOL16", "BOOL32", "CARD8", "CARD16", "CARD32", "INT8", "INT16", "INT32", "REF", "MOVE", "FILL", "GET", "PUT", "CC", "int", "unsigned", "size_t", "voidCOMPILER", "OPTION", "EQUATION", "Terminal", "FileSystem", "InOut", "RealInOut", "MathLib0", "Storage", "Flag", "FlagSet", "Response", "Command", "Lock", "Permission", "MediumType", "File", "FileProc", "DirectoryProc", "FileCommand", "DirectoryCommand", "Read", "BusyRead", "ReadAgain", "Write", "WriteString", "WriteLn", "Create", "Lookup", "Close", "Delete", "Rename", "SetRead", "SetWrite", "SetModify", "SetOpen", "Doio", "SetPos", "GetPos", "Length", "Reset", "Again", "ReadWord", "WriteWord", "ReadChar", "WriteChar", "CreateMedium", "DeleteMedium", "AssignName", "DeassignName", "ReadMedium", "LookupMedium", "OpenInput", "OpenOutput", "CloseInput", "CloseOutput", "ReadString", "ReadInt", "ReadCard", "ReadWrd", "WriteInt", "WriteCard", "WriteOct", "WriteHex", "WriteWrd", "ReadReal", "WriteReal", "WriteFixPt", "WriteRealOct", "sqrt", "exp", "ln", "sin", "cos", "arctan", "entier", "ALLOCATE", "DEALLOCATE", "Done", "termCH", "in", "out", "EOL", "BCD", "LONGBCD", "BITSET", "SHORTBITSET", "LONGBITSET", "LONGLONGBITSET", "COMPLEX", "LONGCOMPLEX", "SHORTCARD", "LONGLONGCARD", "SHORTINT", "LONGLONGINT", "POSINT", "SHORTPOSINT", "LONGPOSINT", "LONGLONGPOSINT", "BITSET8", "BITSET16", "BITSET32", "BITSET64", "BITSET128", "BS8", "BS16", "BS32", "BS64", "BS128", "CARDINAL8", "CARDINAL16", "CARDINAL32", "CARDINAL64", "CARDINAL128", "CARD8", "CARD16", "CARD32", "CARD64", "CARD128", "INTEGER8", "INTEGER16", "INTEGER32", "INTEGER64", "INTEGER128", "INT8", "INT16", "INT32", "INT64", "INT128", "STRING", "UNISTRING", "ProtoRoot", "ProtoComputational", "ProtoNumeric", "ProtoScalar", "ProtoNonScalar", "ProtoCardinal", "ProtoInteger", "ProtoReal", "ProtoComplex", "ProtoVector", "ProtoTuple", "ProtoCompArray", "ProtoCollection", "ProtoStaticArray", "ProtoStaticSet", "ProtoStaticString", "ProtoArray", "ProtoString", "ProtoSet", "ProtoMultiSet", "ProtoDictionary", "ProtoMultiDict", "ProtoExtension", "ProtoIO", "ProtoCardMath", "ProtoIntMath", "ProtoRealMath", "ASCII", "BooleanIO", "CharIO", "UnicharIO", "OctetIO", "CardinalIO", "LongCardIO", "IntegerIO", "LongIntIO", "RealIO", "LongRealIO", "BCDIO", "LongBCDIO", "CardMath", "LongCardMath", "IntMath", "LongIntMath", "RealMath", "LongRealMath", "BCDMath", "LongBCDMath", "FileIO", "FileSystem", "Storage", "IOSupport", "File", "Status", "ALLOCATE", "DEALLOCATE", "SIZE", "stdIn", "stdOut", "stdErr", "pi", "tau", "unknown", "m2pim", "m2iso", "m2r10", "objm2", "m2iso+aglet", "m2pim+gm2", "m2iso+p1", "m2iso+xds", "unknown", "m2pim", "m2iso", "m2r10", "objm2", "m2iso+aglet", "m2pim+gm2", "m2iso+p1", "m2iso+xds", "unknown", "m2pim", "m2iso", "m2r10", "objm2", "m2iso+aglet", "m2pim+gm2", "m2iso+p1", "m2iso+xds", "unknown", "m2pim", "m2iso", "m2r10", "objm2", "m2iso+aglet", "m2pim+gm2", "m2iso+p1", "m2iso+xds", "unknown", "m2pim", "m2iso", "m2r10", "objm2", "m2iso+aglet", "m2pim+gm2", "m2iso+p1", "m2iso+xds", "unknown", "m2pim", "m2iso", "m2r10", "objm2", "m2iso+aglet", "m2pim+gm2", "m2iso+p1", "m2iso+xds", "unknown", "m2pim", "m2iso", "m2r10", "objm2", "m2iso+aglet", "m2pim+gm2", "m2iso+p1", "m2iso+xds", "unknown", "m2pim", "m2iso", "m2r10", "objm2", "m2iso+aglet", "m2pim+gm2", "m2iso+p1", "m2iso+xds", "unknown", "m2pim", "m2iso", "m2r10", "objm2", "m2iso+aglet", "m2pim+gm2", "m2iso+p1", "m2iso+xds", "unknown", "m2pim", "m2iso", "m2r10", "objm2", "m2iso+aglet", "m2pim+gm2", "m2iso+p1", "m2iso+xds", "unknown", "m2pim", "m2iso", "m2r10", "objm2", "m2iso+aglet", "m2pim+gm2", "m2iso+p1", "m2iso+xds", "(*!", "*)", "It's Pascal-like, but does not use FUNCTION -- uses PROCEDURE\n        instead.", "dialect", "treat_stdlib_adts_as_builtins", "unknown", "\\bPROCEDURE\\b", "\\bFUNCTION\\b", "\\n+", "\\s+", "\\(\\*!m2pim\\*\\)", "\\(\\*!m2iso\\*\\)", "\\(\\*!m2r10\\*\\)", "\\(\\*!objm2\\*\\)", "\\(\\*!m2iso\\+aglet\\*\\)", "\\(\\*!m2pim\\+gm2\\*\\)", "\\(\\*!m2iso\\+p1\\*\\)", "\\(\\*!m2iso\\+xds\\*\\)", "([a-zA-Z_$][\\w$]*)", "0b[01]+(\\'[01]+)*", "0[ux][0-9A-F]+(\\'[0-9A-F]+)*", "[0-9]+(\\'[0-9]+)*\\.[0-9]+(\\'[0-9]+)*[eE][+-]?[0-9]+(\\'[0-9]+)*", "[0-9]+(\\'[0-9]+)*\\.[0-9]+(\\'[0-9]+)*", "[0-9]+(\\'[0-9]+)*", "[0-7]+B", "[0-7]+C", "[0-9A-F]+H", "\"(\\\\\\\\|\\\\[^\\\\]|[^\"\\\\])*\"", "'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\])*'", "\\*\\.", "\\+>", "<>", "<=", ">=", "==", "::", ":=", "\\+\\+", "--", "[+-]", "[*/]", "\\\\", "[=#<>]", "\\^", "@", "&", "~", "`", "\\.\\.", "<<", ">>", "->", "\\|#", "##", "\\|\\*", "[()\\[\\]{},.:;|]", "!", "\\?", "^//.*?\\n", "\\(\\*([^$].*?)\\*\\)", "/\\*(.*?)\\*/", "<\\*.*?\\*>", "\\(\\*\\$.*?\\*\\)", "whitespace", "dialecttags", "pragmas", "comments", "identifiers", "suffixed_number_literals", "prefixed_number_literals", "plain_number_literals", "string_literals", "digraph_punctuation", "digraph_operators", "unigraph_punctuation", "unigraph_operators", "unknown", "style", "unknown", "unknown", ":=", "algol", "algol_nu", "unknown", "*)", "(*", "#", "\u2260", "<=", "\u2264", ">=", "\u2265", "==", "\u2261", "*.", "\u2022", "unknown", "m2r10", "objm2", "'", "0b", "0x", "0u", "m2r10", "objm2", "H", "E", "unknown", "m2r10", "objm2", "<*", "m2pim", "unknown", "m2pim", "(*$"]}