{"imports": ["math", "constant_op", "dtypes", "backend", "array_ops", "gen_linalg_ops", "linalg_ops", "math_ops", "random_ops", "stateless_random_ops"], "function_calls": ["classmethod", "as_dtype", "as_dtype", "pop", "_validate_kwargs", "_get_dtype", "zeros", "_validate_kwargs", "_get_dtype", "ones", "constant", "_RandomGenerator", "_validate_kwargs", "_get_dtype", "random_uniform", "_RandomGenerator", "_validate_kwargs", "_assert_float_dtype", "random_normal", "_RandomGenerator", "_validate_kwargs", "_assert_float_dtype", "truncated_normal", "lower", "_RandomGenerator", "_validate_kwargs", "_assert_float_dtype", "_compute_fans", "sqrt", "random_uniform", "_RandomGenerator", "_validate_kwargs", "_assert_float_dtype", "random_normal", "qr", "tensor_diag_part", "sign", "_validate_kwargs", "_assert_float_dtype", "__init__", "__init__", "__init__", "__init__", "__init__", "__init__", "floatx", "ValueError", "__init__", "op", "op", "op", "len", "int", "int", "ValueError", "ValueError", "_get_dtype", "ValueError", "_get_dtype", "_get_dtype", "ValueError", "frozenset", "ValueError", "frozenset", "ValueError", "_get_dtype", "max", "truncated_normal", "sqrt", "random_normal", "_get_dtype", "len", "ValueError", "max", "min", "matrix_transpose", "reshape", "_get_dtype", "len", "ValueError", "len", "TypeError", "ValueError", "max", "max", "sqrt", "super", "super", "super", "super", "super", "super", "super", "len"], "strings": ["Keras initializers for TF 2.", "partition_shape", "partition_offset", "Initializer base class: all Keras initializers inherit from this class.\n\n  Initializers should implement a `__call__` method with the following\n  signature:\n\n  ```python\n  def __call__(self, shape, dtype=None, **kwargs):\n    # returns a tensor of shape `shape` and dtype `dtype`\n    # containing values drawn from a distribution of your choice.\n  ```\n\n  Optionally, you an also implement the method `get_config` and the class\n  method `from_config` in order to support serialization -- just like with\n  any Keras object.\n\n  Here's a simple example: a random normal initializer.\n\n  ```python\n  import tensorflow as tf\n\n  class ExampleRandomNormal(tf.keras.initializers.Initializer):\n\n    def __init__(self, mean, stddev):\n      self.mean = mean\n      self.stddev = stddev\n\n    def __call__(self, shape, dtype=None, **kwargs):\n      return tf.random.normal(\n          shape, mean=self.mean, stddev=self.stddev, dtype=dtype)\n\n    def get_config(self):  # To support serialization\n      return {\"mean\": self.mean, \"stddev\": self.stddev}\n  ```\n\n  Note that we don't have to implement `from_config` in the example above since\n  the constructor arguments of the class the keys in the config returned by\n  `get_config` are the same. In this case, the default `from_config`\n  works fine.\n  ", "Initializer that generates tensors initialized to 0.\n\n  Also available via the shortcut function `tf.keras.initializers.zeros`.\n\n  Examples:\n\n  >>> # Standalone usage:\n  >>> initializer = tf.keras.initializers.Zeros()\n  >>> values = initializer(shape=(2, 2))\n\n  >>> # Usage in a Keras layer:\n  >>> initializer = tf.keras.initializers.Zeros()\n  >>> layer = tf.keras.layers.Dense(3, kernel_initializer=initializer)\n  ", "Initializer that generates tensors initialized to 1.\n\n  Also available via the shortcut function `tf.keras.initializers.ones`.\n\n  Examples:\n\n  >>> # Standalone usage:\n  >>> initializer = tf.keras.initializers.Ones()\n  >>> values = initializer(shape=(2, 2))\n\n  >>> # Usage in a Keras layer:\n  >>> initializer = tf.keras.initializers.Ones()\n  >>> layer = tf.keras.layers.Dense(3, kernel_initializer=initializer)\n  ", "Initializer that generates tensors with constant values.\n\n  Also available via the shortcut function `tf.keras.initializers.constant`.\n\n  Only scalar values are allowed.\n  The constant value provided must be convertible to the dtype requested\n  when calling the initializer.\n\n  Examples:\n\n  >>> # Standalone usage:\n  >>> initializer = tf.keras.initializers.Constant(3.)\n  >>> values = initializer(shape=(2, 2))\n\n  >>> # Usage in a Keras layer:\n  >>> initializer = tf.keras.initializers.Constant(3.)\n  >>> layer = tf.keras.layers.Dense(3, kernel_initializer=initializer)\n\n  Args:\n    value: A Python scalar.\n  ", "Initializer that generates tensors with a uniform distribution.\n\n  Also available via the shortcut function\n  `tf.keras.initializers.random_uniform`.\n\n  Examples:\n\n  >>> # Standalone usage:\n  >>> initializer = tf.keras.initializers.RandomUniform(minval=0., maxval=1.)\n  >>> values = initializer(shape=(2, 2))\n\n  >>> # Usage in a Keras layer:\n  >>> initializer = tf.keras.initializers.RandomUniform(minval=0., maxval=1.)\n  >>> layer = tf.keras.layers.Dense(3, kernel_initializer=initializer)\n\n  Args:\n    minval: A python scalar or a scalar tensor. Lower bound of the range of\n      random values to generate (inclusive).\n    maxval: A python scalar or a scalar tensor. Upper bound of the range of\n      random values to generate (exclusive).\n    seed: A Python integer. An initializer created with a given seed will\n      always produce the same random tensor for a given shape and dtype.\n  ", "Initializer that generates tensors with a normal distribution.\n\n  Also available via the shortcut function\n  `tf.keras.initializers.random_normal`.\n\n  Examples:\n\n  >>> # Standalone usage:\n  >>> initializer = tf.keras.initializers.RandomNormal(mean=0., stddev=1.)\n  >>> values = initializer(shape=(2, 2))\n\n  >>> # Usage in a Keras layer:\n  >>> initializer = tf.keras.initializers.RandomNormal(mean=0., stddev=1.)\n  >>> layer = tf.keras.layers.Dense(3, kernel_initializer=initializer)\n\n  Args:\n    mean: a python scalar or a scalar tensor. Mean of the random values to\n      generate.\n    stddev: a python scalar or a scalar tensor. Standard deviation of the random\n      values to generate.\n    seed: A Python integer. An initializer created with a given seed will\n      always produce the same random tensor for a given shape and dtype.\n  ", "Initializer that generates a truncated normal distribution.\n\n  Also available via the shortcut function\n  `tf.keras.initializers.truncated_normal`.\n\n  The values generated are similar to values from a\n  `tf.keras.initializers.RandomNormal` initializer except that values more\n  than two standard deviations from the mean are\n  discarded and re-drawn.\n\n  Examples:\n\n  >>> # Standalone usage:\n  >>> initializer = tf.keras.initializers.TruncatedNormal(mean=0., stddev=1.)\n  >>> values = initializer(shape=(2, 2))\n\n  >>> # Usage in a Keras layer:\n  >>> initializer = tf.keras.initializers.TruncatedNormal(mean=0., stddev=1.)\n  >>> layer = tf.keras.layers.Dense(3, kernel_initializer=initializer)\n\n  Args:\n    mean: a python scalar or a scalar tensor. Mean of the random values\n      to generate.\n    stddev: a python scalar or a scalar tensor. Standard deviation of the\n      random values to generate before truncation.\n    seed: A Python integer. An initializer created with a given seed will\n      always produce the same random tensor for a given shape and dtype.\n  ", "Initializer capable of adapting its scale to the shape of weights tensors.\n\n  Also available via the shortcut function\n  `tf.keras.initializers.variance_scaling`.\n\n  With `distribution=\"truncated_normal\" or \"untruncated_normal\"`, samples are\n  drawn from a truncated/untruncated normal distribution with a mean of zero and\n  a standard deviation (after truncation, if used) `stddev = sqrt(scale / n)`,\n  where `n` is:\n\n  - number of input units in the weight tensor, if `mode=\"fan_in\"`\n  - number of output units, if `mode=\"fan_out\"`\n  - average of the numbers of input and output units, if `mode=\"fan_avg\"`\n\n  With `distribution=\"uniform\"`, samples are drawn from a uniform distribution\n  within `[-limit, limit]`, where `limit = sqrt(3 * scale / n)`.\n\n  Examples:\n\n  >>> # Standalone usage:\n  >>> initializer = tf.keras.initializers.VarianceScaling(\n  ... scale=0.1, mode='fan_in', distribution='uniform')\n  >>> values = initializer(shape=(2, 2))\n\n  >>> # Usage in a Keras layer:\n  >>> initializer = tf.keras.initializers.VarianceScaling(\n  ... scale=0.1, mode='fan_in', distribution='uniform')\n  >>> layer = tf.keras.layers.Dense(3, kernel_initializer=initializer)\n\n  Args:\n    scale: Scaling factor (positive float).\n    mode: One of \"fan_in\", \"fan_out\", \"fan_avg\".\n    distribution: Random distribution to use. One of \"truncated_normal\",\n      \"untruncated_normal\" and  \"uniform\".\n    seed: A Python integer. An initializer created with a given seed will\n      always produce the same random tensor for a given shape and dtype.\n  ", "Initializer that generates an orthogonal matrix.\n\n  Also available via the shortcut function `tf.keras.initializers.orthogonal`.\n\n  If the shape of the tensor to initialize is two-dimensional, it is initialized\n  with an orthogonal matrix obtained from the QR decomposition of a matrix of\n  random numbers drawn from a normal distribution.\n  If the matrix has fewer rows than columns then the output will have orthogonal\n  rows. Otherwise, the output will have orthogonal columns.\n\n  If the shape of the tensor to initialize is more than two-dimensional,\n  a matrix of shape `(shape[0] * ... * shape[n - 2], shape[n - 1])`\n  is initialized, where `n` is the length of the shape vector.\n  The matrix is subsequently reshaped to give a tensor of the desired shape.\n\n  Examples:\n\n  >>> # Standalone usage:\n  >>> initializer = tf.keras.initializers.Orthogonal()\n  >>> values = initializer(shape=(2, 2))\n\n  >>> # Usage in a Keras layer:\n  >>> initializer = tf.keras.initializers.Orthogonal()\n  >>> layer = tf.keras.layers.Dense(3, kernel_initializer=initializer)\n\n  Args:\n    gain: multiplicative factor to apply to the orthogonal matrix\n    seed: A Python integer. An initializer created with a given seed will\n      always produce the same random tensor for a given shape and dtype.\n\n  References:\n      [Saxe et al., 2014](https://openreview.net/forum?id=_wzZwKpTDF_9C)\n      ([pdf](https://arxiv.org/pdf/1312.6120.pdf))\n  ", "Initializer that generates the identity matrix.\n\n  Also available via the shortcut function `tf.keras.initializers.identity`.\n\n  Only usable for generating 2D matrices.\n\n  Examples:\n\n  >>> # Standalone usage:\n  >>> initializer = tf.keras.initializers.Identity()\n  >>> values = initializer(shape=(2, 2))\n\n  >>> # Usage in a Keras layer:\n  >>> initializer = tf.keras.initializers.Identity()\n  >>> layer = tf.keras.layers.Dense(3, kernel_initializer=initializer)\n\n  Args:\n    gain: Multiplicative factor to apply to the identity matrix.\n  ", "The Glorot uniform initializer, also called Xavier uniform initializer.\n\n  Also available via the shortcut function\n  `tf.keras.initializers.glorot_uniform`.\n\n  Draws samples from a uniform distribution within `[-limit, limit]`, where\n  `limit = sqrt(6 / (fan_in + fan_out))` (`fan_in` is the number of input units\n  in the weight tensor and `fan_out` is the number of output units).\n\n  Examples:\n\n  >>> # Standalone usage:\n  >>> initializer = tf.keras.initializers.GlorotUniform()\n  >>> values = initializer(shape=(2, 2))\n\n  >>> # Usage in a Keras layer:\n  >>> initializer = tf.keras.initializers.GlorotUniform()\n  >>> layer = tf.keras.layers.Dense(3, kernel_initializer=initializer)\n\n  Args:\n    seed: A Python integer. An initializer created with a given seed will\n      always produce the same random tensor for a given shape and dtype.\n\n  References:\n      [Glorot et al., 2010](http://proceedings.mlr.press/v9/glorot10a.html)\n      ([pdf](http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf))\n  ", "The Glorot normal initializer, also called Xavier normal initializer.\n\n  Also available via the shortcut function\n  `tf.keras.initializers.glorot_normal`.\n\n  Draws samples from a truncated normal distribution centered on 0 with `stddev\n  = sqrt(2 / (fan_in + fan_out))` where `fan_in` is the number of input units in\n  the weight tensor and `fan_out` is the number of output units in the weight\n  tensor.\n\n  Examples:\n\n  >>> # Standalone usage:\n  >>> initializer = tf.keras.initializers.GlorotNormal()\n  >>> values = initializer(shape=(2, 2))\n\n  >>> # Usage in a Keras layer:\n  >>> initializer = tf.keras.initializers.GlorotNormal()\n  >>> layer = tf.keras.layers.Dense(3, kernel_initializer=initializer)\n\n  Args:\n    seed: A Python integer. An initializer created with a given seed will\n      always produce the same random tensor for a given shape and dtype.\n\n  References:\n      [Glorot et al., 2010](http://proceedings.mlr.press/v9/glorot10a.html)\n      ([pdf](http://jmlr.org/proceedings/papers/v9/glorot10a/glorot10a.pdf))\n  ", "Lecun normal initializer.\n\n   Also available via the shortcut function\n  `tf.keras.initializers.lecun_normal`.\n\n  Initializers allow you to pre-specify an initialization strategy, encoded in\n  the Initializer object, without knowing the shape and dtype of the variable\n  being initialized.\n\n  Draws samples from a truncated normal distribution centered on 0 with `stddev\n  = sqrt(1 / fan_in)` where `fan_in` is the number of input units in the weight\n  tensor.\n\n  Examples:\n\n  >>> # Standalone usage:\n  >>> initializer = tf.keras.initializers.LecunNormal()\n  >>> values = initializer(shape=(2, 2))\n\n  >>> # Usage in a Keras layer:\n  >>> initializer = tf.keras.initializers.LecunNormal()\n  >>> layer = tf.keras.layers.Dense(3, kernel_initializer=initializer)\n\n  Args:\n    seed: A Python integer. Used to seed the random generator.\n\n  References:\n      - Self-Normalizing Neural Networks,\n      [Klambauer et al., 2017]\n      (https://papers.nips.cc/paper/6698-self-normalizing-neural-networks)\n      ([pdf]\n      (https://papers.nips.cc/paper/6698-self-normalizing-neural-networks.pdf))\n      - Efficient Backprop,\n      [Lecun et al., 1998](http://yann.lecun.com/exdb/publis/pdf/lecun-98b.pdf)\n  ", "Lecun uniform initializer.\n\n   Also available via the shortcut function\n  `tf.keras.initializers.lecun_uniform`.\n\n  Draws samples from a uniform distribution within `[-limit, limit]`,\n  where `limit = sqrt(3 / fan_in)` (`fan_in` is the number of input units in the\n  weight tensor).\n\n  Examples:\n\n  >>> # Standalone usage:\n  >>> initializer = tf.keras.initializers.LecunUniform()\n  >>> values = initializer(shape=(2, 2))\n\n  >>> # Usage in a Keras layer:\n  >>> initializer = tf.keras.initializers.LecunUniform()\n  >>> layer = tf.keras.layers.Dense(3, kernel_initializer=initializer)\n\n  Args:\n    seed: A Python integer. An initializer created with a given seed will\n      always produce the same random tensor for a given shape and dtype.\n\n  References:\n      - Self-Normalizing Neural Networks,\n      [Klambauer et al., 2017](https://papers.nips.cc/paper/6698-self-normalizing-neural-networks) # pylint: disable=line-too-long\n      ([pdf](https://papers.nips.cc/paper/6698-self-normalizing-neural-networks.pdf))\n      - Efficient Backprop,\n      [Lecun et al., 1998](http://yann.lecun.com/exdb/publis/pdf/lecun-98b.pdf)\n  ", "He normal initializer.\n\n   Also available via the shortcut function\n  `tf.keras.initializers.he_normal`.\n\n  It draws samples from a truncated normal distribution centered on 0 with\n  `stddev = sqrt(2 / fan_in)` where `fan_in` is the number of input units in the\n  weight tensor.\n\n  Examples:\n\n  >>> # Standalone usage:\n  >>> initializer = tf.keras.initializers.HeNormal()\n  >>> values = initializer(shape=(2, 2))\n\n  >>> # Usage in a Keras layer:\n  >>> initializer = tf.keras.initializers.HeNormal()\n  >>> layer = tf.keras.layers.Dense(3, kernel_initializer=initializer)\n\n  Args:\n    seed: A Python integer. An initializer created with a given seed will\n      always produce the same random tensor for a given shape and dtype.\n\n  References:\n      [He et al., 2015](https://www.cv-foundation.org/openaccess/content_iccv_2015/html/He_Delving_Deep_into_ICCV_2015_paper.html) # pylint: disable=line-too-long\n      ([pdf](https://www.cv-foundation.org/openaccess/content_iccv_2015/papers/He_Delving_Deep_into_ICCV_2015_paper.pdf))\n  ", "He uniform variance scaling initializer.\n\n   Also available via the shortcut function\n  `tf.keras.initializers.he_uniform`.\n\n  Draws samples from a uniform distribution within `[-limit, limit]`, where\n  `limit = sqrt(6 / fan_in)` (`fan_in` is the number of input units in the\n  weight tensor).\n\n  Examples:\n\n  >>> # Standalone usage:\n  >>> initializer = tf.keras.initializers.HeUniform()\n  >>> values = initializer(shape=(2, 2))\n\n  >>> # Usage in a Keras layer:\n  >>> initializer = tf.keras.initializers.HeUniform()\n  >>> layer = tf.keras.layers.Dense(3, kernel_initializer=initializer)\n\n  Args:\n    seed: A Python integer. An initializer created with a given seed will\n      always produce the same random tensor for a given shape and dtype.\n\n  References:\n      [He et al., 2015](https://www.cv-foundation.org/openaccess/content_iccv_2015/html/He_Delving_Deep_into_ICCV_2015_paper.html) # pylint: disable=line-too-long\n      ([pdf](https://www.cv-foundation.org/openaccess/content_iccv_2015/papers/He_Delving_Deep_into_ICCV_2015_paper.pdf))\n  ", "Validate and return floating point type based on `dtype`.\n\n  `dtype` must be a floating point type.\n\n  Args:\n    dtype: The data type to validate.\n\n  Returns:\n    Validated type.\n\n  Raises:\n    ValueError: if `dtype` is not a floating point type.\n  ", "Random generator that selects appropriate random ops.", "Computes the number of input and output units for a weight shape.\n\n  Args:\n    shape: Integer shape tuple or TF tensor shape.\n\n  Returns:\n    A tuple of integer scalars (fan_in, fan_out).\n  ", "Returns a tensor object initialized as specified by the initializer.\n\n    Args:\n      shape: Shape of the tensor.\n      dtype: Optional dtype of the tensor.\n      **kwargs: Additional keyword arguments.\n    ", "Returns the configuration of the initializer as a JSON-serializable dict.\n\n    Returns:\n      A JSON-serializable Python dict.\n    ", "Instantiates an initializer from a configuration dictionary.\n\n    Example:\n\n    ```python\n    initializer = RandomUniform(-1, 1)\n    config = initializer.get_config()\n    initializer = RandomUniform.from_config(config)\n    ```\n\n    Args:\n      config: A Python dictionary, the output of `get_config`.\n\n    Returns:\n      A `tf.keras.initializers.Initializer` instance.\n    ", "Returns a tensor object initialized as specified by the initializer.\n\n    Args:\n      shape: Shape of the tensor.\n      dtype: Optional dtype of the tensor. Only numeric or boolean dtypes are\n       supported. If not specified, `tf.keras.backend.floatx()` is used,\n       which default to `float32` unless you configured it otherwise\n       (via `tf.keras.backend.set_floatx(float_dtype)`).\n      **kwargs: Additional keyword arguments.\n    ", "Returns a tensor object initialized as specified by the initializer.\n\n    Args:\n      shape: Shape of the tensor.\n      dtype: Optional dtype of the tensor. Only numeric or boolean dtypes are\n       supported. If not specified, `tf.keras.backend.floatx()` is used,\n       which default to `float32` unless you configured it otherwise\n       (via `tf.keras.backend.set_floatx(float_dtype)`).\n      **kwargs: Additional keyword arguments.\n    ", "Returns a tensor object initialized to `self.value`.\n\n    Args:\n      shape: Shape of the tensor.\n      dtype: Optional dtype of the tensor. If not specified,\n       `tf.keras.backend.floatx()` is used,\n       which default to `float32` unless you configured it otherwise\n       (via `tf.keras.backend.set_floatx(float_dtype)`).\n      **kwargs: Additional keyword arguments.\n    ", "Returns a tensor object initialized as specified by the initializer.\n\n    Args:\n      shape: Shape of the tensor.\n      dtype: Optional dtype of the tensor. Only floating point and integer\n      types are supported. If not specified,\n        `tf.keras.backend.floatx()` is used,\n       which default to `float32` unless you configured it otherwise\n       (via `tf.keras.backend.set_floatx(float_dtype)`).\n      **kwargs: Additional keyword arguments.\n    ", "Returns a tensor object initialized to random normal values.\n\n    Args:\n      shape: Shape of the tensor.\n      dtype: Optional dtype of the tensor. Only floating point types are\n        supported. If not specified, `tf.keras.backend.floatx()` is used, which\n        default to `float32` unless you configured it otherwise (via\n        `tf.keras.backend.set_floatx(float_dtype)`)\n      **kwargs: Additional keyword arguments.\n    ", "Returns a tensor object initialized to random normal values (truncated).\n\n    Args:\n      shape: Shape of the tensor.\n      dtype: Optional dtype of the tensor. Only floating point types are\n        supported. If not specified, `tf.keras.backend.floatx()` is used, which\n        default to `float32` unless you configured it otherwise (via\n        `tf.keras.backend.set_floatx(float_dtype)`)\n      **kwargs: Additional keyword arguments.\n    ", "Returns a tensor object initialized as specified by the initializer.\n\n    Args:\n      shape: Shape of the tensor.\n      dtype: Optional dtype of the tensor. Only floating point types are\n        supported. If not specified, `tf.keras.backend.floatx()` is used, which\n        default to `float32` unless you configured it otherwise (via\n        `tf.keras.backend.set_floatx(float_dtype)`)\n      **kwargs: Additional keyword arguments.\n    ", "Returns a tensor object initialized to an orthogonal matrix.\n\n    Args:\n      shape: Shape of the tensor.\n      dtype: Optional dtype of the tensor. Only floating point types are\n        supported. If not specified, `tf.keras.backend.floatx()` is used,\n       which default to `float32` unless you configured it otherwise\n       (via `tf.keras.backend.set_floatx(float_dtype)`)\n      **kwargs: Additional keyword arguments.\n    ", "Returns a tensor object initialized to a 2D identity matrix.\n\n    Args:\n      shape: Shape of the tensor. It should have exactly rank 2.\n      dtype: Optional dtype of the tensor. Only floating point types are\n       supported. If not specified, `tf.keras.backend.floatx()` is used,\n       which default to `float32` unless you configured it otherwise\n       (via `tf.keras.backend.set_floatx(float_dtype)`)\n      **kwargs: Additional keyword arguments.\n    ", "A deterministic random normal if seed is passed.", "A deterministic random uniform if seed is passed.", "A deterministic truncated normal if seed is passed.", "dtype", "value", "minval", "maxval", "seed", "mean", "stddev", "seed", "mean", "stddev", "seed", "fan_in", "truncated_normal", "normal", "truncated_normal", "fan_in", "truncated_normal", "untruncated_normal", "scale", "mode", "distribution", "seed", "gain", "seed", "gain", "fan_avg", "uniform", "seed", "fan_avg", "truncated_normal", "seed", "fan_in", "truncated_normal", "seed", "fan_in", "uniform", "seed", "fan_in", "truncated_normal", "seed", "fan_in", "uniform", "seed", "`scale` must be positive float.", "Invalid `mode` argument:", "Invalid `distribution` argument:", "fan_out", "The tensor to initialize must be at least two-dimensional", "Identity matrix initializer can only be used for 2D matrices.", "Expected floating point type, got %s.", "Expected numeric or boolean dtype, got %s.", "Expected numeric or boolean dtype, got %s.", "dtype", "shape", "Expected float or integer dtype, got %s.", "fan_in", "fan_avg", "fan_out", "uniform", "truncated_normal", "untruncated_normal", "support_partition", "dtype", "full_matrices", "support_partition", "scale", "mode", "distribution", "seed", "scale", "mode", "distribution", "seed", "scale", "mode", "distribution", "seed", "scale", "mode", "distribution", "seed", "scale", "mode", "distribution", "seed", "scale", "mode", "distribution", "seed", "shape", "mean", "stddev", "dtype", "seed", "shape", "minval", "maxval", "dtype", "seed", "shape", "mean", "stddev", "dtype", "seed", "Unknown keyword arguments: %s", "%s initializer doesn't support partition-related arguments"]}