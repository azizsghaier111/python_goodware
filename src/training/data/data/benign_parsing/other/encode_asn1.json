{"imports": ["calendar", "ipaddress", "utils", "x509", "_CRL_ENTRY_REASON_ENUM_TO_CODE", "_DISTPOINT_TYPE_FULLNAME", "_DISTPOINT_TYPE_RELATIVENAME", "_ASN1Type", "CRLEntryExtensionOID", "ExtensionOID", "OCSPExtensionOID"], "function_calls": ["_int_to_bn", "gc", "BN_to_ASN1_INTEGER", "openssl_assert", "_encode_asn1_int", "gc", "ASN1_OCTET_STRING_new", "ASN1_OCTET_STRING_set", "openssl_assert", "ASN1_UTF8STRING_new", "ASN1_STRING_set", "openssl_assert", "_encode_asn1_str", "gc", "_encode_asn1_int_gc", "X509_NAME_new", "_encode_name", "gc", "sk_X509_NAME_ENTRY_new_null", "_txt2obj_gc", "X509_NAME_ENTRY_create_by_OBJ", "_encode_asn1_int_gc", "ISSUING_DIST_POINT_new", "openssl_assert", "gc", "ASN1_ENUMERATED_new", "openssl_assert", "gc", "ASN1_ENUMERATED_set", "openssl_assert", "ASN1_GENERALIZEDTIME_set", "openssl_assert", "gc", "sk_POLICYINFO_new_null", "openssl_assert", "gc", "NOTICEREF_new", "openssl_assert", "_encode_asn1_utf8_str", "sk_ASN1_INTEGER_new_null", "encode", "OBJ_txt2obj", "openssl_assert", "_txt2obj", "gc", "ASN1_NULL_new", "ASN1_BIT_STRING_new", "gc", "set_bit", "openssl_assert", "set_bit", "openssl_assert", "set_bit", "openssl_assert", "set_bit", "openssl_assert", "set_bit", "openssl_assert", "set_bit", "openssl_assert", "set_bit", "openssl_assert", "openssl_assert", "set_bit", "openssl_assert", "AUTHORITY_KEYID_new", "openssl_assert", "gc", "BASIC_CONSTRAINTS_new", "gc", "sk_ACCESS_DESCRIPTION_new_null", "openssl_assert", "GENERAL_NAMES_new", "openssl_assert", "_encode_general_names", "gc", "_encode_asn1_str_gc", "GENERAL_NAME_new", "_encode_general_name_preallocated", "isinstance", "sk_ASN1_OBJECT_new_null", "gc", "ASN1_BIT_STRING_new", "openssl_assert", "DIST_POINT_NAME_new", "openssl_assert", "_encode_general_names", "DIST_POINT_NAME_new", "openssl_assert", "_encode_sk_name_entry", "sk_DIST_POINT_new_null", "gc", "NAME_CONSTRAINTS_new", "openssl_assert", "gc", "_encode_general_subtree", "_encode_general_subtree", "POLICY_CONSTRAINTS_new", "openssl_assert", "gc", "sk_GENERAL_SUBTREE_new_null", "sk_SCT_new_null", "openssl_assert", "gc", "_encode_asn1_str_gc", "len", "encode", "len", "_encode_name_entry", "sk_X509_NAME_ENTRY_push", "openssl_assert", "encode", "len", "_encode_reasonflags", "_encode_full_name", "_encode_relative_name", "timegm", "_encode_asn1_int", "sk_ASN1_INTEGER_push", "openssl_assert", "set_bit", "openssl_assert", "set_bit", "openssl_assert", "_encode_asn1_str", "_encode_general_names", "_encode_asn1_int", "_encode_asn1_int", "ACCESS_DESCRIPTION_new", "_txt2obj", "_encode_general_name_preallocated", "sk_ACCESS_DESCRIPTION_push", "openssl_assert", "_encode_general_name", "sk_GENERAL_NAME_push", "openssl_assert", "openssl_assert", "ASN1_IA5STRING_new", "openssl_assert", "encode", "ASN1_STRING_set", "openssl_assert", "openssl_assert", "OBJ_txt2obj", "openssl_assert", "openssl_assert", "_encode_name", "openssl_assert", "isinstance", "_encode_asn1_str", "openssl_assert", "OTHERNAME_new", "openssl_assert", "OBJ_txt2obj", "openssl_assert", "new", "new", "d2i_ASN1_TYPE", "openssl_assert", "encode", "_encode_asn1_str", "openssl_assert", "encode", "_encode_asn1_str", "format", "_txt2obj", "sk_ASN1_OBJECT_push", "openssl_assert", "ASN1_BIT_STRING_set_bit", "openssl_assert", "DIST_POINT_new", "openssl_assert", "sk_DIST_POINT_push", "openssl_assert", "_encode_asn1_int", "_encode_asn1_int", "GENERAL_SUBTREE_new", "_encode_general_name", "sk_GENERAL_SUBTREE_push", "openssl_assert", "sk_SCT_push", "openssl_assert", "encode", "_encode_name_entry", "gc", "X509_NAME_add_entry", "openssl_assert", "encode", "encode", "timetuple", "sk_ACCESS_DESCRIPTION_pop_free", "len", "encode", "isinstance", "encode", "len", "_consume_errors", "ValueError", "_encode_reasonflags", "_encode_full_name", "_encode_relative_name", "_encode_general_names", "addressof", "int_to_bytes", "int_to_bytes"], "strings": ["\n    Converts a python integer to an ASN1_INTEGER. The returned ASN1_INTEGER\n    will not be garbage collected (to support adding them to structs that take\n    ownership of the object). Be sure to register it for GC if it will be\n    discarded after use.\n\n    ", "\n    Create an ASN1_OCTET_STRING from a Python byte string.\n    ", "\n    Create an ASN1_UTF8STRING from a Python unicode string.\n    This object will be an ASN1_STRING with UTF8 type in OpenSSL and\n    can be decoded with ASN1_STRING_to_UTF8.\n    ", "\n    The X509_NAME created will not be gc'd. Use _encode_name_gc if needed.\n    ", "\n    The sk_X509_NAME_ENTRY created will not be gc'd.\n    ", "\n    Converts a Python string with an ASN.1 object ID in dotted form to a\n    ASN1_OBJECT.\n    ", "ascii", "utf8", "utf_16_be", "utf8", "unsigned char[]", "unsigned char **", "utf8", "utf8", "utf8", "utf_32_be", "utf8", "ascii", "ascii", "Invalid ASN.1 data", "{} is an unknown GeneralName type", "ACCESS_DESCRIPTION_free"]}