{"imports": ["Generator", "Optional", "Text", "dtypes", "math_ops", "variable_scope", "tf_contextlib", "tf_export"], "function_calls": [], "strings": ["Helper context for running models with bfloat16.", "Returns a custom getter that this class's methods must be called under.\n\n  All methods of this class must be called under a variable scope that was\n  passed this custom getter. Example:\n\n  ```python\n  network = ConvNetBuilder(...)\n  with tf.compat.v1.variable_scope('cg',\n                                   custom_getter=network.get_custom_getter()):\n    network.conv(...)\n    # Call more methods of network here\n  ```\n\n  Currently, this custom getter only does anything if self.use_tf_layers is\n  True. In that case, it causes variables to be stored as dtype\n  self.variable_type, then casted to the requested dtype, instead of directly\n  storing the variable as the requested dtype.\n  ", "Scope class for bfloat16 variables so that the model uses custom getter.\n\n  This enables variables to be read as bfloat16 type when using get_variable.\n\n  Arguments:\n    name: Name to use for scope.\n\n  Yields:\n    a variable scope.\n  ", "Custom getter that forces variables to have type self.variable_type.", "", "dtype", "dtype"]}