{"imports": ["List", "numpy", "ProcessorMixin", "BatchEncoding", "is_flax_available", "is_tf_available", "is_torch_available"], "function_calls": ["__init__", "ValueError", "super"], "strings": ["\nImage/Text processor class for OWLv2\n", "\n    Constructs an Owlv2 processor which wraps [`Owlv2ImageProcessor`] and [`CLIPTokenizer`]/[`CLIPTokenizerFast`] into\n    a single processor that interits both the image processor and tokenizer functionalities. See the\n    [`~OwlViTProcessor.__call__`] and [`~OwlViTProcessor.decode`] for more information.\n\n    Args:\n        image_processor ([`Owlv2ImageProcessor`]):\n            The image processor is a required input.\n        tokenizer ([`CLIPTokenizer`, `CLIPTokenizerFast`]):\n            The tokenizer is a required input.\n    ", "Owlv2ImageProcessor", "image_processor", "tokenizer", "CLIPTokenizer", "CLIPTokenizerFast", "\n        Main method to prepare for the model one or several text(s) and image(s). This method forwards the `text` and\n        `kwargs` arguments to CLIPTokenizerFast's [`~CLIPTokenizerFast.__call__`] if `text` is not `None` to encode:\n        the text. To prepare the image(s), this method forwards the `images` and `kwrags` arguments to\n        CLIPImageProcessor's [`~CLIPImageProcessor.__call__`] if `images` is not `None`. Please refer to the doctsring\n        of the above two methods for more information.\n\n        Args:\n            text (`str`, `List[str]`, `List[List[str]]`):\n                The sequence or batch of sequences to be encoded. Each sequence can be a string or a list of strings\n                (pretokenized string). If the sequences are provided as list of strings (pretokenized), you must set\n                `is_split_into_words=True` (to lift the ambiguity with a batch of sequences).\n            images (`PIL.Image.Image`, `np.ndarray`, `torch.Tensor`, `List[PIL.Image.Image]`, `List[np.ndarray]`,\n            `List[torch.Tensor]`):\n                The image or batch of images to be prepared. Each image can be a PIL image, NumPy array or PyTorch\n                tensor. In case of a NumPy array/PyTorch tensor, each image should be of shape (C, H, W), where C is a\n                number of channels, H and W are image height and width.\n            query_images (`PIL.Image.Image`, `np.ndarray`, `torch.Tensor`, `List[PIL.Image.Image]`, `List[np.ndarray]`, `List[torch.Tensor]`):\n                The query image to be prepared, one query image is expected per target image to be queried. Each image\n                can be a PIL image, NumPy array or PyTorch tensor. In case of a NumPy array/PyTorch tensor, each image\n                should be of shape (C, H, W), where C is a number of channels, H and W are image height and width.\n            return_tensors (`str` or [`~utils.TensorType`], *optional*):\n                If set, will return tensors of a particular framework. Acceptable values are:\n                - `'tf'`: Return TensorFlow `tf.constant` objects.\n                - `'pt'`: Return PyTorch `torch.Tensor` objects.\n                - `'np'`: Return NumPy `np.ndarray` objects.\n                - `'jax'`: Return JAX `jnp.ndarray` objects.\n        Returns:\n            [`BatchEncoding`]: A [`BatchEncoding`] with the following fields:\n            - **input_ids** -- List of token ids to be fed to a model. Returned when `text` is not `None`.\n            - **attention_mask** -- List of indices specifying which tokens should be attended to by the model (when\n              `return_attention_mask=True` or if *\"attention_mask\"* is in `self.model_input_names` and if `text` is not\n              `None`).\n            - **pixel_values** -- Pixel values to be fed to a model. Returned when `images` is not `None`.\n        ", "\n        This method forwards all its arguments to [`OwlViTImageProcessor.post_process_object_detection`]. Please refer\n        to the docstring of this method for more information.\n        ", "\n        This method forwards all its arguments to [`OwlViTImageProcessor.post_process_one_shot_object_detection`].\n        Please refer to the docstring of this method for more information.\n        ", "\n        This method forwards all its arguments to CLIPTokenizerFast's [`~PreTrainedTokenizer.batch_decode`]. Please\n        refer to the docstring of this method for more information.\n        ", "\n        This method forwards all its arguments to CLIPTokenizerFast's [`~PreTrainedTokenizer.decode`]. Please refer to\n        the docstring of this method for more information.\n        ", "max_length", "np", "You have to specify at least one text or query image or image. All three cannot be none."]}