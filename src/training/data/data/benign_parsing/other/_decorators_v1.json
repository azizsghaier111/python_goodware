{"imports": ["annotations", "Parameter", "signature", "Any", "Dict", "Tuple", "Union", "cast", "core_schema", "Protocol", "PydanticUserError", "can_be_positional"], "function_calls": ["signature", "enumerate", "items", "can_be_keyword", "PydanticUserError", "can_be_keyword", "can_be_positional", "PydanticUserError", "cast", "val2", "validator", "len", "validator", "set", "update", "validator", "list", "validator", "val1", "keys", "keys", "pop"], "strings": ["Logic for V1 validators, e.g. `@validator` and `@root_validator`.", "A simple validator, supported for V1 validators and V2 validators.", "A validator with `values` argument, supported for V1 validators and V2 validators.", "A validator with keyword only `values` argument, supported for V1 validators and V2 validators.", "A validator with `kwargs` argument, supported for V1 validators and V2 validators.", "A validator with `values` and `kwargs` arguments, supported for V1 validators and V2 validators.", "Wrap a V1 style field validator for V2 compatibility.\n\n    Args:\n        validator: The V1 style field validator.\n\n    Returns:\n        A wrapped V2 style field validator.\n\n    Raises:\n        PydanticUserError: If the signature is not supported or the parameters are\n            not available in Pydantic V2.\n    ", "A simple root validator, supported for V1 validators and V2 validators.", "V2 validator with mode='before'.", "V2 validator with mode='after'.", "Wrap a V1 style root validator for V2 compatibility.\n\n    Args:\n        validator: The V1 style field validator.\n        pre: Whether the validator is a pre validator.\n\n    Returns:\n        A wrapped V2 style validator.\n    ", "The `field` and `config` parameters are not available in Pydantic V2, please use the `info` parameter instead.", "validator-field-config-info", "values", "validator-v1-signature", "field", "config", "Unsupported signature for V1 style validator ", ": ", " is not supported.", "code", "code", "values"]}