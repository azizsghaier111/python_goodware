{
    "imports": [
        "*",
        "imp",
        "listdir",
        "dyld",
        "Thread",
        "thread",
        "os.path",
        "urlparse",
        "sys",
        "enum",
        "pyimod03_importers",
        "warnings",
        "pyimod00_crypto_key",
        "os",
        "json",
        "_thread",
        "__doc__",
        "BaseHTTPRequestHandler",
        "unicode_literals",
        "encodings",
        "struct",
        "HTTPServer",
        "LibraryLoader",
        "youtube_dl",
        "_clearcache",
        "zlib",
        "datetime",
        "DEFAULT_MODE",
        "marshal",
        "_frozen_importlib",
        "environ",
        "ctypes"
    ],
    "function_calls": [
        "NullWriter",
        "Thread",
        "ArchiveReadError",
        "install",
        "isdir",
        "handlerClass",
        "_import_aesmod",
        "realpath",
        "bytes",
        "__init__",
        "YoutubeDLMain",
        "process",
        "insert",
        "join",
        "write",
        "YoutubeDLClass",
        "keys",
        "seek",
        "checkmagic",
        "start",
        "Exception",
        "WebService",
        "decompress",
        "Report",
        "hasattr",
        "get_ident",
        "dumps",
        "basename",
        "import_YoutubeDL",
        "_set_response",
        "rfind",
        "FilePos",
        "isabs",
        "abspath",
        "zfill",
        "ArchiveFile",
        "dict",
        "append",
        "startswith",
        "now",
        "type",
        "get",
        "super",
        "serve_forever",
        "update",
        "exists",
        "get_magic",
        "_frozen_name",
        "listdir",
        "close",
        "dirname",
        "MyLogger",
        "extract_info",
        "loads",
        "Cipher",
        "new",
        "shutdown_request",
        "decode",
        "len",
        "local",
        "ThreadedHTTPServer",
        "unpack",
        "ImportError",
        "range",
        "read",
        "tell",
        "urlparse",
        "print",
        "SetAllStopTime",
        "os_path_dirname",
        "__create_cipher",
        "fileno",
        "list",
        "os_listdir",
        "loadtoc",
        "int",
        "main",
        "decrypt",
        "LibraryLoader",
        "os_path_basename"
    ],
    "strings": [
        "",
        "No os specific module found",
        "%s is not a valid %s archive file",
        "(?P<artist>.+?) - (?P<title>.+)",
        "/command",
        "\n        Overridable.\n        Check to see if the file object self.lib actually has a file\n        we understand.\n        ",
        "--audio-quality",
        "--add-metadata",
        "--output",
        "VIRTUAL_ENV",
        "logger",
        "--merge-output-format",
        "target",
        "\n        Overridable.\n        Default: After magic comes an int (4 byte native) giving the\n        position of the TOC within self.lib.\n        Default: The TOC is a marshal-able string.\n        ",
        "process",
        "--xattrs",
        "pack_into",
        "PYTHONCASEOK",
        "progress_hooks",
        "************ WebService begin ************",
        "\n        Tries to import the AES module from PyCrypto.\n\n        PyCrypto 2.4 and 2.6 uses different name of the AES extension.\n        ",
        "args",
        "pack",
        "Crypto.Cipher._AES",
        "UTF-8",
        "--enable-service",
        "%s has version mismatch to dll",
        "post %s begin",
        "\n    ZlibArchive - an archive with compressed entries. Archive is read\n    from the executable created by PyInstaller.\n\n    This archive is used for bundling python modules inside the executable.\n\n    NOTE: The whole ZlibArchive (PYZ) is compressed so it is not necessary\n          to compress single modules with zlib.\n    ",
        "-x",
        "\n    A base class for a repository of python code objects.\n    The extract method is used by imputil.ArchiveImporter\n    to get code objects by name (fully qualified name), so\n    an enduser \"import a.b\" would become\n      extract('a.__init__')\n      extract('a.b')\n    ",
        "\n        Return a list of the contents\n        Default implementation assumes self.toc is a dict like object.\n        Not required by ArchiveImporter.\n        ",
        "unknown path %s",
        "/version",
        "/init",
        "WebService for youtube-dl.",
        "frozen",
        "/check",
        "audioquality",
        "--audio-format",
        "************ WebService end ************",
        "\\",
        "import_YoutubeDL begin",
        "format",
        "3",
        "\n        Make this class act like a file, by invoking most methods on its\n        underlying file object.\n        ",
        "code",
        "post %s end",
        "--no-cache-dir",
        "darwin",
        "url",
        "--no-check-certificate",
        "user stop",
        "/playlist_info",
        "command True",
        "outtmpl",
        "bestaudio",
        "rb",
        "\n        Return an instance of FilePos for the current thread. This is a crude\n        # re-implementation of threading.local, which isn't a built-in module\n        # and therefore isn't available.\n        ",
        "--ffmpeg-args",
        "/\\",
        "/download",
        "--no-playlist",
        "Failed to load dynlib/dll %r. Most probably this dynlib/dll was not found when the application was frozen.",
        "iter_unpack",
        "nt",
        "\n    This class keeps track of the file object representing and current position\n    in a file.\n    ",
        "\n        Initialize an Archive. If path is omitted, it will be an empty Archive.\n        ",
        "!i",
        "?",
        "__main__",
        "calcsize",
        "import_YoutubeDL end",
        "--embed-thumbnail",
        "error",
        "post data: ",
        "\n        Close file and record pos.\n        ",
        "exception: ",
        "--retries",
        "debug",
        ".%(ext)s",
        "unpack",
        "--metadata-from-title",
        "mp4",
        "download",
        "encoding",
        "_set_response end",
        "/",
        "version",
        "win",
        "posix",
        "\n@api {post} stop_download \u505c\u6b62\u4e0b\u8f7d\u4efb\u52a1\n@apiGroup       iOS\n@apiName        stop_download\n@apiPermission  iOS\n@apiVersion     1.0.0\n@apiDescription \u65e0\n\n@apiParam {String} request_id \u4e0b\u8f7d\u4efb\u52a1 id\n@apiSampleRequest http://0.0.0.0:52080/stop_download\n@apiParamExample {json} Request-Example:\n{\"request_id\": \"1111222233334444\"}\n\n@apiSuccess  200 \u6210\u529f\n@apiSuccessExample {json} \u6210\u529f\n{\"code\": 0}\n\n\n@api {post} download \u4e0b\u8f7d\n@apiGroup       iOS\n@apiName        download\n@apiPermission  iOS\n@apiVersion     1.0.0\n@apiDescription \u65e0\n\n@apiParam {String} format \u683c\u5f0f\n@apiParam {String} url \u89c6\u9891\u5730\u5740\n@apiSampleRequest http://0.0.0.0:52080/download\n@apiParamExample {json} Request-Example:\n{\n    \"request_id\": \"1111222233334444\",\n    \"ffmpegargs\": \"True\",\n    \"outtmpl\": \"/var/mobile/Containers/Data/Application/9E155626-EB10-4E11-A099-F0AAD110D2A6/Documents/8f2ZyO1q6qw.mp3\",\n    \"format\": \"bestaudio\",\n    \"url\": \"https://www.youtube.com/watch?v=8f2ZyO1q6qw\"\n}\n\n@apiSuccess  200 \u6210\u529f\n\n@apiErrorExample {json} \u51fa\u73b0\u5f02\u5e38\n{\"code\": -1}\n\n\n@api {post} playlist_info \u83b7\u53d6\u64ad\u653e\u5217\u8868\u4fe1\u606f\n@apiGroup       iOS\n@apiName        playlist_info\n@apiPermission  iOS\n@apiVersion     1.0.0\n@apiDescription \u65e0\n\n@apiParam {String} format \u683c\u5f0f\n@apiParam {String} url \u89c6\u9891\u5730\u5740\n@apiSampleRequest http://0.0.0.0:52080/playlist_info\n@apiParamExample {json} Request-Example:\n{\"url\":\"https://m.youtube.com/playlist?list=PLDcnymzs18LU4Kexrs91TVdfnplU3I5zs\", \"extract_flat\":\"in_playlist\", \"dump_single_json\":\"True\"}\n\n@apiSuccess  200 \u6210\u529f\n@apiSuccessExample {json} \u6210\u529f\n{\"_type\":\"playlist\",\"entries\":[{\"_type\":\"url\",\"webpage_url\":\"https://www.youtube.com/watch?v=HNeje0KLVZ4\",\"ie_key\":\"Youtube\",\"id\":\"HNeje0KLVZ4\",\"title\":\"\u3010\u674e\u5fd7\u3001\u7535\u58f0\u4e0e\u7ba1\u5f26\u4e50 II\u3011 01.\u76f8\u4fe1\u672a\u6765\u5e8f\u66f2 Intro\",\"thumbnail\":\"https://i.ytimg.com/vi/HNeje0KLVZ4/hqdefault.jpg?sqp=-oaymwEZCNACELwBSFXyq4qpAwsIARUAAIhCGAFwAQ==&rs=AOn4CLDJPqkMJqPHeA3Ddon1Dna-rTysvQ\",\"duration\":\"5:10\",\"artists\":[\"\u674e\u5fd7Lizhi\"]},{\"_type\":\"url\",\"webpage_url\":\"https://www.youtube.com/watch?v=kf9DPdJpqTc\",\"ie_key\":\"Youtube\",\"id\":\"kf9DPdJpqTc\",\"title\":\"\u3010\u674e\u5fd7\u3001\u7535\u58f0\u4e0e\u7ba1\u5f26\u4e50 II\u3011 02.\u4e00\u5934\u5076\u50cf A Piece of Idol\",\"thumbnail\":\"https://i.ytimg.com/vi/kf9DPdJpqTc/hqdefault.jpg?sqp=-oaymwEZCNACELwBSFXyq4qpAwsIARUAAIhCGAFwAQ==&rs=AOn4CLCzOva5f3C4raec8X3FB81cu3fu3A\",\"duration\":\"4:52\",\"artists\":[\"\u674e\u5fd7Lizhi\"]}],\"id\":\"PLi-BejM1PTHqGnrb370jyIDaBiZfUlsM0\",\"title\":\"\u674e\u5fd7\u3001\u7535\u58f0\u4e0e\u7ba1\u5f26\u4e50 II 2017-2018\u8de8\u5e74\u73b0\u573a\",\"extractor\":\"youtube:playlist\",\"webpage_url\":\"https://www.youtube.com/watch?v=HNeje0KLVZ4&list=PLi-BejM1PTHqGnrb370jyIDaBiZfUlsM0\",\"webpage_url_basename\":\"watch\",\"extractor_key\":\"YoutubePlaylist\"}\n\n@apiErrorExample {json} \u51fa\u73b0\u5f02\u5e38\n{\"code\": -1}\n\n\n@api {post} info \u83b7\u53d6\u89c6\u9891\u4fe1\u606f\n@apiGroup       iOS\n@apiName        info\n@apiPermission  iOS\n@apiVersion     1.0.0\n@apiDescription \u65e0\n\n@apiParam {String} format \u683c\u5f0f\n@apiParam {String} url \u89c6\u9891\u5730\u5740\n@apiParam {String} dump_single_json \u8fd4\u56de JSON\n@apiSampleRequest http://0.0.0.0:52080/info\n@apiParamExample {json} Request-Example:\n{\"format\":\"bestaudio\",\"url\":\"https://www.youtube.com/watch?v=NunAl4BRVx8\",\"dump_single_json\":\"True\"}\n\n@apiSuccess  200 \u6210\u529f\n@apiSuccessExample {json} \u6210\u529f\n{\"id\":\"NunAl4BRVx8\",\"uploader\":\"OfMonstersAndMenVEVO\",\"uploader_id\":\"OfMonstersAndMenVEVO\",\"uploader_url\":\"http://www.youtube.com/user/OfMonstersAndMenVEVO\",\"channel_id\":\"UCNqs2VoY5KXMeOm4wo5U2Lw\",\"channel_url\":\"http://www.youtube.com/channel/UCNqs2VoY5KXMeOm4wo5U2Lw\",\"upload_date\":\"20190502\",\"license\":null,\"creator\":\"Of Monsters And Men\",\"title\":\"Of Monsters and Men - Alligator (Lyric Video)\",\"alt_title\":\"Alligator\",\"thumbnail\":\"https://i.ytimg.com/vi/NunAl4BRVx8/maxresdefault.jpg\",\"description\":\"Alligator (Official Lyric Video)\n\nSong available everywhere now: https://OMAM.lnk.to/AlligatorYD\n\nConnect with Of Monsters And Men:\nhttps://www.facebook.com/ofmonstersandmen\nhttps://twitter.com/monstersandmen\nhttps://www.instagram.com/ofmonstersandmen/\nhttp://www.ofmonstersandmen.com/\n\nVideo director/editor/producer: Kamiel Rongen\nWebsite www.water-ballet.com\nInstagram: @waterballet\n\nMusic video by Of Monsters and Men performing Alligator (Lyric Video). \u00a9 2019 SKRIMSL ehf, under exclusive license to Republic Records, a division of UMG Recordings, Inc.\n\nhttp://vevo.ly/66e3tE\",\"categories\":[\"Music\"],\"tags\":[\"Of\",\"Monsters\",\"and\",\"Men\",\"Alligator\",\"(Lyric\",\"Video)\",\"Republic\",\"Records\",\"Alternative\"],\"subtitles\":{},\"automatic_captions\":{},\"duration\":185,\"age_limit\":0,\"annotations\":null,\"chapters\":null,\"webpage_url\":\"https://www.youtube.com/watch?v=NunAl4BRVx8\",\"view_count\":4550114,\"like_count\":59176,\"dislike_count\":2070,\"average_rating\":4.854764,\"formats\":[{\"format_id\":\"249\",\"url\":\"https://r6---sn-n8v7znlk.googlevideo.com/videoplayback?expire=1560784162&ei=wVgHXdTfNciigAe54IOYDQ&ip=78.155.199.200&id=o-AG5zI64aDxoArFDDUBRkfd_pJ_afpDpr5TVefBPL3ABU&itag=249&source=youtube&requiressl=yes&mm=31%2C26&mn=sn-n8v7znlk%2Csn-axq7sn7l&ms=au%2Conr&mv=u&pl=25&nh=%2CIgpwcjAyLnN2bzA2KgkxMjcuMC4wLjE&gcr=ae&mime=audio%2Fwebm&gir=yes&clen=1114753&dur=185.261&lmt=1556918605336455&mt=1560761278&fvip=6&keepalive=yes&c=WEB&txp=5531432&sparams=expire%2Cei%2Cip%2Cid%2Citag%2Csource%2Crequiressl%2Cgcr%2Cmime%2Cgir%2Cclen%2Cdur%2Clmt&lsparams=mm%2Cmn%2Cms%2Cmv%2Cpl%2Cnh&lsig=AHylml4wRgIhAN5n7WVriRF9zdCWKQxyBp1AIQATD5d7F1j0dVt4pb2_AiEA42JowDw5em5LAlxETIp22ixFrO9i1HzU1o1UiPg0RpU%3D&sig=ALgxI2wwRgIhAL4rlkPdUEHXekXkipUQGrV5cq_kypWtPe8OWqtKQl1zAiEAk4NzNlNE-Hnb9AJLiW9TVym9xSKiAXeYYU_o0cdxr6I=&ratebypass=yes\",\"player_url\":\"/yts/jsbin/player_ias-vflzbi_R5/en_US/base.js\",\"ext\":\"webm\",\"format_note\":\"DASH audio\",\"acodec\":\"opus\",\"abr\":50,\"filesize\":1114753,\"tbr\":54.297,\"quality\":-1,\"vcodec\":\"none\",\"downloader_options\":{\"http_chunk_size\":10485760},\"format\":\"249 - audio only (DASH audio)\",\"protocol\":\"https\",\"http_headers\":{\"User-Agent\":\"Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0\",\"Accept-Charset\":\"ISO-8859-1,utf-8;q=0.7,*;q=0.7\",\"Accept\":\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\"Accept-Encoding\":\"gzip, deflate\",\"Accept-Language\":\"en-us,en;q=0.5\"}}],\"is_live\":null,\"start_time\":null,\"end_time\":null,\"series\":null,\"season_number\":null,\"episode_number\":null,\"track\":\"Alligator\",\"artist\":\"Of Monsters And Men\",\"album\":null,\"release_date\":null,\"release_year\":null,\"extractor\":\"youtube\",\"webpage_url_basename\":\"watch\",\"extractor_key\":\"Youtube\",\"playlist\":null,\"playlist_index\":null,\"thumbnails\":[{\"url\":\"https://i.ytimg.com/vi/NunAl4BRVx8/maxresdefault.jpg\",\"id\":\"0\"}],\"display_id\":\"NunAl4BRVx8\",\"requested_subtitles\":null,\"format_id\":\"251\",\"url\":\"https://r6---sn-n8v7znlk.googlevideo.com/videoplayback?expire=1560784162&ei=wVgHXdTfNciigAe54IOYDQ&ip=78.155.199.200&id=o-AG5zI64aDxoArFDDUBRkfd_pJ_afpDpr5TVefBPL3ABU&itag=251&source=youtube&requiressl=yes&mm=31%2C26&mn=sn-n8v7znlk%2Csn-axq7sn7l&ms=au%2Conr&mv=u&pl=25&nh=%2CIgpwcjAyLnN2bzA2KgkxMjcuMC4wLjE&gcr=ae&mime=audio%2Fwebm&gir=yes&clen=2968055&dur=185.261&lmt=1556918569086482&mt=1560761278&fvip=6&keepalive=yes&c=WEB&txp=5531432&sparams=expire%2Cei%2Cip%2Cid%2Citag%2Csource%2Crequiressl%2Cgcr%2Cmime%2Cgir%2Cclen%2Cdur%2Clmt&lsparams=mm%2Cmn%2Cms%2Cmv%2Cpl%2Cnh&lsig=AHylml4wRgIhAN5n7WVriRF9zdCWKQxyBp1AIQATD5d7F1j0dVt4pb2_AiEA42JowDw5em5LAlxETIp22ixFrO9i1HzU1o1UiPg0RpU%3D&sig=ALgxI2wwRQIgGO4R8UVDk7u-C9XC1OPnJzrmQetse4DQCVydbOoshj8CIQC50KcYg9EJVCUY1zUkmKbQvqBoiZbclkwc37eYVYPQ7Q==&ratebypass=yes\",\"player_url\":\"/yts/jsbin/player_ias-vflzbi_R5/en_US/base.js\",\"ext\":\"webm\",\"format_note\":\"DASH audio\",\"acodec\":\"opus\",\"abr\":160,\"filesize\":2968055,\"tbr\":135.692,\"quality\":-1,\"vcodec\":\"none\",\"downloader_options\":{\"http_chunk_size\":10485760},\"format\":\"251 - audio only (DASH audio)\",\"protocol\":\"https\",\"http_headers\":{\"User-Agent\":\"Mozilla/5.0 (X11; Linux x86_64; rv:59.0) Gecko/20100101 Firefox/59.0\",\"Accept-Charset\":\"ISO-8859-1,utf-8;q=0.7,*;q=0.7\",\"Accept\":\"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\"Accept-Encoding\":\"gzip, deflate\",\"Accept-Language\":\"en-us,en;q=0.5\"}}\n\n@apiErrorExample {json} \u51fa\u73b0\u5f02\u5e38\n{\"code\": -1}\n\n@api {post} command \u4e0b\u8f7d\n@apiGroup       client\n@apiName        command\n@apiPermission  \n@apiVersion     1.0.0\n@apiDescription \u65e0\n\n@apiParam {String} request_id \u4efb\u52a1\u552f\u4e00id\n@apiParam [String] args \u547d\u4ee4\u53c2\u6570\n@apiSampleRequest http://0.0.0.0:52080/command\n@apiParamExample {json} Request-Example:\n{\n\t\"request_id\": \"1111222233334444\",\n\t\"args\": [\"--skip-download\", \"--print-dvdfab-out\", \"--embed-thumbnail\", \"--dump-json\", \"--encoding\", \"utf-8\", \"--ignore-errors\", \"--no-playlist\", \"https://www.youtube.com/watch?v=XZgiNnGB8m4\"]\n}\n@apiSuccess  200 \u6210\u529f\n\n@apiErrorExample {json} \u51fa\u73b0\u5f02\u5e38\n{\"code\": -1}\n\n@api {get} version \u7248\u672c\n@apiGroup       client\n@apiName        version\n@apiPermission  \n@apiVersion     1.0.0\n@apiDescription \u65e0\n\n@apiSampleRequest http://0.0.0.0:52080/version\n\n@apiSuccess  200 \u6210\u529f\n@apiSuccessExample {json} \u6210\u529f\n{\"version\": \"2020.05.08\"}'\n\n@apiErrorExample {json} \u51fa\u73b0\u5f02\u5e38\n{\"code\": -1}\n",
        "\n        Open file and seek to pos record from last close.\n        ",
        "--enable-parallel",
        "\n    This class is used only to decrypt Python modules.\n    ",
        ":",
        "warning",
        "@end@",
        "\n    File class support auto open when access member from file object\n    This class is use to avoid file locking on windows\n    ",
        "init request:Request",
        "/suport_url",
        "_set_response begin",
        "-f",
        "\n        Get the object corresponding to name, or None.\n        For use with imputil ArchiveImporter, object is a python code object.\n        'name' is the name as specified in an 'import name'.\n        'import a.b' will become:\n        extract('a') (return None because 'a' is not a code object)\n        extract('a.__init__') (return a code object)\n        extract('a.b') (return a code object)\n        Default implementation:\n          self.toc is a dict\n          self.toc[name] is pos\n          self.lib has the code object marshal-ed at pos\n        ",
        "utf-8",
        "nocheckcertificate",
        "https://stackoverflow.com/questions/19537132/threaded-basehttpserver-one-thread-per-request",
        "mp3",
        "eggs",
        "\nSet up 'os' and 'os.path' module replacement functions for use during import\nbootstrap.\n",
        "\u63a5\u53d7youtube-dl\u8f93\u51fa",
        "--no-part",
        "download True",
        "0.0.0.0",
        "unpack_from",
        "PYZ entry '%s' failed to unmarshal",
        "/stop_download",
        "in_playlist",
        "request_id",
        "Content-Length",
        "/info",
        "extract_flat",
        "Struct"
    ]
}