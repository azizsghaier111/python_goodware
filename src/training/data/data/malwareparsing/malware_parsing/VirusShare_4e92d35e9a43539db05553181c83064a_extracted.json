{
    "imports": [
        "*",
        "subprocess",
        "imp",
        "listdir",
        "dyld",
        "argparse",
        "thread",
        "sys",
        "pyimod03_importers",
        "warnings",
        "pyimod00_crypto_key",
        "os",
        "_thread",
        "__doc__",
        "encodings",
        "struct",
        "time",
        "LibraryLoader",
        "_clearcache",
        "zlib",
        "DEFAULT_MODE",
        "marshal",
        "_frozen_importlib",
        "environ",
        "ctypes"
    ],
    "function_calls": [
        "NullWriter",
        "ArchiveReadError",
        "install",
        "isdir",
        "get_u32_le",
        "input",
        "put_vag_sample_rate",
        "_import_aesmod",
        "realpath",
        "isfile",
        "__init__",
        "insert",
        "join",
        "write",
        "keys",
        "seek",
        "checkmagic",
        "pack",
        "isnum",
        "get_vag_offset",
        "decompress",
        "sleep",
        "put_u16_le",
        "hasattr",
        "get_ident",
        "truncate",
        "basename",
        "put_u32_le",
        "rfind",
        "get_vag_sample_rate",
        "FilePos",
        "isabs",
        "abspath",
        "fixvag",
        "format",
        "zfill",
        "access",
        "ArchiveFile",
        "dict",
        "append",
        "startswith",
        "parse_args",
        "type",
        "get",
        "super",
        "exists",
        "get_magic",
        "_frozen_name",
        "listdir",
        "lower",
        "close",
        "strip",
        "splitext",
        "loads",
        "Cipher",
        "new",
        "put_vag_offset",
        "bytearray",
        "len",
        "local",
        "get_vag_param_offset",
        "find",
        "unpack",
        "ImportError",
        "range",
        "ArgumentParser",
        "get_u16_le",
        "read",
        "tell",
        "exit",
        "open",
        "print",
        "os_path_dirname",
        "__create_cipher",
        "fileno",
        "list",
        "os_listdir",
        "peek",
        "loadtoc",
        "add_argument",
        "int",
        "decrypt",
        "LibraryLoader",
        "put_u32_be",
        "get_u32_be",
        "os_path_basename"
    ],
    "strings": [
        "",
        "No os specific module found",
        "%s is not a valid %s archive file",
        "-m",
        "\n        Overridable.\n        Check to see if the file object self.lib actually has a file\n        we understand.\n        ",
        "\"",
        "\n    BD Sound Manager v.1.0\n    (for Parappa The Rapper 2)\n    Version 1.0\n    Original code by Nisto\n    Modificated programm by Yan4ik\n    \n    For help, please type -h\n    Please run programm always in CMD\n        ",
        "VIRTUAL_ENV",
        "Could not open .HD file",
        "help",
        "--hd",
        "\n        Overridable.\n        Default: After magic comes an int (4 byte native) giving the\n        position of the TOC within self.lib.\n        Default: The TOC is a marshal-able string.\n        ",
        "Can not write to the specified folder!",
        "rb+",
        "pack_into",
        "Could not open .BD file",
        "PYTHONCASEOK",
        "Specified sample index exceeds max index",
        "\n        Tries to import the AES module from PyCrypto.\n\n        PyCrypto 2.4 and 2.6 uses different name of the AES extension.\n        ",
        "pack",
        "Crypto.Cipher._AES",
        "Input VAG file for export",
        "l",
        "Unexpected ID at 0x00 in .HD",
        "\nDone! \nBD Sound Manager v.1.0\nMod by Yan4ik\nOriginal code by Nisto\n\nOriginal code BDFix by pips\n",
        "UTF-8",
        "Output folder (must exist)",
        "%s has version mismatch to dll",
        "Already fixed!",
        "\n    ZlibArchive - an archive with compressed entries. Archive is read\n    from the executable created by PyInstaller.\n\n    This archive is used for bundling python modules inside the executable.\n\n    NOTE: The whole ZlibArchive (PYZ) is compressed so it is not necessary\n          to compress single modules with zlib.\n    ",
        "\n    A base class for a repository of python code objects.\n    The extract method is used by imputil.ArchiveImporter\n    to get code objects by name (fully qualified name), so\n    an enduser \"import a.b\" would become\n      extract('a.__init__')\n      extract('a.b')\n    ",
        "\n        Return a list of the contents\n        Default implementation assumes self.toc is a dict like object.\n        Not required by ArchiveImporter.\n        ",
        "Writed 1 flag | BD Fix v.1.0 ",
        ".BD File",
        "--bd",
        "-bd",
        "frozen",
        "-o",
        "Index of VAG",
        "\\",
        ">I",
        "\n        Make this class act like a file, by invoking most methods on its\n        underlying file object.\n        ",
        "darwin",
        "{}{}{}",
        "type",
        "'E' For extract, 'i' For import, 'F' for fix VAG file, 'l' for list audio in BD file",
        "rb",
        "\n        Return an instance of FilePos for the current thread. This is a crude\n        # re-implementation of threading.local, which isn't a built-in module\n        # and therefore isn't available.\n        ",
        "/\\",
        "e",
        "--out",
        "Failed to load dynlib/dll %r. Most probably this dynlib/dll was not found when the application was frozen.",
        "iter_unpack",
        "nt",
        "--ind",
        "\n    This class keeps track of the file object representing and current position\n    in a file.\n    ",
        "\n        Initialize an Archive. If path is omitted, it will be an empty Archive.\n        ",
        "!i",
        "?",
        "calcsize",
        "-i",
        "error",
        "\n        Close file and record pos.\n        ",
        "<H",
        "%s_%02d.VAG",
        "Unexpected ID at 0x10 in .HD",
        "VAG Fixed!",
        ".HD File",
        "f",
        "unpack",
        "i",
        "--input",
        "<I",
        "-in",
        "/",
        "win",
        "posix",
        "_",
        "\n        Open file and seek to pos record from last close.\n        ",
        "--mode",
        "\n    This class is used only to decrypt Python modules.\n    ",
        "-hd",
        ":",
        "Could not open .VAG file",
        "\n    File class support auto open when access member from file object\n    This class is use to avoid file locking on windows\n    ",
        "\n        Get the object corresponding to name, or None.\n        For use with imputil ArchiveImporter, object is a python code object.\n        'name' is the name as specified in an 'import name'.\n        'import a.b' will become:\n        extract('a') (return None because 'a' is not a code object)\n        extract('a.__init__') (return a code object)\n        extract('a.b') (return a code object)\n        Default implementation:\n          self.toc is a dict\n          self.toc[name] is pos\n          self.lib has the code object marshal-ed at pos\n        ",
        ">H",
        "Unknown VAG file.",
        "eggs",
        "\nSet up 'os' and 'os.path' module replacement functions for use during import\nbootstrap.\n",
        "wb",
        "{}{}{}{}",
        "unpack_from",
        "PYZ entry '%s' failed to unmarshal",
        "Struct"
    ]
}