{
    "imports": [
        "traceback",
        "LibraryLoader",
        "locale",
        "ssl",
        "_frozen_importlib",
        "argparse",
        "sys",
        "struct",
        "popen_spawn_win32",
        "multiprocessing",
        "warnings",
        "HydrusBoot",
        "listdir",
        "forking",
        "os",
        "ctypes",
        "time",
        "win32com.gen_py",
        "tempfile",
        "dyld",
        "encodings",
        "environ",
        "re",
        "shutil",
        "popen_fork",
        "threading",
        "_clearcache",
        "imp",
        "pkg_resources",
        "win32com",
        "atexit",
        "pyimod00_crypto_key",
        "marshal",
        "FrozenImporter",
        "HydrusExceptions",
        "HydrusData",
        "zlib",
        "DEFAULT_MODE",
        "*",
        "_thread",
        "HydrusPaths",
        "thread",
        "default",
        "HydrusConstants",
        "reactor",
        "__doc__",
        "_args_from_interpreter_flags",
        "HydrusGlobals",
        "pyimod03_importers",
        "spawn",
        "ServerController",
        "HydrusLogger"
    ],
    "function_calls": [
        "__create_cipher",
        "list",
        "write",
        "fileno",
        "rfind",
        "MakeSureDirectoryExists",
        "isabs",
        "seek",
        "_import_aesmod",
        "setlocale",
        "range",
        "os_listdir",
        "new",
        "parse_args",
        "_args_from_interpreter_flags",
        "Exception",
        "os_path_dirname",
        "tell",
        "HydrusLogger",
        "format",
        "ArchiveFile",
        "checkmagic",
        "pubimmediate",
        "type",
        "unpack",
        "listdir",
        "expanduser",
        "ArgumentParser",
        "SetEnvTempDir",
        "exists",
        "os_path_basename",
        "exec",
        "DirectoryIsWritable",
        "str",
        "mkdtemp",
        "get_default_verify_paths",
        "keys",
        "Controller",
        "decrypt",
        "close",
        "register",
        "format_exc",
        "open",
        "LibraryLoader",
        "ConvertPortablePathToAbsPath",
        "callFromThread",
        "int",
        "local",
        "Run",
        "makedirs",
        "loads",
        "ArchiveReadError",
        "startswith",
        "isdir",
        "abspath",
        "_frozen_name",
        "set",
        "exit",
        "start",
        "zfill",
        "read",
        "append",
        "basename",
        "add_argument",
        "loadtoc",
        "AddBaseDirToEnvPath",
        "__init__",
        "dict",
        "ShutdownSiblingInstance",
        "insert",
        "Thread",
        "get_magic",
        "get_ident",
        "ImportError",
        "join",
        "putenv",
        "locals",
        "hasattr",
        "Cipher",
        "register_loader_type",
        "decompress",
        "get",
        "install",
        "print",
        "len",
        "super",
        "NullWriter",
        "Print",
        "FilePos",
        "ProcessStartingAction"
    ],
    "strings": [
        "",
        "iter_unpack",
        "encoding",
        "twisted",
        "Failed to load dynlib/dll %r. Most probably this dynlib/dll was not found when the application was frozen.",
        "!i",
        "\nSet up 'os' and 'os.path' module replacement functions for use during import\nbootstrap.\n",
        "--no_wal",
        "restart",
        "Initialising controller\u2026",
        "The given db path \"{}\" is not a writable-to!",
        "utf-8",
        "calcsize",
        "change db journal mode (default=WAL)",
        "qml",
        "override the program's temporary directory",
        "\n    This class keeps track of the file object representing and current position\n    in a file.\n    ",
        "target",
        "--db_synchronous_override",
        "TRUNCATE",
        "VIRTUAL_ENV",
        "PERSIST",
        "description",
        "Struct",
        "QT_PLUGIN_PATH",
        "\n        Open file and seek to pos record from last close.\n        ",
        "\n    A base class for a repository of python code objects.\n    The extract method is used by imputil.ArchiveImporter\n    to get code objects by name (fully qualified name), so\n    an enduser \"import a.b\" would become\n      extract('a.__init__')\n      extract('a.b')\n    ",
        "choices",
        "help",
        "PySide2",
        "SSL_CERT_FILE",
        "cacert.pem",
        "hydrus network server",
        "Hydrus server failed",
        "--temp_dir",
        "\\",
        "/\\",
        "--db_journal_mode",
        "from multiprocessing.forkserver import main",
        "\n        Return a list of the contents\n        Default implementation assumes self.toc is a dict like object.\n        Not required by ArchiveImporter.\n        ",
        "type",
        "store_true",
        "unpack",
        "--db_dir",
        "override SQLite cache_size per db file, in MB (default=200)",
        "--db_cache_size",
        "pack_into",
        "MEMORY",
        "Crypto.Cipher._AES",
        "PYZ entry '%s' failed to unmarshal",
        "eggs",
        "-d",
        "--no_db_temp_files",
        "nt",
        "kwargs",
        "%s has version mismatch to dll",
        "server",
        "%s is not a valid %s archive file",
        "either start this server (default), or stop an existing server, or both",
        "name",
        "print additional bootup information to the log",
        "posix",
        "\n        Return an instance of FilePos for the current thread. This is a crude\n        # re-implementation of threading.local, which isn't a built-in module\n        # and therefore isn't available.\n        ",
        "win",
        "certifi",
        "Critical boot error occurred! Details written to hydrus_crash.log in either db dir or user dir!",
        "\n    This class is used only to decrypt Python modules.\n    ",
        "stop",
        "hydrus_crash.log",
        "-c",
        "installSignalHandlers",
        "darwin",
        "ignore_errors",
        "The given db path \"{}\" is not a directory!",
        "\n    ZlibArchive - an archive with compressed entries. Archive is read\n    from the executable created by PyInstaller.\n\n    This archive is used for bundling python modules inside the executable.\n\n    NOTE: The whole ZlibArchive (PYZ) is compressed so it is not necessary\n          to compress single modules with zlib.\n    ",
        "__loader__",
        "unpack_from",
        ":",
        "OBSOLETE: run using TRUNCATE db journaling",
        "\n        Tries to import the AES module from PyCrypto.\n\n        PyCrypto 2.4 and 2.6 uses different name of the AES extension.\n        ",
        "exit",
        "Could not ensure db path \"{}\" exists! Check the location is correct and that you have permission to write to it!",
        "\n        Overridable.\n        Default: After magic comes an int (4 byte native) giving the\n        position of the TOC within self.lib.\n        Default: The TOC is a marshal-able string.\n        ",
        "start",
        "wake_daemons",
        "No os specific module found",
        "override SQLite Synchronous PRAGMA (default=2)",
        "w",
        "?",
        "run db temp operations entirely in memory",
        "--db_memory_journaling",
        "pack",
        "action",
        "gen_py",
        "\n    File class support auto open when access member from file object\n    This class is use to avoid file locking on windows\n    ",
        "\n        Get the object corresponding to name, or None.\n        For use with imputil ArchiveImporter, object is a python code object.\n        'name' is the name as specified in an 'import name'.\n        'import a.b' will become:\n        extract('a') (return None because 'a' is not a code object)\n        extract('a.__init__') (return a code object)\n        extract('a.b') (return a code object)\n        Default implementation:\n          self.toc is a dict\n          self.toc[name] is pos\n          self.lib has the code object marshal-ed at pos\n        ",
        "--boot_debug",
        "UTF-8",
        "WAL",
        "\n        Make this class act like a file, by invoking most methods on its\n        underlying file object.\n        ",
        "frozen",
        "_MEIPASS2",
        "set an external db location",
        "QML2_IMPORT_PATH",
        "\n        Overridable.\n        Check to see if the file object self.lib actually has a file\n        we understand.\n        ",
        "Desktop",
        "\n        Close file and record pos.\n        ",
        "--no_daemons",
        "~",
        "hydrus server shut down",
        "PYTHONCASEOK",
        "\n        Initialize an Archive. If path is omitted, it will be an empty Archive.\n        ",
        "from multiprocessing.semaphore_tracker import main",
        "db_dir",
        "run without background daemons",
        "error",
        "OBSOLETE: run using MEMORY db journaling (DANGEROUS)",
        "default",
        "rb",
        "plugins",
        "/",
        "nargs"
    ]
}