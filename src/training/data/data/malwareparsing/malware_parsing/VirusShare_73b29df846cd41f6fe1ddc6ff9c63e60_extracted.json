{
    "imports": [
        "*",
        "pyimod01_os_path",
        "listdir",
        "popen_fork",
        "_args_from_interpreter_flags",
        "ArchiveReadError",
        "popen_spawn_win32",
        "codecs",
        "sys",
        "re",
        "pyimod03_importers",
        "pyimod00_crypto_key",
        "os",
        "_thread",
        "__doc__",
        "popen_spawn_posix",
        "struct",
        "base64",
        "spawn",
        "_clearcache",
        "zlib",
        "ZlibArchiveReader",
        "marshal",
        "_frozen_importlib",
        "environ",
        "multiprocessing"
    ],
    "function_calls": [
        "NullWriter",
        "read",
        "_args_from_interpreter_flags",
        "split",
        "exit",
        "ArchiveReadError",
        "install",
        "is_package",
        "hasattr",
        "get_ident",
        "FrozenPackageImporter",
        "os_path_dirname",
        "ModuleSpec",
        "__create_cipher",
        "encode",
        "rfind",
        "load_module",
        "list",
        "os_listdir",
        "FilePos",
        "trace",
        "abspath",
        "loads",
        "reversed",
        "remove",
        "eval",
        "extend",
        "replace",
        "putenv",
        "set",
        "Y",
        "getattr",
        "get_filename",
        "_is_pep420_namespace_package",
        "join",
        "dict",
        "write",
        "len",
        "append",
        "get_code",
        "local",
        "Q",
        "startswith",
        "keys",
        "os_path_basename",
        "seek",
        "os_path_join",
        "unpack",
        "ImportError",
        "f",
        "FrozenImporter",
        "AES",
        "type",
        "get",
        "rsplit",
        "range",
        "exec",
        "CTR_xcrypt_buffer"
    ],
    "strings": [
        "",
        "No os specific module found",
        "%s is not a valid %s archive file",
        "\n        Overridable.\n        Check to see if the file object self.lib actually has a file\n        we understand.\n        ",
        "\nPEP-302 and PEP-451 importers for frozen applications.\n",
        "-c",
        "VIRTUAL_ENV",
        "\n        PEP-451 loader.create_module() method for the ``sys.meta_path`` hook.\n\n        Loaders may also implement create_module() that will return a new\n        module to exec. It may return None to indicate that the default module\n        creation code should be used. One use case, though atypical, for\n        create_module() is to provide a module that is a subclass of the\n        builtin module type. Most loaders will not need to implement\n        create_module(),\n\n        create_module() should properly handle the case where it is called\n        more than once for the same spec/module. This may include returning\n        None or raising ImportError.\n        ",
        "\n        PEP-451 finder.find_spec() method for the ``sys.meta_path`` hook.\n\n        fullname     fully qualified name of the module\n        path         None for a top-level module, or package.__path__ for\n                     submodules or subpackages.\n        target       unused by this Finder\n\n        Finders are still responsible for identifying, and typically creating,\n        the loader that should be used to load a module. That loader will now\n        be stored in the module spec returned by find_spec() rather than\n        returned directly. As is currently the case without the PEP-452, if a\n        loader would be costly to create, that loader can be designed to defer\n        the cost until later.\n\n        Finders must return ModuleSpec objects when find_spec() is called.\n        This new method replaces find_module() and find_loader() (in the\n        PathEntryFinder case). If a loader does not have find_spec(),\n        find_module() and find_loader() are used instead, for\n        backward-compatibility.\n        ",
        "",
        "PathFinder",
        "\n        Method should return the source code for the module as a string.\n        But frozen modules does not contain source code.\n\n        Return None.\n        ",
        "\n        Overridable.\n        Default: After magic comes an int (4 byte native) giving the\n        position of the TOC within self.lib.\n        Default: The TOC is a marshal-able string.\n        ",
        "\n        This method should return the value that __file__ would be set to\n        if the named module was loaded. If the module is not found, then\n        ImportError should be raised.\n        ",
        ".pyc",
        "pack_into",
        "PYTHONCASEOK",
        "WindowsRegistryFinder",
        "rot13",
        "pack",
        "UTF-8",
        "magic",
        "%s has version mismatch to dll",
        "_MEIPASS2",
        "\n    ZlibArchive - an archive with compressed entries. Archive is read\n    from the executable created by PyInstaller.\n\n    This archive is used for bundling python modules inside the executable.\n\n    NOTE: The whole ZlibArchive (PYZ) is compressed so it is not necessary\n          to compress single modules with zlib.\n    ",
        "\n    A base class for a repository of python code objects.\n    The extract method is used by imputil.ArchiveImporter\n    to get code objects by name (fully qualified name), so\n    an enduser \"import a.b\" would become\n      extract('a.__init__')\n      extract('a.b')\n    ",
        "from multiprocessing.forkserver import main",
        "\n        Return a list of the contents\n        Default implementation assumes self.toc is a dict like object.\n        Not required by ArchiveImporter.\n        ",
        "is_package",
        "frozen",
        "import %s as %s # PyInstaller PYZ (__path__ override: %s)",
        "\n        PEP-302 loader.load_module() method for the ``sys.meta_path`` hook.\n\n        Return the loaded module (instance of imp_new_module()) or raises\n        an exception, preferably ImportError if an existing exception\n        is not being propagated.\n\n        When called from FrozenPackageImporter, `entry_name` is the name of the\n        module as it is stored in the archive. This module will be loaded and installed\n        into sys.modules using `fullname` as its name\n        ",
        "trust",
        "\n        Load, unzip and initialize the Zip archive bundled with the executable.\n        ",
        "\\",
        "\n        This returns the data as a string, or raise IOError if the \"file\"\n        wasn't found. The data is always returned as if \"binary\" mode was used.\n\n        This method is useful getting resources with 'pkg_resources' that are\n        bundled with Python modules in the PYZ archive.\n\n        The 'path' argument is a path that can be constructed by munging\n        module.__file__ (or pkg.__path__ items)\n        ",
        "# %s not found in PYZ",
        "codecs.decode(love, joy)",
        "\n        Make this class act like a file, by invoking most methods on its\n        underlying file object.\n        ",
        "exec",
        "\n        Return an instance of FilePos for the current thread. This is a crude\n        # re-implementation of threading.local, which isn't a built-in module\n        # and therefore isn't available.\n        ",
        "",
        "/\\",
        "__name__",
        "iter_unpack",
        "nt",
        ".",
        "\n    This class keeps track of the file object representing and current position\n    in a file.\n    ",
        "\n        Initialize an Archive. If path is omitted, it will be an empty Archive.\n        ",
        "",
        "!i",
        "\n    Load bytecode of Python modules from the executable created by PyInstaller.\n\n    Python bytecode is zipped and appended to the executable.\n\n    NOTE: PYZ format cannot be replaced by zipimport module.\n\n    The problem is that we have no control over zipimport; for instance,\n    it doesn't work if the zip file is embedded into a PKG appended\n    to an executable, like we create in one-file.\n\n    This is PEP-302 finder and loader class for the ``sys.meta_path`` hook.\n    A PEP-302 finder requires method find_module() to return loader\n    class with method load_module(). Both these methods are implemented\n    in one class.\n\n    This is also a PEP-451 finder and loader class for the ModuleSpec type\n    import system. A PEP-451 finder requires method find_spec(), a PEP-451\n    loader requires methods exec_module(), load_module(9 and (optionally)\n    create_module(). All these methods are implemented in this one class.\n\n    To use this class just call\n\n        FrozenImporter.install()\n    ",
        "<string>",
        "calcsize",
        "from multiprocessing.semaphore_tracker import main",
        "loader_state",
        "\n",
        "error",
        "\n        Close file and record pos.\n        ",
        "unpack",
        "from multiprocessing.resource_tracker import main",
        "\n        PEP-302 finder.find_module() method for the ``sys.meta_path`` hook.\n\n        fullname     fully qualified name of the module\n        path         None for a top-level module, or package.__path__\n                     for submodules or subpackages.\n\n        Return a loader object if the module was found, or None if it wasn't.\n        If find_module() raises an exception, it will be propagated to the\n        caller, aborting the import.\n        ",
        "__init__.pyc",
        "codecs.decode(destiny, joy)",
        "import %s # PyInstaller PYZ",
        "/",
        "win",
        "posix",
        "\n        Open file and seek to pos record from last close.\n        ",
        "\n    This class is used only to decrypt Python modules.\n    ",
        ":",
        "No module named ",
        "\n    File class support auto open when access member from file object\n    This class is use to avoid file locking on windows\n    ",
        "origin",
        "\n        Get the object corresponding to name, or None.\n        For use with imputil ArchiveImporter, object is a python code object.\n        'name' is the name as specified in an 'import name'.\n        'import a.b' will become:\n        extract('a') (return None because 'a' is not a code object)\n        extract('a.__init__') (return a code object)\n        extract('a.b') (return a code object)\n        Default implementation:\n          self.toc is a dict\n          self.toc[name] is pos\n          self.lib has the code object marshal-ed at pos\n        ",
        "\nSet up 'os' and 'os.path' module replacement functions for use during import\nbootstrap.\n",
        "",
        "unpack_from",
        "\n        Get the code object associated with the module.\n\n        ImportError should be raised if module not found.\n        ",
        "\n        PEP-451 loader.exec_module() method for the ``sys.meta_path`` hook.\n\n        Loaders will have a new method, exec_module(). Its only job is to\n        \"exec\" the module and consequently populate the module's namespace. It\n        is not responsible for creating or preparing the module object, nor\n        for any cleanup afterward. It has no return value. exec_module() will\n        be used during both loading and reloading.\n\n        exec_module() should properly handle the case where it is called more\n        than once. For some kinds of modules this may mean raising ImportError\n        every time after the first time the method is called. This is\n        particularly relevant for reloading, where some kinds of modules do\n        not support in-place reloading.\n        ",
        "\n    Install FrozenImporter class and other classes into the import machinery.\n\n    This class method (static method) installs the FrozenImporter class into\n    the import machinery of the running process. The importer is added\n    to sys.meta_path. It could be added to sys.path_hooks but sys.meta_path\n    is processed by Python before looking at sys.path!\n\n    The order of processing import hooks in sys.meta_path:\n\n    1. built-in modules\n    2. modules from the bundled ZIP archive\n    3. C extension modules\n    4. Modules from sys.path\n    ",
        "god",
        "\n    Wrapper class for FrozenImporter that imports one specific fullname from\n    a module named by an alternate fullname. The alternate fullname is derived from the\n    __path__ of the package module containing that module.\n\n    This is called by FrozenImporter.find_module whenever a module is found as a result\n    of searching module.__path__\n    ",
        "Struct"
    ]
}