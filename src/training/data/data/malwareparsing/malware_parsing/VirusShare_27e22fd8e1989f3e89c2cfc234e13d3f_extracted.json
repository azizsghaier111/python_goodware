{
    "imports": [
        "*",
        "version_id",
        "CONFIG_FILENAME",
        "listdir",
        "popen_fork",
        "_args_from_interpreter_flags",
        "get_root_state_directory",
        "popen_spawn_win32",
        "sys",
        "asyncio",
        "SentryStrategy",
        "fork_state_directory_if_necessary",
        "re",
        "get_event_loop",
        "os",
        "SentryScrubber",
        "__doc__",
        "get_versioned_state_directory",
        "ssl",
        "logging.config",
        "tribler_core.config.tribler_config",
        "popen_spawn_posix",
        "tribler_core.session",
        "ensure_future",
        "SentryReporter",
        "tribler_core.check_os",
        "check_for_missing_dependencies",
        "spawn",
        "_clearcache",
        "signal",
        "tribler_core.modules.process_checker",
        "FrozenImporter",
        "tribler_gui",
        "pkg_resources",
        "environ",
        "sentry_url",
        "tribler_core",
        "multiprocessing"
    ],
    "function_calls": [
        "create_lock_file",
        "init",
        "_args_from_interpreter_flags",
        "set_process_priority",
        "exit",
        "run_forever",
        "set_event_loop",
        "get_api_key",
        "hasattr",
        "get_log_dir",
        "ProcessChecker",
        "os_path_dirname",
        "close",
        "fork_state_directory_if_necessary",
        "TriblerConfig",
        "get_event_loop",
        "rfind",
        "set_api_http_port",
        "get_core_error_reporting_requires_user_consent",
        "os_listdir",
        "SentryScrubber",
        "register_loader_type",
        "start_tribler",
        "get_versioned_state_directory",
        "Session",
        "check_and_enable_code_tracing",
        "set_api_key",
        "int",
        "putenv",
        "exec",
        "insert",
        "set",
        "ensure_future",
        "join",
        "info",
        "write",
        "len",
        "get_cpu_priority_order",
        "startswith",
        "os_path_basename",
        "result",
        "start",
        "getpid",
        "ImportError",
        "stop",
        "get",
        "range",
        "add_done_callback",
        "setLevel",
        "get_default_verify_paths",
        "SelectorEventLoop",
        "shutdown",
        "load_logger_config",
        "create_task",
        "set_api_http_enabled",
        "getLogger"
    ],
    "strings": [
        "",
        "No os specific module found",
        "_MEIPASS2",
        "release_version",
        "/\\",
        "from multiprocessing.forkserver import main",
        "qml",
        "/",
        "-c",
        "win",
        "nt",
        "iter_unpack",
        "posix",
        "asyncio",
        "SSL_CERT_FILE",
        ":",
        "frozen",
        "core",
        "config_file",
        "calcsize",
        "from multiprocessing.semaphore_tracker import main",
        "\n    This method will start a new Tribler session.\n    Note that there is no direct communication between the GUI process and the core: all communication is performed\n    through the HTTP API.\n    ",
        "priority_order",
        "error",
        "QML2_IMPORT_PATH",
        "\\",
        "PyQt5",
        "Qt",
        "\nSet up 'os' and 'os.path' module replacement functions for use during import\nbootstrap.\n",
        "Stopping Tribler core",
        "pack_into",
        "cacert.pem",
        "PYTHONCASEOK",
        "PATH",
        "certifi",
        " Initialise sentry reporter\n\n    We use `sentry_url` as a URL for normal tribler mode and TEST_SENTRY_URL\n    as a URL for sending sentry's reports while a Tribler client running in\n    test mode\n    ",
        "strategy",
        "unpack_from",
        "QT_PLUGIN_PATH",
        "TEST_SENTRY_URL",
        "unpack",
        "scrubber",
        "plugins",
        "pid",
        "core_test_mode",
        "pack",
        "sentry_url",
        "reset_config_on_error",
        "from multiprocessing.resource_tracker import main",
        "Struct"
    ]
}