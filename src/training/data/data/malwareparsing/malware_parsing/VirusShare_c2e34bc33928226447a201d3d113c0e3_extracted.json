{
    "imports": [
        "glob",
        "linecache",
        "codecs",
        "popen_spawn_win32",
        "multiprocessing",
        "ctypes",
        "_encode_filter_properties",
        "encodings",
        "stat",
        "re",
        "shutil",
        "BZ2Compressor",
        "subprocess",
        "pywintypes",
        "SimpleQueue",
        "getpass",
        "dis",
        "genericpath",
        "copy_context",
        "DEFAULT_MODE",
        "path",
        "_args_from_interpreter_flags",
        "decimal",
        "readline",
        "pyimod03_importers",
        "wget",
        "ssl",
        "Decimal",
        "pprint",
        "winreg",
        "_decode_filter_properties",
        "warnings",
        "listdir",
        "os",
        "time",
        "io",
        "bdb",
        "tempfile",
        "dyld",
        "ref",
        "environ",
        "__libmpdec_version__",
        "xxhash",
        "code",
        "RLock",
        "atexit",
        "deque",
        "FrozenImporter",
        "datetime",
        "*",
        "base64",
        "Context",
        "__doc__",
        "__version__",
        "zipfile",
        "builtins",
        "win32trace",
        "win32api",
        "open",
        "LibraryLoader",
        "pwd",
        "Image",
        "heappush",
        "sys",
        "signal",
        "modules",
        "ContextVar",
        "_clearcache",
        "pkg_resources",
        "win32com",
        "contextmanager",
        "BZ2Decompressor",
        "cmd",
        "inspect",
        "numbers",
        "current_thread",
        "urllib.parse",
        "traceback",
        "Token",
        "heappop",
        "Empty",
        "math",
        "win32com.gen_py",
        "shlex",
        "posixpath",
        "string",
        "operator",
        "requests",
        "popen_fork",
        "threading",
        "_dummy_thread",
        "StringIO",
        "__all__",
        "monotonic",
        "ucd_3_2_0",
        "spawn",
        "_compression"
    ],
    "function_calls": [
        "acquire",
        "reversed",
        "readlink",
        "fsdecode",
        "_check_can_seek",
        "__import__",
        "readfp",
        "canonic",
        "push_source",
        "list",
        "set_step",
        "_is_leap",
        "abs",
        "tuple",
        "write",
        "pow",
        "fileno",
        "rfind",
        "globals",
        "tcsetattr",
        "__index__",
        "release",
        "_check_can_read",
        "hex",
        "bp_commands",
        "RunAsCollector",
        "min",
        "notify",
        "fromkeys",
        "OSError",
        "_days_in_month",
        "BZ2Compressor",
        "divmod",
        "ismodule",
        "seek",
        "S_ISLNK",
        "isabs",
        "put",
        "Lock",
        "tcgetattr",
        "partition",
        "ValueError",
        "LZMAFile",
        "guess_all_extensions",
        "splittype",
        "message",
        "fsencode",
        "range",
        "peek",
        "__delattr__",
        "gcd",
        "frozenset",
        "popleft",
        "search",
        "readall",
        "os_listdir",
        "print_stack_entry",
        "wrthread",
        "items",
        "_args_from_interpreter_flags",
        "islink",
        "readline",
        "os_path_dirname",
        "tell",
        "copy",
        "forget",
        "as_integer_ratio",
        "isframe",
        "format",
        "NetrcParseError",
        "enumerate",
        "Decimal",
        "writable",
        "setdefault",
        "translate",
        "pop",
        "_patch",
        "read1",
        "type",
        "Semaphore",
        "_operator_fallbacks",
        "_init",
        "Condition",
        "b64decode",
        "endswith",
        "listdir",
        "_rewind",
        "_get",
        "getcwd",
        "fstat",
        "interaction",
        "_joinrealpath",
        "time",
        "fspath",
        "lower",
        "UnsupportedOperation",
        "TextIOWrapper",
        "ref",
        "unquote",
        "expanduser",
        "_parse",
        "setup",
        "memoryview",
        "lasti2lineno",
        "InitWrite",
        "get_token",
        "lstat",
        "dirname",
        "exists",
        "RLock",
        "os_path_basename",
        "eval",
        "wrlocal",
        "exec",
        "_check_not_closed",
        "LZMACompressor",
        "deque",
        "_qsize",
        "add_type",
        "from_float",
        "push_token",
        "str",
        "reset",
        "isinstance",
        "appendleft",
        "mkdtemp",
        "set_trace",
        "get_default_verify_paths",
        "init",
        "_days_before_month",
        "findsource",
        "keys",
        "_gcd",
        "stop_here",
        "strip",
        "create_dict",
        "property",
        "_builtin_open",
        "classmethod",
        "register",
        "close",
        "AttributeError",
        "sleep",
        "_check_can_write",
        "LibraryLoader",
        "cast",
        "open",
        "onecmd",
        "heappush",
        "compile",
        "int",
        "netrc",
        "_get_sep",
        "findlinestarts",
        "BZ2File",
        "fallback_operator",
        "makedirs",
        "__import_pywin32_system_module__",
        "_Feature",
        "compress",
        "_localimpl",
        "monomorphic_operator",
        "startswith",
        "getattr",
        "isdir",
        "abspath",
        "BufferedReader",
        "LZMAError",
        "_frozen_name",
        "extend",
        "LockType",
        "set",
        "exit",
        "repr",
        "S_IFMT",
        "TypeError",
        "DecompressReader",
        "contextmanager",
        "BZ2Decompressor",
        "op",
        "InitRead",
        "bool",
        "read",
        "append",
        "_splitext",
        "_v",
        "basename",
        "span",
        "escape",
        "writelines",
        "readlines",
        "current_thread",
        "__class__",
        "match",
        "SetupForPrint",
        "readinto",
        "setprint",
        "set_completer_delims",
        "__init__",
        "getuid",
        "complex",
        "seekable",
        "split",
        "getpwnam",
        "heappop",
        "wait",
        "clear",
        "dict",
        "max",
        "insert",
        "FileNotFoundError",
        "rstrip",
        "normpath",
        "getcwdb",
        "replace",
        "pop_source",
        "__new__",
        "join",
        "ImportError",
        "reverse",
        "get_stack",
        "putenv",
        "float",
        "id",
        "SetConsoleTitle",
        "shlex",
        "hasattr",
        "_days_before_year",
        "register_loader_type",
        "flush",
        "quote",
        "Fraction",
        "decompress",
        "ZeroDivisionError",
        "upper",
        "_print_tokens",
        "AssertionError",
        "get",
        "floor",
        "cls",
        "_put",
        "find",
        "__getattribute__",
        "_cmdloop",
        "isnan",
        "install",
        "group",
        "getblock",
        "print",
        "len",
        "error",
        "NullWriter",
        "super",
        "__setattr__",
        "execRcLines",
        "LZMADecompressor",
        "StringIO",
        "_richcmp",
        "readable",
        "notify_all",
        "read_token",
        "getpwuid",
        "maketrans",
        "splitext",
        "realpath",
        "warn",
        "round",
        "map",
        "sourcehook",
        "isinf"
    ],
    "strings": [
        "",
        "Cannot specify a preset compression level when opening a file for reading",
        "codecs.decode(destiny, joy)",
        "Invalid value for whence: {}",
        "encoding",
        "Fraction(%s, 0)",
        "Put an item into the queue.\n\n        If optional args 'block' is true and 'timeout' is None (the default),\n        block if necessary until a free slot is available. If 'timeout' is\n        a non-negative number, it blocks at most 'timeout' seconds and raises\n        the Full exception if no free slot was available within that time.\n        Otherwise ('block' is false), put an item on the queue if a free slot\n        is immediately available, else raise the Full exception ('timeout'\n        is ignored in that case).\n        ",
        "Return True if mode is from a character special device file.",
        "{",
        "FILTER_ARM",
        "shlex: popping to %s, line %d",
        "year, month, day -> ordinal, considering 01-Jan-0001 as day 1.",
        "wb",
        "tab",
        "\nSet up 'os' and 'os.path' module replacement functions for use during import\nbootstrap.\n",
        "Invalid mode: {!r}",
        "Remove and return an item from the queue without blocking.\n\n        Only get an item if one is immediately available. Otherwise\n        raise the Empty exception.\n        ",
        "OS-specific conversion from a file system path to a relative URL\n    of the 'file' scheme; not recommended for general use.",
        "a == b",
        "}",
        "utf-8",
        "A file object providing transparent LZMA (de)compression.\n\n    An LZMAFile can act as a wrapper for an existing file object, or\n    refer directly to a named file on disk.\n\n    Note that LZMAFile provides a *binary* file interface - data read\n    is returned as bytes, and data to be written must be given as bytes.\n    ",
        "Generates forward and reverse operators given a purely-rational\n        operator and a function from the operator module.\n\n        Use this like:\n        __op__, __rop__ = _operator_fallbacks(just_rational_op, operator.op)\n\n        In general, we want to implement the arithmetic operations so\n        that mixed-mode operations either call an implementation whose\n        author knew about the types of both arguments, or convert both\n        to the nearest built in type and do the operation there. In\n        Fraction, that means that we define __add__ and __radd__ as:\n\n            def __add__(self, other):\n                # Both types have numerators/denominator attributes,\n                # so do the operation directly\n                if isinstance(other, (int, Fraction)):\n                    return Fraction(self.numerator * other.denominator +\n                                    other.numerator * self.denominator,\n                                    self.denominator * other.denominator)\n                # float and complex don't have those operations, but we\n                # know about those types, so special case them.\n                elif isinstance(other, float):\n                    return float(self) + other\n                elif isinstance(other, complex):\n                    return complex(self) + other\n                # Let the other type take over.\n                return NotImplemented\n\n            def __radd__(self, other):\n                # radd handles more types than add because there's\n                # nothing left to fall back to.\n                if isinstance(other, numbers.Rational):\n                    return Fraction(self.numerator * other.denominator +\n                                    other.numerator * self.denominator,\n                                    self.denominator * other.denominator)\n                elif isinstance(other, Real):\n                    return float(other) + float(self)\n                elif isinstance(other, Complex):\n                    return complex(other) + complex(self)\n                return NotImplemented\n\n\n        There are 5 different cases for a mixed-type addition on\n        Fraction. I'll refer to all of the above code that doesn't\n        refer to Fraction, float, or complex as \"boilerplate\". 'r'\n        will be an instance of Fraction, which is a subtype of\n        Rational (r : Fraction <: Rational), and b : B <:\n        Complex. The first three involve 'r + b':\n\n            1. If B <: Fraction, int, float, or complex, we handle\n               that specially, and all is well.\n            2. If Fraction falls back to the boilerplate code, and it\n               were to return a value from __add__, we'd miss the\n               possibility that B defines a more intelligent __radd__,\n               so the boilerplate should return NotImplemented from\n               __add__. In particular, we don't handle Rational\n               here, even though we could get an exact answer, in case\n               the other type wants to do something special.\n            3. If B <: Fraction, Python tries B.__radd__ before\n               Fraction.__add__. This is ok, because it was\n               implemented with knowledge of Fraction, so it can\n               handle those instances before delegating to Real or\n               Complex.\n\n        The next two situations describe 'b + r'. We assume that b\n        didn't know about Fraction in its implementation, and that it\n        uses similar boilerplate code:\n\n            4. If B <: Rational, then __radd_ converts both to the\n               builtin rational type (hey look, that's us) and\n               proceeds.\n            5. Otherwise, __radd__ tries to find the nearest common\n               base ABC, and fall back to its builtin type. Since this\n               class doesn't subclass a concrete type, there's no\n               implementation to fall back to, so we need to try as\n               hard as possible to return an actual value, or the user\n               will get a TypeError.\n\n        ",
        "calcsize",
        "_threading_local",
        "setting thread stack size not supported",
        "/dev/null",
        "annotations",
        "Return True if the queue is empty, False otherwise (not reliable!).",
        "commonprefix",
        "\n        Read a single mime.types-format file, specified by pathname.\n\n        If strict is true, information will be added to\n        list of standard types, else to the list of non-standard\n        types.\n        ",
        "Put terminal into a raw mode.",
        "Concrete date/time and related types.\n\nSee http://www.iana.org/time-zones/repository/tz-link.html for\ntime zone and DST data sources.\n",
        "rgb_to_hls",
        "$",
        "Drop-in replacement for the thread module.\n\nMeant to be used as a brain-dead substitute so that threaded code does\nnot need to be rewritten for when the thread module is not present.\n\nSuggested usage is::\n\n    try:\n        import _thread\n    except ImportError:\n        import _dummy_thread as _thread\n\n",
        "/               ",
        "MF_HC3",
        "is_check_supported",
        "Expand ~ and ~user constructions.  If user or $HOME is unknown,\n    do nothing.",
        "year, month -> number of days in that month in that year.",
        "tk",
        "cacert.pem",
        "commdlg_ShareViolation",
        "PRESET_DEFAULT",
        "[^\\w@%+=:,./-]",
        "post_mortem",
        "NetrcParseError",
        "\\",
        "Read up to size uncompressed bytes, while trying to avoid\n        making multiple reads from the underlying stream. Reads up to a\n        buffer's worth of data if size is negative.\n\n        Returns b'' if the file is at EOF.\n        ",
        "<string>",
        "Open a bzip2-compressed file in binary or text mode.\n\n    The filename argument can be an actual filename (a str, bytes, or\n    PathLike object), or an existing file object to read from or write\n    to.\n\n    The mode argument can be \"r\", \"rb\", \"w\", \"wb\", \"x\", \"xb\", \"a\" or\n    \"ab\" for binary mode, or \"rt\", \"wt\", \"xt\" or \"at\" for text mode.\n    The default mode is \"rb\", and the default compresslevel is 9.\n\n    For binary mode, this function is equivalent to the BZ2File\n    constructor: BZ2File(filename, mode, compresslevel). In this case,\n    the encoding, errors and newline arguments must not be provided.\n\n    For text mode, a BZ2File object is created, and wrapped in an\n    io.TextIOWrapper instance with the specified encoding, error\n    handling behavior, and line ending(s).\n\n    ",
        "S",
        "filters",
        "from multiprocessing.forkserver import main",
        "\n    \\A\\s*                      # optional whitespace at the start, then\n    (?P<sign>[-+]?)            # an optional sign, then\n    (?=\\d|\\.\\d)                # lookahead for digit or .digit\n    (?P<num>\\d*)               # numerator (possibly empty)\n    (?:                        # followed by\n       (?:/(?P<denom>\\d+))?    # an optional denominator\n    |                          # or\n       (?:\\.(?P<decimal>\\d*))? # an optional fractional part\n       (?:E(?P<exp>[-+]?\\d+))? # and optional exponent\n    )\n    \\s*\\Z                      # and optional whitespace to finish\n",
        "#",
        "relpath",
        "Returns the directory component of a pathname",
        "SeAssignPrimaryTokenPrivilege",
        "Guess the extensions for a file based on its MIME type.\n\n        Return value is a list of strings giving the possible filename\n        extensions, including the leading dot ('.').  The extension is not\n        guaranteed to have been associated with any particular data stream,\n        but would be mapped to the MIME type `type' by guess_type().\n\n        Optional `strict' argument when false adds a bunch of commonly found,\n        but non-standard types.\n        ",
        "Return release in which this feature will become mandatory.\n\n        This is a 5-tuple, of the same form as sys.version_info, or, if\n        the feature was dropped, is None.\n        ",
        "pack_into",
        "MODE_NORMAL",
        "Join two or more pathname components, inserting '/' as needed.\n    If any component is an absolute path, all previous path components\n    will be discarded.  An empty last part will result in a path that\n    ends with a separator.",
        "HOME",
        "rot13",
        "commonpath",
        "Return True if the queue is full, False otherwise (not reliable!).\n\n        This method is likely to be removed at some point.  Use qsize() >= n\n        as a direct substitute, but be aware that either approach risks a race\n        condition where a queue can shrink before the result of full() or\n        qsize() can be used.\n        ",
        "%s(%s, %s)",
        "bad follower token %r",
        "\n        Read a single mime.types-format file.\n\n        If strict is true, information will be added to\n        list of standard types, else to the list of non-standard\n        types.\n        ",
        "def\\s+%s\\s*[(]",
        "Write a sequence of byte strings to the file.\n\n        Returns the number of uncompressed bytes written.\n        seq can be any iterable yielding byte strings.\n\n        Line separators are not added between the written byte strings.\n        ",
        "shlex: I see EOF in quotes state",
        "data",
        "Read a line of uncompressed bytes from the file.\n\n        The terminating newline (if present) is retained. If size is\n        non-negative, no more than size bytes will be read (in which\n        case the line may be incomplete). Returns b'' if already at EOF.\n        ",
        "\tpassword ",
        "win",
        "SeSecurityPrivilege",
        "RichEdit Text and Objects",
        "god",
        "ab",
        ".netrc",
        "dirname",
        "Return the approximate size of the queue (not reliable!).",
        "An object-oriented interface to .netrc files.",
        "netrc",
        "devnull",
        "%s (%s, line %s)",
        "<%s %s.%s object at %s>",
        "shlex: token=EOF",
        "Bad URL: ",
        "compress",
        "Return a (user, account, password) tuple for given host.",
        "Test whether a path is absolute",
        "Will be math.floor(a) in 3.0.",
        "unpack_from",
        "Compress a block of data.\n\n    compresslevel, if given, must be a number between 1 and 9.\n\n    For incremental compression, use a BZ2Compressor object instead.\n    ",
        "SysAnimate32",
        "compresslevel must be between 1 and 9",
        "Converts a finite Decimal instance to a rational number, exactly.",
        "LockType",
        "Set _interrupt flag to True to have start_new_thread raise\n    KeyboardInterrupt upon exiting.",
        "msctls_progress32",
        "exit",
        "Bad path: ",
        "account",
        "user",
        "SysTreeView32",
        "Return the portion of the file's mode that describes the\n    file type.\n    ",
        "A class managing thread-local dicts",
        "argument should be a string or a Rational instance",
        "Return an absolute path.",
        "Open an LZMA-compressed file in binary or text mode.\n\n    filename can be either an actual file name (given as a str, bytes,\n    or PathLike object), in which case the named file is opened, or it\n    can be an existing file object to read from or write to.\n\n    The mode argument can be \"r\", \"rb\" (default), \"w\", \"wb\", \"x\", \"xb\",\n    \"a\", or \"ab\" for binary mode, or \"rt\", \"wt\", \"xt\", or \"at\" for text\n    mode.\n\n    The format, check, preset and filters arguments specify the\n    compression settings, as for LZMACompressor, LZMADecompressor and\n    LZMAFile.\n\n    For binary mode, this function is equivalent to the LZMAFile\n    constructor: LZMAFile(filename, mode, ...). In this case, the\n    encoding, errors and newline arguments must not be provided.\n\n    For text mode, an LZMAFile object is created, and wrapped in an\n    io.TextIOWrapper instance with the specified encoding, error\n    handling behavior, and line ending(s).\n\n    ",
        "fractions.gcd() is deprecated. Use math.gcd() instead.",
        "msctls_updown32",
        "rgb_to_yiq",
        "pack",
        "ToolbarWindow32",
        "__",
        "trust",
        "%s.from_decimal() only takes Decimals, not %r (%s)",
        "extsep",
        "shlex: I see EOF in escape state",
        "Terminal utilities.",
        "Token",
        "I/O operation on closed file",
        "Empty",
        "generator_stop",
        "%r object attribute '__dict__' is read-only",
        "allocate_lock",
        "Fraction",
        "all_feature_names",
        "Dummy implementation of _thread.get_ident().\n\n    Since this module should only be used when _threadmodule is not\n    available, it is safe to assume that the current process is the\n    only thread.  Thus a constant can be safely returned.\n    ",
        "runeval",
        "_dummy_threading",
        "from multiprocessing.semaphore_tracker import main",
        ".",
        "Decompress a block of data.\n\n    For incremental decompression, use a BZ2Decompressor object instead.\n    ",
        "_threading_local._localimpl.",
        "String that doesn't quote its repr.",
        "!<arch>\n",
        "year -> number of days before January 1st of year.",
        "_dummy_thread",
        "Return the file descriptor for the underlying file.",
        "SysIPAddress32",
        "Test whether a path is a mount point",
        "FILTER_X86",
        "''",
        "2nd arg must be a tuple",
        "FORMAT_XZ",
        "tooltips_class32",
        "suffix_map",
        "/etc/httpd/mime.types",
        "guess_type",
        "NativeFontCtl",
        "SysPager",
        "/etc/mime.types",
        "bad toplevel token %r",
        "write",
        "final",
        "Converts a finite float to a rational number, exactly.\n\n        Beware that Fraction.from_float(0.3) != Fraction(3, 10).\n\n        ",
        "pathsep",
        "no path specified",
        "pm",
        "Return the index where to insert item x in list a, assuming a is sorted.\n\n    The return value i is such that all e in a[:i] have e <= x, and all e in\n    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will\n    insert just after the rightmost x already there.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    ",
        "encodings_map",
        "T",
        "Put terminal into a cbreak mode.",
        "SeLockMemoryPrivilege",
        "Insert item x in list a, and keep it sorted assuming a is sorted.\n\n    If x is already in a, insert it to the left of the leftmost x.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    ",
        "Return the canonical path of the specified filename, eliminating any\nsymbolic links encountered in the path.",
        "str(self)",
        "\"%s\", line %d: ",
        "abs(a)",
        "\\$(\\w+|\\{[^}]*\\})",
        "skip",
        "Adapts the decompressor API to a RawIOBase reader API",
        "////",
        "copy_context",
        "`\n",
        "machine ",
        "Return whether the file was opened for writing.",
        ";",
        "Test whether a path is a symbolic link",
        "t",
        "File not open for writing",
        "with_statement",
        "Error related constants for win32\n\nGenerated by h2py from winerror.h\n",
        "Return True if mode is from a regular file.",
        "decimal",
        "\n-> ",
        "islink",
        "both arguments should be Rational instances",
        "runctx",
        "altsep",
        "\nThis is a fake 'site' module available in default Python Library.\n\nThe real 'site' does some magic to find paths to other possible\nPython modules. We do not want this behaviour for frozen applications.\n\nFake 'site' makes PyInstaller to work with distutils and to work inside\nvirtualenv environment.\n",
        "",
        "shlex: pushing token ",
        "Fraction, infinite-precision, real numbers.",
        "FILTER_LZMA2",
        "a <= b",
        "a - b",
        "Pdb",
        "Add a mapping between a type and an extension.\n\n        When the extension is already known, the new\n        type will replace the old one. When the type\n        is already known the extension will be added\n        to the list of known extensions.\n\n        If strict is true, information will be added to\n        list of standard types, else to the list of non-standard\n        types.\n        ",
        "Release needs to be called once for every call to acquire().\n        ",
        "'",
        "Return the index where to insert item x in list a, assuming a is sorted.\n\n    The return value i is such that all e in a[:i] have e < x, and all e in\n    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will\n    insert just before the leftmost x already there.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    ",
        "filename must be a str, bytes, file or PathLike object",
        "compresslevel",
        "_normalize",
        "getatime",
        "eggs",
        "MF_BT3",
        "Put an item into the queue without blocking.\n\n        This is exactly equivalent to `put(item)` and is only provided\n        for compatibility with the Queue class.\n        ",
        "Return the current file position.",
        "Interface to the libbzip2 compression library.\n\nThis module provides a file interface, classes for incremental\n(de)compression, and functions for one-shot (de)compression.\n",
        "_denominator",
        "LZMACompressor",
        "\nThe Python Debugger Pdb\n=======================\n\nTo use the debugger in its simplest form:\n\n        >>> import pdb\n        >>> pdb.run('<a statement>')\n\nThe debugger's prompt is '(Pdb) '.  This will stop in the first\nfunction call in <a statement>.\n\nAlternatively, if a statement terminated with an unhandled exception,\nyou can use pdb's post-mortem facility to inspect the contents of the\ntraceback:\n\n        >>> <a statement>\n        <exception traceback>\n        >>> import pdb\n        >>> pdb.pm()\n\nThe commands recognized by the debugger are listed in the next\nsection.  Most can be abbreviated as indicated; e.g., h(elp) means\nthat 'help' can be typed as 'h' or 'help' (but not as 'he' or 'hel',\nnor as 'H' or 'Help' or 'HELP').  Optional arguments are enclosed in\nsquare brackets.  Alternatives in the command syntax are separated\nby a vertical bar (|).\n\nA blank line repeats the previous command literally, except for\n'list', where it lists the next 11 lines.\n\nCommands that the debugger doesn't recognize are assumed to be Python\nstatements and are executed in the context of the program being\ndebugged.  Python statements can also be prefixed with an exclamation\npoint ('!').  This is a powerful way to inspect the program being\ndebugged; it is even possible to change variables or call functions.\nWhen an exception occurs in such a statement, the exception name is\nprinted but the debugger's state is not changed.\n\nThe debugger supports aliases, which can save typing.  And aliases can\nhave parameters (see the alias help entry) which allows one a certain\nlevel of adaptability to the context under examination.\n\nMultiple commands may be entered on a single line, separated by the\npair ';;'.  No intelligence is applied to separating the commands; the\ninput is split at the first ';;', even if it is in the middle of a\nquoted string.\n\nIf a file \".pdbrc\" exists in your home directory or in the current\ndirectory, it is read in and executed as if it had been typed at the\ndebugger prompt.  This is particularly useful for aliases.  If both\nfiles exist, the one in the home directory is read first and aliases\ndefined there can be overridden by the local file.  This behavior can be\ndisabled by passing the \"readrc=False\" argument to the Pdb constructor.\n\nAside from aliases, the debugger is not directly programmable; but it\nis implemented as a class from which you can derive your own debugger\nclass, which you can make as fancy as you like.\n\n\nDebugger commands\n=================\n\n",
        "The underlying file object does not support seeking",
        "shlex: pushing to file %s",
        "Dummy implementation of threading._RLock.\n\n    Re-entrant lock can be aquired multiple times and needs to be released\n    just as many times. This dummy implemention does not check wheter the\n    current thread actually owns the lock, but does accounting on the call\n    counts.\n    ",
        "codecs.decode(love, joy)",
        "add_type",
        "~/.netrc access too permissive: access permissions must restrict access to only the owner",
        "Exception raised by Queue.get(block=0)/get_nowait().",
        "Context",
        "SysListView32",
        "TK_LIBRARY",
        " \t\n`@#$%^&*()=+[{]}\\|;:'\",<>?",
        "num",
        "init",
        "Read up to size uncompressed bytes, while trying to avoid\n        making multiple reads from the underlying stream. Reads up to a\n        buffer's worth of data if size is negative.\n\n        Returns b\"\" if the file is at EOF.\n        ",
        "LifoQueue",
        "A multi-producer, multi-consumer queue.",
        "Release the dummy lock.",
        "Variant of Queue that retrieves most recently added entries first.",
        "Argument 'errors' not supported in binary mode",
        "Return True if mode is from an event port.",
        "open",
        "FILTER_ARMTHUMB",
        "Insert item x in list a, and keep it sorted assuming a is sorted.\n\n    If x is already in a, insert it to the right of the rightmost x.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    ",
        "c",
        "local",
        "Aquire the lock, can be called multiple times in succession.\n        ",
        "BZ2File",
        "Change the file position.\n\n        The new position is specified by offset, relative to the\n        position indicated by whence. Values for whence are:\n\n            0: start of stream (default); offset must not be negative\n            1: current stream position\n            2: end of stream; offset must not be positive\n\n        Returns the new file position.\n\n        Note that seeking is emulated, so depending on the parameters,\n        this operation may be extremely slow.\n        ",
        "Split a pathname into drive and path. On Posix, drive is always\n    empty.",
        "SeTakeOwnershipPrivilege",
        "ignore_errors",
        "_Feature",
        "Python Trace Collector",
        "This method is called when there is the remote possibility\n        that we ever need to stop in this function.",
        "SeShutdownPrivilege",
        "__loader__",
        "ContextVar",
        "a >= b",
        "abspath",
        "Collecting Python Trace Output...",
        "SeUnsolicitedInputPrivilege",
        "LZMAError",
        "run",
        "Return whether the file supports seeking.",
        "-a",
        "__dict__",
        "\nProgram interrupted. (Use 'cont' to resume).",
        "Push an input source onto the lexer's input source stack.",
        "Will be round(self, ndigits) in 3.0.\n\n        Rounds half toward even.\n        ",
        "A file object providing transparent bzip2 (de)compression.\n\n    A BZ2File can act as a wrapper for an existing file object, or refer\n    directly to a named file on disk.\n\n    Note that BZ2File provides a *binary* file interface - data read is\n    returned as bytes, and data to be written should be given as bytes.\n    ",
        "unlocked",
        "No os specific module found",
        "isfile",
        "commonpath() arg is an empty sequence",
        "task_done() called too many times",
        "common_types",
        "();<>|&",
        "Mode-checking helper functions.",
        "SeTcbPrivilege",
        "gen_py",
        "SysMonthCal32",
        "Returns the final component of a pathname",
        "UTF-8",
        "repr(self)",
        " \t",
        "runcall",
        "Return True if mode is from a door.",
        "frozen",
        "Return True if mode is from a block special device file.",
        "unicode_literals",
        "generators",
        "Blocks until all items in the Queue have been gotten and processed.\n\n        The count of unfinished tasks goes up whenever an item is added to the\n        queue. The count goes down whenever a consumer thread calls task_done()\n        to indicate the item was retrieved and all work on it is complete.\n\n        When the count of unfinished tasks drops to zero, join() unblocks.\n        ",
        "Initialization arguments are not supported",
        "malformed %s entry %s terminated by %s",
        "Closest Fraction to self with denominator at most max_denominator.\n\n        >>> Fraction('3.141592653589793').limit_denominator(10)\n        Fraction(22, 7)\n        >>> Fraction('3.141592653589793').limit_denominator(100)\n        Fraction(311, 99)\n        >>> Fraction(4321, 8765).limit_denominator(10000)\n        Fraction(4321, 8765)\n\n        ",
        " \t\r\n",
        "MimeTypes",
        "samefile",
        "curdir",
        "Will be math.ceil(a) in 3.0.",
        "CHECK_SHA256",
        "guess_extension",
        "Test whether a path exists.  Returns True for broken symbolic links",
        "quote",
        "barry_as_FLUFL",
        "dicts",
        "Normalize path, eliminating double slashes, etc.",
        "Return True if mode is from a FIFO (named pipe).",
        "pythoncom",
        "locallock",
        "shlex: I see punctuation in word state",
        "Return a relative version of a path",
        "samestat",
        "SeSystemtimePrivilege",
        "Flush and close the file.\n\n        May be called more than once without error. Once the file is\n        closed, any other operation on it will raise a ValueError.\n        ",
        "\n",
        "Return the portion of the file's mode that can be set by\n    os.chmod().\n    ",
        "Convert a NT pathname to a file URL and vice versa.\n\nThis module only exists to provide OS-specific code\nfor urllib.requests, thus do not use directly.\n",
        "PRESET_EXTREME",
        "default",
        "l",
        "commdlg_LBSelChangedNotify",
        "knownfiles",
        "macdef",
        "read_mime_types",
        "print_function",
        "Guess the MIME type of a file.\n\nThis module defines two useful functions:\n\nguess_type(url, strict=True) -- guess the MIME type and encoding of a URL.\n\nguess_extension(type, strict=True) -- guess the extension for a given MIME type.\n\nIt also contains the following, for tuning the behavior:\n\nData:\n\nknownfiles -- list of files to parse\ninited -- flag set when init() has been called\nsuffix_map -- dictionary mapping suffixes to suffixes\nencodings_map -- dictionary mapping suffixes to encodings\ntypes_map -- dictionary mapping suffixes to types\n\nFunctions:\n\ninit([files]) -- parse a list of files, default knownfiles (on Windows, the\n  default values are taken from the registry)\nread_mime_types(file) -- parse one file, return a dictionary or None\n",
        "abcdfeghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_",
        "Integer argument expected",
        "Thread-local objects.\n\n(Note that this module provides a Python version of the threading.local\n class.  Depending on the version of Python you're using, there may be a\n faster one available.  You should always import the `local` class from\n `threading`.)\n\nThread-local objects support the management of thread-local data.\nIf you have data that you want to be local to a thread, simply create\na thread-local object and use its attributes:\n\n  >>> mydata = local()\n  >>> mydata.number = 42\n  >>> mydata.number\n  42\n\nYou can also access the local-object's dictionary:\n\n  >>> mydata.__dict__\n  {'number': 42}\n  >>> mydata.__dict__.setdefault('widgets', [])\n  []\n  >>> mydata.widgets\n  []\n\nWhat's important about thread-local objects is that their data are\nlocal to a thread. If we access the data in a different thread:\n\n  >>> log = []\n  >>> def f():\n  ...     items = sorted(mydata.__dict__.items())\n  ...     log.append(items)\n  ...     mydata.number = 11\n  ...     log.append(mydata.number)\n\n  >>> import threading\n  >>> thread = threading.Thread(target=f)\n  >>> thread.start()\n  >>> thread.join()\n  >>> log\n  [[], 11]\n\nwe get different data.  Furthermore, changes made in the other thread\ndon't affect data seen in this thread:\n\n  >>> mydata.number\n  42\n\nOf course, values you get from a local object, including a __dict__\nattribute, are for whatever thread was current at the time the\nattribute was read.  For that reason, you generally don't want to save\nthese values across threads, as they apply only to the thread they\ncame from.\n\nYou can create custom local objects by subclassing the local class:\n\n  >>> class MyLocal(local):\n  ...     number = 2\n  ...     def __init__(self, **kw):\n  ...         self.__dict__.update(kw)\n  ...     def squared(self):\n  ...         return self.number ** 2\n\nThis can be useful to support default values, methods and\ninitialization.  Note that if you define an __init__ method, it will be\ncalled each time the local object is used in a separate thread.  This\nis necessary to initialize each thread's dictionary.\n\nNow if we create a local object:\n\n  >>> mydata = MyLocal(color='red')\n\nNow we have a default number:\n\n  >>> mydata.number\n  2\n\nan initial color:\n\n  >>> mydata.color\n  'red'\n  >>> del mydata.color\n\nAnd a method that operates on the data:\n\n  >>> mydata.squared()\n  4\n\nAs before, we can access the data in a separate thread:\n\n  >>> log = []\n  >>> thread = threading.Thread(target=f)\n  >>> thread.start()\n  >>> thread.join()\n  >>> log\n  [[('color', 'red')], 11]\n\nwithout affecting this thread's data:\n\n  >>> mydata.number\n  2\n  >>> mydata.color\n  Traceback (most recent call last):\n  ...\n  AttributeError: 'MyLocal' object has no attribute 'color'\n\nNote that subclasses can define slots, but they are not thread\nlocal. They are shared across threads:\n\n  >>> class MyLocal(local):\n  ...     __slots__ = 'number'\n\n  >>> mydata = MyLocal()\n  >>> mydata.number = 42\n  >>> mydata.color = 'red'\n\nSo, the separate thread:\n\n  >>> thread = threading.Thread(target=f)\n  >>> thread.start()\n  >>> thread.join()\n\naffects what we see:\n\n  >>> mydata.number\n  11\n\n>>> del mydata\n",
        "True if this file is closed.",
        "Return True if mode is from a directory.",
        "defpath",
        "SeSystemProfilePrivilege",
        "FILTER_LZMA1",
        "s",
        "a ** b",
        "Bisection algorithms.",
        "year, month -> number of days in year preceding first day of month.",
        "Read up to size uncompressed bytes from the file.\n\n        If size is negative or omitted, read until EOF is reached.\n        Returns b'' if the file is already at EOF.\n        ",
        "isabs",
        "SeRestorePrivilege",
        "Return True if the queue is empty, False otherwise (not reliable!).\n\n        This method is likely to be removed at some point.  Use qsize() == 0\n        as a direct substitute, but be aware that either approach risks a race\n        condition where a queue can grow before the result of empty() or\n        qsize() can be used.\n\n        To create code that needs to wait for all queued tasks to be\n        completed, the preferred technique is to use the join() method.\n        ",
        "shlex: pushing to stream %s",
        "LZMAFile",
        "getsize",
        "guess_all_extensions",
        "VIRTUAL_ENV",
        "%s.from_float() only takes floats, not %r (%s)",
        "SimpleQueue",
        "gcd",
        "/etc/apache2/mime.types",
        "Open an LZMA-compressed file in binary mode.\n\n        filename can be either an actual file name (given as a str,\n        bytes, or PathLike object), in which case the named file is\n        opened, or it can be an existing file object to read from or\n        write to.\n\n        mode can be \"r\" for reading (default), \"w\" for (over)writing,\n        \"x\" for creating exclusively, or \"a\" for appending. These can\n        equivalently be given as \"rb\", \"wb\", \"xb\" and \"ab\" respectively.\n\n        format specifies the container format to use for the file.\n        If mode is \"r\", this defaults to FORMAT_AUTO. Otherwise, the\n        default is FORMAT_XZ.\n\n        check specifies the integrity check to use. This argument can\n        only be used when opening a file for writing. For FORMAT_XZ,\n        the default is CHECK_CRC64. FORMAT_ALONE and FORMAT_RAW do not\n        support integrity checks - for these formats, check must be\n        omitted, or be CHECK_NONE.\n\n        When opening a file for reading, the *preset* argument is not\n        meaningful, and should be omitted. The *filters* argument should\n        also be omitted, except when format is FORMAT_RAW (in which case\n        it is required).\n\n        When opening a file for writing, the settings used by the\n        compressor can be specified either as a preset compression\n        level (with the *preset* argument), or in detail as a custom\n        filter chain (with the *filters* argument). For FORMAT_XZ and\n        FORMAT_ALONE, the default is to use the PRESET_DEFAULT preset\n        level. For FORMAT_RAW, the caller must always specify a filter\n        chain; the raw compressor does not support preset compression\n        levels.\n\n        preset (if provided) should be an integer in the range 0-9,\n        optionally OR-ed with the constant PRESET_EXTREME.\n\n        filters (if provided) should be a sequence of dicts. Each dict\n        should have an entry for \"id\" indicating ID of the filter, plus\n        additional entries for options to the filter.\n        ",
        "+a: Coerces a subclass instance to Fraction",
        "login",
        "SysHeader32",
        "FILTER_DELTA",
        "trailing_error",
        "help",
        "\"",
        "division",
        "Dummy implementation of _thread._set_sentinel().",
        "'timeout' must be a non-negative number",
        "-",
        "Simple, unbounded FIFO queue.\n\n    This pure Python implementation is not reentrant.\n    ",
        "Conversion functions between RGB and other color systems.\n\nThis modules provides two functions for each color system ABC:\n\n  rgb_to_abc(r, g, b) --> a, b, c\n  abc_to_rgb(a, b, c) --> r, g, b\n\nAll inputs and outputs are triples of floats in the range [0.0...1.0]\n(with the exception of I and Q, which covers a slightly larger range).\nInputs outside the valid range may cause exceptions or invalid outputs.\n\nSupported color systems:\nRGB: Red, Green, Blue components\nYIQ: Luminance, Chrominance (used by composite video signals)\nHLS: Hue, Luminance, Saturation\nHSV: Hue, Saturation, Value\n",
        "=",
        "shlex: popping token ",
        "pydoc",
        "x",
        "",
        "absolute_import",
        "unpack",
        "Dummy implementation of acquire().\n\n        For blocking calls, self.locked_status is automatically set to\n        True and returned appropriately based on value of\n        ``waitflag``.  If it is non-blocking, then the value is\n        actually checked and not set if it is already acquired.  This\n        is all done so that threading.Condition's assert statements\n        aren't triggered and throw a little fit.\n\n        ",
        "..",
        "Hook called on a filename to be sourced.",
        "__weakref__",
        "setraw",
        "Guess the extension for a file based on its MIME type.\n\n        Return value is a string giving a filename extension,\n        including the leading dot ('.').  The extension is not\n        guaranteed to have been associated with any particular data\n        stream, but would be mapped to the MIME type `type' by\n        guess_type().  If no extension can be guessed for `type', None\n        is returned.\n\n        Optional `strict' argument when false adds a bunch of commonly found,\n        but non-standard types.\n        ",
        "Return True if mode is from a socket.",
        "expanduser",
        "Argument 'encoding' not supported in binary mode",
        "msctls_trackbar32",
        "/etc/httpd/conf/mime.types",
        "//              ",
        "Return True if mode is from a symbolic link.",
        "SeMachineAccountPrivilege",
        "exists",
        "Library that exposes various tables found in the StringPrep RFC 3454.\n\nThere are two kinds of tables: sets, for which a member test is provided,\nand mappings, for which a mapping function is provided.\n",
        "exec",
        "/usr/local/etc/mime.types",
        "localargs",
        "commctrl_DragListMsg",
        "Full",
        "__main__",
        "CHECK_NONE",
        "__r",
        "Put the item on the queue.\n\n        The optional 'block' and 'timeout' arguments are ignored, as this method\n        never blocks.  They are provided for compatibility with the Queue class.\n        ",
        "posix",
        "getctime",
        "Nadeem Vawda <nadeem.vawda@gmail.com>",
        "\n     Define the builtin 'help'.\n     This is a wrapper around pydoc.help (with a twist).\n     ",
        "commdlg_SetRGBColor",
        "FILTER_SPARC",
        "FORMAT_AUTO",
        "No closing quotation",
        "shlex: I see whitespace in whitespace state",
        "month must be in 1..12",
        "3.2.0",
        "Common operations on Posix pathnames.\n\nInstead of importing this module directly, import os and refer to\nthis module as os.path.  The \"os.path\" name is an alias for this\nmodule on Posix systems; on other systems (e.g. Mac, Windows),\nos.path provides the same operations in a manner specific to that\nplatform, and is an alias to another module (e.g. macpath, ntpath).\n\nSome of this can actually be useful on non-Posix systems too, e.g.\nfor manipulation of the pathname component of URLs.\n",
        "normcase",
        "CHECK_UNKNOWN",
        "a // b",
        "-c",
        "No escaped character",
        "check",
        "Write a byte string to the file.\n\n        Returns the number of uncompressed bytes written, which is\n        always len(data). Note that due to buffering, the file on disk\n        may not reflect the data written until close() is called.\n        ",
        "",
        "Remove and return an item from the queue.\n\n        If optional args 'block' is true and 'timeout' is None (the default),\n        block if necessary until an item is available. If 'timeout' is\n        a non-negative number, it blocks at most 'timeout' seconds and raises\n        the Empty exception if no item was available within that time.\n        Otherwise ('block' is false), return an item if one is immediately\n        available, else raise the Empty exception ('timeout' is ignored\n        in that case).\n        ",
        "Return True if mode is from a whiteout.",
        "isdir",
        "lexists",
        "getmtime",
        "CHECK_CRC64",
        "beta",
        "B",
        "Normalize case of pathname.  Has no effect under Posix",
        "Read a list of lines of uncompressed bytes from the file.\n\n        size can be specified to control the number of lines read: no\n        further lines will be read once the total size of the lines read\n        so far equals or exceeds size.\n        ",
        "hash(self)",
        "~-./*?=",
        "Tk data directory \"%s\" not found.",
        "normcase() argument must be str or bytes, not '{}'",
        "BZ2Decompressor",
        "/bin:/usr/bin",
        "Record of phased-in incompatible language changes.\n\nEach line is of the form:\n\n    FeatureName = \"_Feature(\" OptionalRelease \",\" MandatoryRelease \",\"\n                              CompilerFlag \")\"\n\nwhere, normally, OptionalRelease < MandatoryRelease, and both are 5-tuples\nof the same form as sys.version_info:\n\n    (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int\n     PY_MINOR_VERSION, # the 1; an int\n     PY_MICRO_VERSION, # the 0; an int\n     PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" or \"final\"; string\n     PY_RELEASE_SERIAL # the 3; an int\n    )\n\nOptionalRelease records the first release in which\n\n    from __future__ import FeatureName\n\nwas accepted.\n\nIn the case of MandatoryReleases that have not yet occurred,\nMandatoryRelease predicts the release in which the feature will become part\nof the language.\n\nElse MandatoryRelease records when the feature became part of the language;\nin releases at or after that, modules no longer need\n\n    from __future__ import FeatureName\n\nto use the feature in question, but may continue to use such imports.\n\nMandatoryRelease may also be None, meaning that a planned feature got\ndropped.\n\nInstances of class _Feature have two corresponding methods,\n.getOptionalRelease() and .getMandatoryRelease().\n\nCompilerFlag is the (bitfield) flag that should be passed in the fourth\nargument to the builtin function compile() to enable the feature in\ndynamically compiled code.  This flag is stored in the .compiler_flag\nattribute on _Future instances.  These values must match the appropriate\n#defines of CO_xxx flags in Include/compile.h.\n\nNo feature line is ever to be deleted from this file.\n",
        "SeIncreaseBasePriorityPrivilege",
        "read",
        "Interface to the liblzma compression library.\n\nThis module provides a class for reading and writing compressed files,\nclasses for incremental (de)compression, and convenience functions for\none-shot (de)compression.\n\nThese classes and functions support both the XZ and legacy LZMA\ncontainer formats, as well as raw compressed data streams.\n",
        "MODE_FAST",
        "'\"",
        "",
        "3rd arg must be a dict",
        "basename",
        "inited",
        "Tcl data directory \"%s\" not found.",
        "Dummy implementation of _thread.stack_size().",
        "Call every command that was set for the current active breakpoint\n        (if there is one).\n\n        Returns True if the normal interaction function must be called,\n        False otherwise.",
        "Return the dict for the current thread. Raises KeyError if none\n        defined.",
        "\n\tlogin ",
        "macdef ",
        "msctls_statusbar32",
        "SeDebugPrivilege",
        "SeRemoteShutdownPrivilege",
        "locked",
        "Expand shell variables of form $var and ${var}.  Unknown variables\n    are left unchanged.",
        "Return whether the file was opened for reading.",
        "split",
        "Return buffered data without advancing the file position.\n\n        Always returns at least one byte of data, unless at EOF.\n        The exact number of bytes returned is unspecified.\n        ",
        "CHECK_CRC32",
        "key",
        "normpath",
        "TCL_LIBRARY",
        "_local__impl",
        "a > b",
        "get_ident",
        "lo must be non-negative",
        "CHECK_ID_MAX",
        "join",
        "Rich Text Format Without Objects",
        "hsv_to_rgb",
        "~",
        "a != 0",
        "Create a new dict for the current thread, and return it.",
        ",",
        "Guess the type of a file based on its URL.\n\n        Return value is a tuple (type, encoding) where type is None if\n        the type can't be guessed (no or unknown suffix) or a string\n        of the form type/subtype, usable for a MIME Content-type\n        header; and encoding is None for no encoding or the name of\n        the program used to encode (e.g. compress or gzip).  The\n        mappings are table driven.  Encoding suffixes are case\n        sensitive; type suffixes are first tried case sensitive, then\n        case insensitive.\n\n        The suffixes .tgz, .taz and .tz (case sensitive!) are all\n        mapped to '.tar.gz'.  (This is table-driven too, using the\n        dictionary suffix_map.)\n\n        Optional `strict' argument when False adds a bunch of commonly found,\n        but non-standard types.\n        ",
        "a % b",
        "threading",
        "Queue",
        "Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is\n    everything after the final slash.  Either part may be empty.",
        "SeChangeNotifyPrivilege",
        "Return first release in which this feature was recognized.\n\n        This is a 5-tuple, of the same form as sys.version_info.\n        ",
        "LZMADecompressor",
        "text/plain",
        "commdlg_FindReplace",
        "uid %s",
        "Invalid mode: %r",
        "magic",
        "expandvars",
        "interrupt_main",
        "alpha",
        "~/.netrc file owner (%s) does not match current user (%s)",
        "exp",
        "iter_unpack",
        "PriorityQueue",
        "SeBackupPrivilege",
        "sign",
        "Failed to load dynlib/dll %r. Most probably this dynlib/dll was not found when the application was frozen.",
        "currentbp",
        "Convert a file's mode to a string of the form '-rwxrwxrwx'.",
        "Dump the class data in the format of a .netrc file.",
        "/usr/local/lib/netscape/mime.types",
        "__index__",
        "Emit a C-compiler-like, Emacs-friendly error-message leader.",
        "Invalid literal for Fraction: %r",
        "p",
        "a ** b\n\n        If b is not an integer, the result will be a float or complex\n        since roots are generally irrational. If b is an integer, the\n        result will be rational.\n\n        ",
        "commdlg_FileNameOK",
        "a / b",
        "Get a token from the input stream (or from stack if it's nonempty)",
        "Exception raised by Queue.put(block=0)/put_nowait().",
        "BZ2Compressor",
        "ReBarWindow32",
        " ",
        "'\"'\"'",
        "--Call--",
        "SeCreateTokenPrivilege",
        "Write a bytes object to the file.\n\n        Returns the number of uncompressed bytes written, which is\n        always len(data). Note that due to buffering, the file on disk\n        may not reflect the data written until close() is called.\n        ",
        "This function is called when we stop or break at this line.",
        "Given a sequence of path names, returns the longest common sub-path.",
        "machine",
        "types_map",
        "_thread",
        "MIME-types datastore.\n\n    This datastore can handle information from mime.types-style files\n    and supports basic determination of MIME type from a filename or\n    URL, and can guess a reasonable extension given a MIME type.\n    ",
        "Struct",
        "a + b",
        "Read bytes into b.\n\n        Returns the number of bytes read (0 for EOF).\n        ",
        ".pdbrc",
        "r",
        "SSL_CERT_FILE",
        "SeSystemEnvironmentPrivilege",
        "Create a queue object with a given maximum size.\n\n    If maxsize is <= 0, the queue size is infinite.\n    ",
        "Argument 'newline' not supported in binary mode",
        "denom",
        "format",
        "MF_HC4",
        "/\\",
        "SysDateTimePick32",
        "a",
        "commdlg_ColorOK",
        "SeAuditPrivilege",
        "shlex: in state %r I see character: %r",
        "Helper for comparison operators, for internal use only.\n\n        Implement comparison between a Rational instance `self`, and\n        either another Rational instance or a float `other`.  If\n        `other` is not a Rational instance or a float, return\n        NotImplemented. `op` should be one of the six standard\n        comparison operators.\n\n        ",
        "FORMAT_ALONE",
        "Seeking is only supported on files open for reading",
        "setcbreak",
        "Split the string *s* using shell-like syntax.",
        "Return a shell-escaped version of the string *s*.",
        "Pop the input source stack.",
        "Use of 'buffering' argument is deprecated",
        "b",
        "Dummy implementation of _thread.allocate_lock().",
        "nt",
        "Faux ``threading`` version using ``dummy_thread`` instead of ``thread``.\n\nThe module ``_dummy_threading`` is added to ``sys.modules`` in order\nto not have ``threading`` considered imported.  Had ``threading`` been\ndirectly imported it would have made all subsequent imports succeed\nregardless of whether ``_thread`` was available which is not desired.\n\n",
        "RLock",
        "supports_unicode_filenames",
        "Internal classes used by the gzip, lzma and bz2 modules",
        "splitdrive",
        "Compress a block of data.\n\n    Refer to LZMACompressor's docstring for a description of the\n    optional arguments *format*, *check*, *preset* and *filters*.\n\n    For incremental compression, use an LZMACompressor instead.\n    ",
        "\n        Load the MIME types database from Windows registry.\n\n        If strict is true, information will be added to\n        list of standard types, else to the list of non-standard\n        types.\n        ",
        "Put an item into the queue without blocking.\n\n        Only enqueue the item if a free slot is immediately available.\n        Otherwise raise the Full exception.\n        ",
        "_dummy__threading_local",
        "Push a token onto the stack popped by the get_token method",
        "day must be in 1..%d",
        "Type help() for interactive help, or help(object) for help about object.",
        "pardir",
        "MF_BT2",
        "set_trace",
        "preset",
        "certifi",
        "SysTabControl32",
        "max_denominator should be at least 1",
        "MF_BT4",
        "OS-specific conversion from a relative URL of the 'file' scheme\n    to a file system path; not recommended for general use.",
        "ismount",
        "shlex: I see whitespace in word state",
        "FILTER_POWERPC",
        "a < b",
        "ASCII",
        "password",
        "Class implementing dummy implementation of _thread.LockType.\n\n    Compatibility is maintained by maintaining self.locked_status\n    which is a boolean that stores the state of the lock.  Pickling of\n    the lock, though, should not be done since if the _thread module is\n    then used with an unpickled ``lock()`` from here problems could\n    occur from this class not having atomic methods.\n\n    ",
        "///",
        "Read up to size uncompressed bytes from the file.\n\n        If size is negative or omitted, read until EOF is reached.\n        Returns b\"\" if the file is already at EOF.\n        ",
        "Exception raised on syntax errors in the .netrc file.",
        "darwin",
        "/etc/apache/mime.types",
        "Dummy implementation of _thread.start_new_thread().\n\n    Compatibility is maintained by making sure that ``args`` is a\n    tuple and ``kwargs`` is a dictionary.  If an exception is raised\n    and it is SystemExit (which can be done by _thread.exit()) it is\n    caught and nothing is done; all other exceptions are printed out\n    by using traceback.print_exc().\n\n    If the executed function calls interrupt_main the KeyboardInterrupt will be\n    raised when the function returns.\n\n    ",
        "0",
        "commdlg_help",
        "Indicate that a formerly enqueued task is complete.\n\n        Used by Queue consumer threads.  For each get() used to fetch a task,\n        a subsequent call to task_done() tells the queue that the processing\n        on the task is complete.\n\n        If a join() is currently blocking, it will resume when all items\n        have been processed (meaning that a task_done() call was received\n        for every item that had been put() into the queue).\n\n        Raises a ValueError if called more times than there were items\n        placed in the queue.\n        ",
        "Rich Text Format",
        "SeCreatePagefilePrivilege",
        "nested_scopes",
        "FILTER_IA64",
        ":",
        "A lexical analyzer class for simple shell-like syntaxes.",
        "xb",
        "SeIncreaseQuotaPrivilege",
        "This class implements rational numbers.\n\n    In the two-argument form of the constructor, Fraction(8, 6) will\n    produce a rational number equivalent to 4/3. Both arguments must\n    be Rational. The numerator defaults to 0 and the denominator\n    defaults to 1 so that Fraction(3) == 3 and Fraction() == 0.\n\n    Fractions can also be constructed from:\n\n      - numeric strings similar to those accepted by the\n        float constructor (for example, '-2.3' or '1e10')\n\n      - strings of the form '123/456'\n\n      - float and Decimal instances\n\n      - other Rational instances (including integers)\n\n    ",
        "trunc(a)",
        "tcl",
        "rgb_to_hsv",
        "start",
        "Calculate the Greatest Common Divisor of a and b.\n\n    Unless b==0, the result will have the same sign as b (so that when\n    b is divided by it, the result comes out positive).\n    ",
        "hls_to_rgb",
        "Dummy implementation of _thread.exit().",
        "w",
        "ComboBoxEx32",
        "yiq_to_rgb",
        "Causes a debugger to be restarted for the debugged python program.",
        "Ctrl+C",
        "\taccount ",
        "Redirecting output to win32trace remote collector",
        "/usr/local/etc/httpd/conf/mime.types",
        "msctls_hotkey32",
        "Decompress a block of data.\n\n    Refer to LZMADecompressor's docstring for a description of the\n    optional arguments *format*, *check* and *filters*.\n\n    For incremental decompression, use an LZMADecompressor instead.\n    ",
        "SeCreatePermanentPrivilege",
        "sameopenfile",
        "Constructs a Rational.\n\n        Takes a string like '3/2' or '1.5', another Rational instance, a\n        numerator/denominator pair, or a float.\n\n        Examples\n        --------\n\n        >>> Fraction(10, -8)\n        Fraction(-5, 4)\n        >>> Fraction(Fraction(1, 7), 5)\n        Fraction(1, 35)\n        >>> Fraction(Fraction(1, 7), Fraction(2, 3))\n        Fraction(3, 14)\n        >>> Fraction('314')\n        Fraction(314, 1)\n        >>> Fraction('-35/4')\n        Fraction(-35, 4)\n        >>> Fraction('3.1415') # conversion from numeric string\n        Fraction(6283, 2000)\n        >>> Fraction('-47e-2') # string may include a decimal exponent\n        Fraction(-47, 100)\n        >>> Fraction(1.47)  # direct construction from float (exact conversion)\n        Fraction(6620291452234629, 4503599627370496)\n        >>> Fraction(2.25)\n        Fraction(9, 4)\n        >>> Fraction(Decimal('1.47'))\n        Fraction(147, 100)\n\n        ",
        "\u00df\u00e0\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7\u00e8\u00e9\u00ea\u00eb\u00ec\u00ed\u00ee\u00ef\u00f0\u00f1\u00f2\u00f3\u00f4\u00f5\u00f6\u00f8\u00f9\u00fa\u00fb\u00fc\u00fd\u00fe\u00ff\u00c0\u00c1\u00c2\u00c3\u00c4\u00c5\u00c6\u00c7\u00c8\u00c9\u00ca\u00cb\u00cc\u00cd\u00ce\u00cf\u00d0\u00d1\u00d2\u00d3\u00d4\u00d5\u00d6\u00d8\u00d9\u00da\u00db\u00dc\u00dd\u00de",
        "SeLoadDriverPrivilege",
        "|",
        "_MEIPASS2",
        "_numerator",
        "environb",
        "Change the file position.\n\n        The new position is specified by offset, relative to the\n        position indicated by whence. Possible values for whence are:\n\n            0: start of stream (default): offset must not be negative\n            1: current stream position\n            2: end of stream; offset must not be positive\n\n        Returns the new file position.\n\n        Note that seeking is emulated, so depending on the parameters,\n        this operation may be extremely slow.\n        ",
        "(Pdb) ",
        "shlex: token=",
        "Compressed data ended before the end-of-stream marker was reached",
        "~/.pdbrc",
        "shlex",
        "sep",
        "File not open for reading",
        "Constants/functions for interpreting results of os.stat() and os.lstat().\n\nSuggested usage: from stat import *\n",
        "decompress",
        "\\\\",
        "d",
        "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~",
        "Cannot specify an integrity check when opening a file for reading",
        "block",
        "start_new_thread",
        "PYTHONCASEOK",
        "Open a bzip2-compressed file.\n\n        If filename is a str, bytes, or PathLike object, it gives the\n        name of the file to be opened. Otherwise, it should be a file\n        object, which will be used to read or write the compressed data.\n\n        mode can be 'r' for reading (default), 'w' for (over)writing,\n        'x' for creating exclusively, or 'a' for appending. These can\n        equivalently be given as 'rb', 'wb', 'xb', and 'ab'.\n\n        buffering is ignored. Its use is deprecated.\n\n        If mode is 'w', 'x' or 'a', compresslevel can be a number between 1\n        and 9 specifying the level of compression: 1 produces the least\n        compression, and 9 (default) produces the most compression.\n\n        If mode is 'r', the input file may be the concatenation of\n        multiple compressed streams.\n        ",
        "a * b",
        "error",
        "year -> 1 if leap year, else 0.",
        "Variant of Queue that retrieves open entries in priority order (lowest first).\n\n    Entries are typically tuples of the form:  (priority number, data).\n    ",
        "rb",
        "FORMAT_RAW",
        "splitext",
        "SeProfileSingleProcessPrivilege",
        "/",
        "realpath"
    ]
}